"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[27537],{42595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var r=t(85893),a=t(11151);const c={description:"REFERENCE - Built-in Controls"},i="Tree Data Grid Column Types",s={id:"reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types",title:"Tree Data Grid Column Types",description:"REFERENCE - Built-in Controls",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types.md",sourceDirName:"reference/controls/detailed-reference/treedatagrid",slug:"/reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types",permalink:"/avalonia-docs/ru/docs/reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/current/reference/controls/detailed-reference/treedatagrid/treedatagrid-column-types.md",tags:[],version:"current",frontMatter:{description:"REFERENCE - Built-in Controls"},sidebar:"documentationSidebar",previous:{title:"Hierarchical Tree Data Grid",permalink:"/avalonia-docs/ru/docs/reference/controls/detailed-reference/treedatagrid/creating-a-hierarchical-treedatagrid"},next:{title:"Tree View",permalink:"/avalonia-docs/ru/docs/reference/controls/detailed-reference/treeview-1"}},o={},l=[{value:"Text Column",id:"text-column",level:3},{value:"Hierarchical Expander Column",id:"hierarchical-expander-column",level:3},{value:"Template Column",id:"template-column",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"tree-data-grid-column-types",children:"Tree Data Grid Column Types"}),"\n",(0,r.jsx)(n.p,{children:"The tree data grid supports three different column types:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Text Column"}),"\n",(0,r.jsx)(n.li,{children:"Hierarchical Expander Column"}),"\n",(0,r.jsx)(n.li,{children:"Template Column"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"text-column",children:"Text Column"}),"\n",(0,r.jsxs)(n.p,{children:["A text column (class ",(0,r.jsx)(n.code,{children:"TextColumn"}),") is useful when you want the cells in a column to have text values. A text column is created like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'new TextColumn<ItemClass, string>("Column Header", x => x.Property)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The first generic parameter here is the class of the items that make up the grid rows. The second generic parameter here is the type of the property."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-images.githubusercontent.com/53405089/157456551-dd394781-903a-4c7b-8874-e631e21534a1.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["The above is the signature of the ",(0,r.jsx)(n.code,{children:"TextColumn"})," constructor. The first two parameters are required: the first is the column header, and the second is an expression to get the value of the property."]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"TextColumn"})," class implements the column interface ",(0,r.jsx)(n.code,{children:"IColumn"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"hierarchical-expander-column",children:"Hierarchical Expander Column"}),"\n",(0,r.jsxs)(n.p,{children:["A hierarchical expander column (class: ",(0,r.jsx)(n.code,{children:"HierarchicalExpanderColumn"}),") can only be used with the ",(0,r.jsx)(n.em,{children:"hierarchical"})," data mode of operation, and it must be used with the data source class ",(0,r.jsx)(n.code,{children:"HierarchicalTreeDataGridSource"}),". This column type must contain an inner column (interface ",(0,r.jsx)(n.code,{children:"IColumn"}),") to define its header and value property. A hierarchical expander column displays the expand and contract chevron buttons in a hierarchical tree data grid."]}),"\n",(0,r.jsx)(n.p,{children:"This column type is created like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'new HierarchicalExpanderColumn<ItemClass>(\n    new TextColumn<ItemClass, string>("Column Header", x => x.Property), \n    x => x.Children)\n'})}),"\n",(0,r.jsx)(n.p,{children:"The generic parameter is the class of the items that make up the grid rows. This is the same as the item class for the inner column."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-images.githubusercontent.com/53405089/157536079-fd14f1ed-0a7d-438a-abba-fd56766709a9.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["The above is the signature of the ",(0,r.jsx)(n.code,{children:"HierarchicalExpanderColumn"})," constructor. The first parameter in the constructor is the inner column, and the second parameter is a (nullable) selector for any child elements."]}),"\n",(0,r.jsx)(n.h3,{id:"template-column",children:"Template Column"}),"\n",(0,r.jsxs)(n.p,{children:["The template column (class ",(0,r.jsx)(n.code,{children:"TemplateColumn"}),") is a fully customizable way for you to create a column. It essentially forms a ",(0,r.jsx)(n.strong,{children:"data template"})," for the column."]}),"\n",(0,r.jsx)(n.p,{children:"You create a template column like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",children:'new TemplateColumn<ItemClass>("Column Header",\n       new FuncDataTemplate<T>((a,e) => new SomeControl()))\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://user-images.githubusercontent.com/53405089/157664231-8653bce9-f8d6-4fbc-8e78-e3ff93f1ace2.png",alt:""})}),"\n",(0,r.jsxs)(n.p,{children:["The above is the signature of the ",(0,r.jsx)(n.code,{children:"TemplateColumn"}),"constructor.  It has two required parameters: the first is the column header, and the second is a function that returns ",(0,r.jsx)(n.code,{children:"IDataTemplate"}),"."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["For more information about the concept of creating a ",(0,r.jsx)(n.strong,{children:"data template"})," in code, see ",(0,r.jsx)(n.a,{href:"/avalonia-docs/ru/docs/concepts/templates/creating-data-templates-in-code",children:"here"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var r=t(67294);const a={},c=r.createContext(a);function i(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);