"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[6918],{12724:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>d,metadata:()=>s,toc:()=>h});var o=t(85893),a=t(11151);const i=t.p+"assets/images/command2-0233991fda4964f5ef62ba1b3bf5dc1e.gif",c=t.p+"assets/images/command3-ecc2618acd65efa6781870afa298d771.gif",d={id:"how-to-bind-to-a-command-without-reactiveui",title:"How to Bind to a Command without ReactiveUI"},r="How to Bind to a Command without ReactiveUI",s={id:"guides/data-binding/how-to-bind-to-a-command-without-reactiveui",title:"How to Bind to a Command without ReactiveUI",description:"Sometimes you just want to call a method when a button is clicked without the full ceremony of creating a reactive command, using the ReactiveUI framework.",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/guides/data-binding/how-to-bind-to-a-command-without-reactiveui.md",sourceDirName:"guides/data-binding",slug:"/guides/data-binding/how-to-bind-to-a-command-without-reactiveui",permalink:"/avalonia-docs/ru/docs/guides/data-binding/how-to-bind-to-a-command-without-reactiveui",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/current/guides/data-binding/how-to-bind-to-a-command-without-reactiveui.md",tags:[],version:"current",frontMatter:{id:"how-to-bind-to-a-command-without-reactiveui",title:"How to Bind to a Command without ReactiveUI"},sidebar:"documentationSidebar",previous:{title:"How to Bind to a Command with ReactiveUI",permalink:"/avalonia-docs/ru/docs/guides/data-binding/how-to-bind-to-a-command-with-reactiveui"},next:{title:"How to Bind to a Task Result",permalink:"/avalonia-docs/ru/docs/guides/data-binding/how-to-bind-to-a-task-result"}},l={},h=[{value:"Can Execute?",id:"can-execute",level:2},{value:"<strong>Trigger Can Execute</strong>",id:"trigger-can-execute",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"how-to-bind-to-a-command-without-reactiveui",children:"How to Bind to a Command without ReactiveUI"}),"\n",(0,o.jsxs)(n.p,{children:["Sometimes you just want to call a method when a button is clicked without the full ceremony of creating a reactive command, using the ",(0,o.jsx)(n.em,{children:"ReactiveUI"})," framework."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["To see how to how to bind to a command ",(0,o.jsx)(n.strong,{children:"with"})," ",(0,o.jsx)(n.em,{children:"ReactiveUI"}),", see ",(0,o.jsx)(n.a,{href:"/avalonia-docs/ru/docs/guides/data-binding/how-to-bind-to-a-command-with-reactiveui",children:"here"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Avalonia UI"})," data binding allows you to implement directly both a view model method that performs an action, and a property that can control whether the method can execute."]}),"\n",(0,o.jsx)(n.p,{children:"For example, using the XAML as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Window xmlns="https://github.com/avaloniaui">\n   ...\n   <StackPanel Margin="20">\n      <Button Command="{Binding PerformAction}"\n              CommandParameter="From the button, without ReactiveUI">\n              Run the example</Button>\n   </StackPanel>\n</Window>\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can write a view model capable of running the action, like this"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'namespace AvaloniaGuides.ViewModels\n{\n    public class MainWindowViewModel \n    {\n        public void PerformAction(object msg)\n        {\n            Debug.WriteLine($"The action was called. {msg}");\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)("img",{src:i,alt:""}),"\n",(0,o.jsx)(n.h2,{id:"can-execute",children:"Can Execute?"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.em,{children:"Avalonia UI"})," data binding provides a simple way of implementing a 'can execute?' feature using a naming convention."]}),"\n",(0,o.jsx)(n.p,{children:"If you need to have execution dependent on the value of a command parameter or a view model property, then you can write a second Boolean method to check if the action m,ethod can execute."}),"\n",(0,o.jsxs)(n.p,{children:["To make this work, ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," uses the naming convention that the Boolean method has the same root name as the action method, but with the added prefix 'Can'."]}),"\n",(0,o.jsx)(n.p,{children:"For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'namespace AvaloniaGuides.ViewModels\n{\n    public class MainWindowViewModel \n    {\n        public void PerformAction(object msg)\n        {\n            Debug.WriteLine($"The action was called. {msg}");\n        }\n\n        public bool CanPerformAction(object msg)\n        {\n            if (msg!=null) return !string.IsNullOrWhiteSpace( msg.ToString() );\n            return false;\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"So, extending the example XAML to supply the parameter (string) from a text box:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<StackPanel Margin="20">\n  <TextBox Margin="0 5" x:Name="message" \n           Watermark="Add a message to enable the button"/>\n  <Button Command="{Binding PerformAction}"\n          CommandParameter="{Binding #message.Text}">\n    Run the example\n  </Button>\n</StackPanel>\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["This example uses the technique of binding directly to another control. You can see how to do this, ",(0,o.jsx)(n.a,{href:"/avalonia-docs/ru/docs/guides/data-binding/binding-to-controls",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"You will see that the button becomes enables only when the text box contains a string."}),"\n",(0,o.jsx)("img",{src:c,alt:""}),"\n",(0,o.jsx)(n.h2,{id:"trigger-can-execute",children:(0,o.jsx)(n.strong,{children:"Trigger Can Execute"})}),"\n",(0,o.jsxs)(n.p,{children:["If you want to trigger the 'can execute?' method from another property in your view model, then you will have to decorate the property with one or more ",(0,o.jsx)(n.code,{children:"DependsOn"})," attributes, and write the code to invoke property changed events yourself."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["This technique applies to a view model that is not using the ",(0,o.jsx)(n.em,{children:"ReactiveUI"})," framework."]})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>c});var o=t(67294);const a={},i=o.createContext(a);function c(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);