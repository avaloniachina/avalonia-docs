"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[36220],{49425:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>d,metadata:()=>l,toc:()=>c});var o=i(85893),t=i(11151);const d={id:"compiled-bindings",title:"Compiled Bindings"},a=void 0,l={id:"data-binding/compiled-bindings",title:"Compiled Bindings",description:"Bindings defined in the XAML are using reflection in order to find and access the requested property in your ViewModel. In Avalonia, you can also use compiled bindings, which have some benefits:",source:"@site/i18n/ru/docusaurus-plugin-content-docs/version-0.10.x/data-binding/compiled-bindings.md",sourceDirName:"data-binding",slug:"/data-binding/compiled-bindings",permalink:"/avalonia-docs/ru/docs/0.10.x/data-binding/compiled-bindings",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/version-0.10.x/data-binding/compiled-bindings.md",tags:[],version:"0.10.x",frontMatter:{id:"compiled-bindings",title:"Compiled Bindings"},sidebar:"documentationSidebar",previous:{title:"Bindings",permalink:"/avalonia-docs/ru/docs/0.10.x/data-binding/bindings"},next:{title:"Binding to Controls",permalink:"/avalonia-docs/ru/docs/0.10.x/data-binding/binding-to-controls"}},s={},c=[{value:"Enable and disable compiled bindings",id:"enable-and-disable-compiled-bindings",level:2},{value:"CompiledBinding-Markup",id:"compiledbinding-markup",level:2},{value:"ReflectionBinding-Markup",id:"reflectionbinding-markup",level:2},{value:"Known limitations",id:"known-limitations",level:2}];function r(n){const e={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.p,{children:["Bindings defined in the XAML are using reflection in order to find and access the requested property in your ",(0,o.jsx)(e.code,{children:"ViewModel"}),". In Avalonia, you can also use compiled bindings, which have some benefits:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"If you use compiled bindings and the property you bind to is not found, you will get a compile-time error. Hence you get a much better debugging experience."}),"\n",(0,o.jsxs)(e.li,{children:["Reflection is known to be slow (",(0,o.jsx)(e.a,{href:"https://www.codeproject.com/Articles/1161127/Why-is-reflection-slow",children:"see this article on codeproject.com"}),"). Using compiled bindings can therefore improve the performance of your application."]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"enable-and-disable-compiled-bindings",children:"Enable and disable compiled bindings"}),"\n",(0,o.jsxs)(e.p,{children:["Compiled bindings are not enabled by default. To enable compiled bindings, you will need to define the ",(0,o.jsx)(e.code,{children:"DataType"})," of the object you want to bind to first. In ",(0,o.jsx)(e.a,{href:"/avalonia-docs/ru/docs/0.10.x/templates/data-templates",children:(0,o.jsx)(e.code,{children:"DataTemplates"})})," there is a property ",(0,o.jsx)(e.code,{children:"DataType"}),", for all other elements you can set it via ",(0,o.jsx)(e.code,{children:"x:DataType"}),". Most likely you will set ",(0,o.jsx)(e.code,{children:"x:DataType"})," in your root node, for example in a ",(0,o.jsx)(e.code,{children:"Window"})," or an ",(0,o.jsx)(e.code,{children:"UserControl"}),". From Avalonia version ",(0,o.jsx)(e.code,{children:"0.10.12"})," onward you can also specify the ",(0,o.jsx)(e.code,{children:"DataType"})," in the ",(0,o.jsx)(e.code,{children:"Binding"})," directly."]}),"\n",(0,o.jsxs)(e.p,{children:["You can now enable or disable compiled bindings by setting ",(0,o.jsx)(e.code,{children:'x:CompileBindings="[True|False]"'}),". All child nodes will inherit this property, so you can enable it in your root node and disable it for a specific child, if needed."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-markup",children:'\x3c!-- Set DataType and enable compiled bindings --\x3e\n<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:vm="using:MyApp.ViewModels"\n             x:DataType="vm:MyViewModel"\n             x:CompileBindings="True">\n    <StackPanel>\n        <TextBlock Text="Last name:" />\n        <TextBox Text="{Binding LastName}" />\n        <TextBlock Text="Given name:" />\n        <TextBox Text="{Binding GivenName}" />\n        <TextBlock Text="E-Mail:" />\n        \x3c!-- Set DataType inside the Binding-markup --\x3e\n        <TextBox Text="{Binding MailAddress, DataType={x:Type vm:MyViewModel}}" />\n\n        \x3c!-- We cannot use compiled bindings to bind to methods, so we opt them out for the button --\x3e\n        <Button x:CompileBindings="False"\n                Content="Send an E-Mail"\n                Command="{Binding SendEmailCommand}" />\n    </StackPanel>\n</UserControl>\n'})}),"\n",(0,o.jsxs)(e.p,{children:["Starting from Avalonia ",(0,o.jsx)(e.code,{children:"11.0-preview5"})," you can also enable or disable it in whole project:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-xml",children:"<PropertyGroup>\n   <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>\n</PropertyGroup>\n"})}),"\n",(0,o.jsx)(e.h2,{id:"compiledbinding-markup",children:"CompiledBinding-Markup"}),"\n",(0,o.jsxs)(e.p,{children:["If you don't want to enable compiled bindings for all child nodes, you can also use the ",(0,o.jsx)(e.code,{children:"CompiledBinding"}),"-markup. You still need to define the ",(0,o.jsx)(e.code,{children:"DataType"}),", but you can omit ",(0,o.jsx)(e.code,{children:'x:CompileBindings="True"'}),"."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-markup",children:'\x3c!-- Set DataType --\x3e\n<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:vm="using:MyApp.ViewModels"\n             x:DataType="vm:MyViewModel">\n    <StackPanel>\n        <TextBlock Text="Last name:" />\n        \x3c!-- use CompiledBinding markup for your binding --\x3e\n        <TextBox Text="{CompiledBinding LastName}" />\n        <TextBlock Text="Given name:" />\n        <TextBox Text="{CompiledBinding GivenName}" />\n        <TextBlock Text="E-Mail:" />\n        <TextBox Text="{CompiledBinding MailAddress}" />\n\n        \x3c!-- We cannot use compiled bindings to bind to methods, so we use the normal Binding --\x3e\n        <Button Content="Send an E-Mail"\n                Command="{Binding SendEmailCommand}" />\n    </StackPanel>\n</UserControl>\n'})}),"\n",(0,o.jsx)(e.h2,{id:"reflectionbinding-markup",children:"ReflectionBinding-Markup"}),"\n",(0,o.jsxs)(e.p,{children:["If you have compiled bindings enabled in the root node (via ",(0,o.jsx)(e.code,{children:'x:CompileBindings="True"'}),") and you either don't want to use compiled binding at a certain position or you hit one of the ",(0,o.jsx)(e.a,{href:"#known-limitations",children:"known limitations"}),", you can use the ",(0,o.jsx)(e.code,{children:"ReflectionBinding"}),"-markup."]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-markup",children:'\x3c!-- Set DataType --\x3e\n<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:vm="using:MyApp.ViewModels"\n             x:DataType="vm:MyViewModel"\n             x:CompileBindings="True">\n    <StackPanel>\n        <TextBlock Text="Last name:" />\n        <TextBox Text="{Binding LastName}" />\n        <TextBlock Text="Given name:" />\n        <TextBox Text="{Binding GivenName}" />\n        <TextBlock Text="E-Mail:" />\n        <TextBox Text="{Binding MailAddress}" />\n\n        \x3c!-- We cannot use compiled bindings to bind to methods, so we use ReflectionBinding instead --\x3e\n        <Button Content="Send an E-Mail"\n                Command="{ReflectionBinding SendEmailCommand}" />\n    </StackPanel>\n</UserControl>\n'})}),"\n",(0,o.jsx)(e.h2,{id:"known-limitations",children:"Known limitations"}),"\n",(0,o.jsx)(e.p,{children:"Compiled bindings have some known limitations:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Compiled bindings cannot be used to bind to named elements"}),"\n",(0,o.jsxs)(e.li,{children:["Compiled bindings cannot be used in Styles with RelativeSource set to TemplatedParent (e.g.: ",(0,o.jsx)(e.code,{children:"{Binding Width, RelativeSource={RelativeSource TemplatedParent}}"}),")"]}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["If you hit one of those limitations you should disable compiled bindings for the failing XAML-node or use ",(0,o.jsx)(e.code,{children:"ReflectionBinding"})," instead."]})]})}function m(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(r,{...n})}):r(n)}},11151:(n,e,i)=>{i.d(e,{Z:()=>l,a:()=>a});var o=i(67294);const t={},d=o.createContext(t);function a(n){const e=o.useContext(d);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),o.createElement(d.Provider,{value:e},n.children)}}}]);