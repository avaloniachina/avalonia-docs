"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[54615],{18430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=n(85893),o=n(11151);const s={id:"platform-settings",title:"Platform Settings"},r=void 0,a={id:"concepts/services/platform-settings",title:"Platform Settings",description:"The PlatformSettings class represents a contract for accessing platform-specific settings and information. Some of these settings might be changed by the user globally in the OS in runtime.",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/concepts/services/platform-settings.md",sourceDirName:"concepts/services",slug:"/concepts/services/platform-settings",permalink:"/avalonia-docs/ru/docs/concepts/services/platform-settings",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/current/concepts/services/platform-settings.md",tags:[],version:"current",frontMatter:{id:"platform-settings",title:"Platform Settings"},sidebar:"documentationSidebar",previous:{title:"Insets Manager",permalink:"/avalonia-docs/ru/docs/concepts/services/insets-manager"},next:{title:"StorageProvider",permalink:"/avalonia-docs/ru/docs/concepts/services/storage-provider/"}},l={},c=[{value:"Methods",id:"methods",level:2},{value:"GetTapSize(PointerType type)",id:"gettapsizepointertype-type",level:3},{value:"GetDoubleTapSize(PointerType type)",id:"getdoubletapsizepointertype-type",level:3},{value:"GetDoubleTapTime(PointerType type)",id:"getdoubletaptimepointertype-type",level:3},{value:"GetColorValues()",id:"getcolorvalues",level:3},{value:"Properties",id:"properties",level:2},{value:"HoldWaitDuration",id:"holdwaitduration",level:3},{value:"Events",id:"events",level:2},{value:"ColorValuesChanged",id:"colorvalueschanged",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"PlatformSettings"})," class represents a contract for accessing platform-specific settings and information. Some of these settings might be changed by the user globally in the OS in runtime."]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"PlatformSettings"})," can be access through an instance of ",(0,i.jsx)(t.code,{children:"TopLevel"})," or ",(0,i.jsx)(t.code,{children:"Window"}),", for more details on accessing ",(0,i.jsx)(t.code,{children:"TopLevel"})," please visit ",(0,i.jsx)(t.a,{href:"../toplevel",children:"TopLevel"})," page:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"var platformSettings = window.PlatformSettings;\n"})}),"\n",(0,i.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(t.h3,{id:"gettapsizepointertype-type",children:"GetTapSize(PointerType type)"}),"\n",(0,i.jsx)(t.p,{children:"Returns the size of the rectangle around the location of a pointer down that a pointer up must occur within in order to register a tap gesture, in device-independent pixels."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"Size GetTapSize(PointerType type);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"getdoubletapsizepointertype-type",children:"GetDoubleTapSize(PointerType type)"}),"\n",(0,i.jsx)(t.p,{children:"Returns the size of the rectangle around the location of a pointer down that a pointer up must occur within in order to register a double-tap gesture, in device-independent pixels."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"Size GetDoubleTapSize(PointerType type);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"getdoubletaptimepointertype-type",children:"GetDoubleTapTime(PointerType type)"}),"\n",(0,i.jsx)(t.p,{children:"Returns the maximum time that may occur between the first and second click of a double-tap gesture."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"TimeSpan GetDoubleTapTime(PointerType type);\n"})}),"\n",(0,i.jsx)(t.h3,{id:"getcolorvalues",children:"GetColorValues()"}),"\n",(0,i.jsx)(t.p,{children:"Returns the current system color values, including dark mode and accent colors."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"PlatformColorValues GetColorValues();\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"While build-in FluentTheme supports automatic switching between accent colors, this method is useful to apply custom logic with OS color settings."})}),"\n",(0,i.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(t.h3,{id:"holdwaitduration",children:"HoldWaitDuration"}),"\n",(0,i.jsxs)(t.p,{children:["The duration between pointer press and when the ",(0,i.jsx)(t.code,{children:"Holding"})," event is fired."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"TimeSpan HoldWaitDuration { get; }\n"})}),"\n",(0,i.jsx)(t.p,{children:"###\xa0HotkeyConfiguration\nThe configuration for platform-specific hotkeys in an Avalonia application."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"PlatformHotkeyConfiguration HotkeyConfiguration { get; }\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsx)(t.p,{children:"HotkeyConfiguration is especially useful when application needs to handle well known gestures like Copy, Paste or Cut."})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"protected override void OnKeyDown(KeyEventArgs e)\n{\n    var hotkeys = TopLevel.GetTopLevel(this).PlatformSettings.HotkeyConfiguration;\n    if (hotkeys.Copy.Any(g => g.Matches(e)))\n    {\n        // Handle Copy hotkey.\n    }\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"events",children:"Events"}),"\n",(0,i.jsx)(t.h3,{id:"colorvalueschanged",children:"ColorValuesChanged"}),"\n",(0,i.jsx)(t.p,{children:"Raised when current system color values are changed. This includes changes to dark mode and accent colors."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",children:"event EventHandler<PlatformColorValues>? ColorValuesChanged;\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Use the ",(0,i.jsx)(t.code,{children:"IPlatformSettings"})," interface to adapt your application's behavior to user-specific platform settings."]})]})}function p(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var i=n(67294);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);