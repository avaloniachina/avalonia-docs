"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[63266],{61404:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var t=n(85893),s=n(11151);const o={description:"REFERENCE - Gestures"},c="ScrollGestureRecognizer",i={id:"reference/gestures/scrollgesturerecognizer",title:"ScrollGestureRecognizer",description:"REFERENCE - Gestures",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/reference/gestures/scrollgesturerecognizer.md",sourceDirName:"reference/gestures",slug:"/reference/gestures/scrollgesturerecognizer",permalink:"/avalonia-docs/ru/docs/reference/gestures/scrollgesturerecognizer",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/current/reference/gestures/scrollgesturerecognizer.md",tags:[],version:"current",frontMatter:{description:"REFERENCE - Gestures"},sidebar:"documentationSidebar",previous:{title:"PullGestureRecognizer",permalink:"/avalonia-docs/ru/docs/reference/gestures/pullgesturerecognizer"},next:{title:"index",permalink:"/avalonia-docs/ru/docs/reference/"}},l={},a=[{value:"Using a ScrollGestureRecognizer",id:"using-a-scrollgesturerecognizer",level:2},{value:"Useful Properties",id:"useful-properties",level:2},{value:"More Information",id:"more-information",level:2}];function u(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"scrollgesturerecognizer",children:"ScrollGestureRecognizer"}),"\n",(0,t.jsx)(r.p,{children:"A gesture recognizer that tracks a scrolling gesture. This can be attached to a control to detect when a pointer moves in a specific direction inside the control's bounds. This is especially useful when a control pans its contents, either horizontally, vertically or both."}),"\n",(0,t.jsx)(r.h2,{id:"using-a-scrollgesturerecognizer",children:"Using a ScrollGestureRecognizer"}),"\n",(0,t.jsxs)(r.p,{children:["A ScrollGestureRecognizer can be attached to a control using the control's ",(0,t.jsx)(r.code,{children:"GestureRecognizers"})," property."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-xml",children:'<Image Stretch="UniformToFill"\n        Margin="5"\n        Name="image"\n        Source="/image.jpg">\n  <Image.GestureRecognizers>\n    <ScrollGestureRecognizer CanHorizontallyScroll="True"\n                              CanVerticallyScroll="True"/>\n  </Image.GestureRecognizers>\n</Image>\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-csharp",metastring:"title='C#'",children:"image.GestureRecognizers.Add(new ScrollGestureRecognizer()\n            {\n                CanVerticallyScroll = true,\n                CanHorizontallyScroll = true,\n            });\n"})}),"\n",(0,t.jsxs)(r.p,{children:["The ScrollGestureRegonizer raises a ",(0,t.jsx)(r.code,{children:"Gestures.ScrollGestureEvent"})," when it detects the start of a scroll gesture. When the scroll ends, from the pointer being released or another gesture start, it raises a ",(0,t.jsx)(r.code,{children:"Gestures.ScrollGestureEndedEvent"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"useful-properties",children:"Useful Properties"}),"\n",(0,t.jsx)(r.p,{children:"You will probably use these properties most often:"}),"\n",(0,t.jsxs)("table",{children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{width:"266",children:"Property"}),(0,t.jsx)("th",{children:"Description"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"CanVerticallyScroll"}),(0,t.jsx)("td",{children:"Defines whether the content can be scrolled vertically. "})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"CanHorizontallyScroll"}),(0,t.jsx)("td",{children:"Defines whether the content can be scrolled horizontally. "})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"more-information",children:"More Information"}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["For the complete API documentation about this gesture recognizer, see ",(0,t.jsx)(r.a,{href:"https://reference.avaloniaui.net/api/Avalonia.Input.GestureRecognizers/ScrollGestureRecognizer/",children:"here"}),"."]})}),"\n",(0,t.jsx)(r.admonition,{type:"info",children:(0,t.jsxs)(r.p,{children:["View the source code on ",(0,t.jsx)(r.em,{children:"GitHub"})," ",(0,t.jsx)(r.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Input/GestureRecognizers/ScrollGestureRecognizer.cs",children:(0,t.jsx)(r.code,{children:"ScrollGestureRecognizer.cs"})})]})})]})}function d(e={}){const{wrapper:r}={...(0,s.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},11151:(e,r,n)=>{n.d(r,{Z:()=>i,a:()=>c});var t=n(67294);const s={},o=t.createContext(s);function c(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);