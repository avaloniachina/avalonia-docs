"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[1917],{54196:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var a=t(85893),o=t(11151);const i={id:"menu",title:"Menu"},c=void 0,d={id:"controls/menu",title:"Menu",description:"The Menu control adds a top-level menu to an application. A Menu is usually placed in a DockPanel in a Window, docked to the top of the window:",source:"@site/i18n/ru/docusaurus-plugin-content-docs/version-0.10.x/controls/menu.md",sourceDirName:"controls",slug:"/controls/menu",permalink:"/avalonia-docs/ru/docs/0.10.x/controls/menu",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/version-0.10.x/controls/menu.md",tags:[],version:"0.10.x",frontMatter:{id:"menu",title:"Menu"},sidebar:"documentationSidebar",previous:{title:"MaskedTextBox",permalink:"/avalonia-docs/ru/docs/0.10.x/controls/maskedtextbox"},next:{title:"NativeMenu",permalink:"/avalonia-docs/ru/docs/0.10.x/controls/nativemenu"}},s={},l=[{value:"Accelerator Keys",id:"accelerator-keys",level:2},{value:"Menu Commands",id:"menu-commands",level:2},{value:"Menu Icons",id:"menu-icons",level:2},{value:"Checkboxes",id:"checkboxes",level:2},{value:"Dynamically Creating Menus",id:"dynamically-creating-menus",level:2},{value:"Reference",id:"reference",level:2},{value:"Source code",id:"source-code",level:2}];function r(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Menu"})," control adds a top-level menu to an application. A ",(0,a.jsx)(n.code,{children:"Menu"})," is usually placed in a ",(0,a.jsx)(n.code,{children:"DockPanel"})," in a ",(0,a.jsx)(n.code,{children:"Window"}),", docked to the top of the window:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <DockPanel>\n        <Menu DockPanel.Dock="Top">\n            <MenuItem Header="_File">\n                <MenuItem Header="_Open..."/>\n                <Separator/>\n                <MenuItem Header="_Exit"/>\n            </MenuItem>\n            <MenuItem Header="_Edit">\n                <MenuItem Header="Copy"/>\n                <MenuItem Header="Paste"/>\n            </MenuItem>\n        </Menu>\n    </DockPanel>\n</Window>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["A menu will usually contain a set of nested ",(0,a.jsx)(n.code,{children:"MenuItem"}),"s. The first level of ",(0,a.jsx)(n.code,{children:"MenuItem"}),"s represent the items that will be displayed horizontally along the menu. The second level of ",(0,a.jsx)(n.code,{children:"MenuItem"}),"s represent the menu items that will be dropped down from the top-level and subsequent nested ",(0,a.jsx)(n.code,{children:"MenuItem"}),"s represent sub-menus."]}),"\n",(0,a.jsxs)(n.p,{children:["The text of the ",(0,a.jsx)(n.code,{children:"MenuItem"})," is displayed by the ",(0,a.jsx)(n.code,{children:"Header"})," property; the inner content of the ",(0,a.jsx)(n.code,{children:"MenuItem"})," is where the sub-items are placed."]}),"\n",(0,a.jsxs)(n.p,{children:["Separators are added by including a ",(0,a.jsx)(n.code,{children:"Separator"})," control or a ",(0,a.jsx)(n.code,{children:"MenuItem"})," with a header of ",(0,a.jsx)(n.code,{children:'"-"'}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"accelerator-keys",children:"Accelerator Keys"}),"\n",(0,a.jsx)(n.p,{children:"An accelerator key is a key on your keyboard that you can press to quickly access a menu. It is also sometimes called a hot key, access key or mnemonic."}),"\n",(0,a.jsxs)(n.p,{children:["If you will press Alt with the example above you will see that some letters are underlined. You can use a combination of Alt + underlined letter to navigate within a menu. In Avalonia to identify the accelerator key, you will need to use ",(0,a.jsx)(n.code,{children:"_"})," next character to this character would be an accelerator key."]}),"\n",(0,a.jsx)(n.h2,{id:"menu-commands",children:"Menu Commands"}),"\n",(0,a.jsxs)(n.p,{children:["Like ",(0,a.jsx)(n.code,{children:"Button"}),", commands can be ",(0,a.jsx)(n.a,{href:"../data-binding/binding-to-commands",children:"bound"})," to ",(0,a.jsx)(n.code,{children:"MenuItem"}),"s. The command will be executed when the menu item is clicked or selected with the keyboard:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<Menu>\n    <MenuItem Header="_File">\n        <MenuItem Header="_Open..." Command="{Binding OpenCommand}"/>\n    </MenuItem>\n</Menu>\n'})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["See the ",(0,a.jsx)(n.a,{href:"../data-binding/binding-to-commands",children:"Binding to Commands"})," section for more information on binding to commands."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"menu-icons",children:"Menu Icons"}),"\n",(0,a.jsxs)(n.p,{children:["A menu icon can be displayed by placing an ",(0,a.jsx)(n.code,{children:"Image"})," in the ",(0,a.jsx)(n.code,{children:"Icon"})," property:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'    <MenuItem Header="_Open...">\n        <MenuItem.Icon>\n            <Image Source="resm:MyApp.Assets.Open.png"/>\n        </MenuItem.Icon>\n    </MenuItem>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"checkboxes",children:"Checkboxes"}),"\n",(0,a.jsxs)(n.p,{children:["Similarly, a ",(0,a.jsx)(n.code,{children:"CheckBox"})," can be displayed in the ",(0,a.jsx)(n.code,{children:"Icon"})," property to make the ",(0,a.jsx)(n.code,{children:"MenuItem"})," checkable:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'    <MenuItem Header="_Open...">\n        <MenuItem.Icon>\n            <CheckBox BorderThickness="0"\n                      IsHitTestVisible="False"\n                      Command="{Binding ToggleCommand}">\n                Toggle _Me\n            </CheckBox>\n        </MenuItem.Icon>\n    </MenuItem>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"dynamically-creating-menus",children:"Dynamically Creating Menus"}),"\n",(0,a.jsxs)(n.p,{children:["Menus can also be dynamically created using bindings and ",(0,a.jsx)(n.a,{href:"../wpf-developer-tips/datatemplates",children:(0,a.jsx)(n.code,{children:"DataTemplate"})}),"s. To do this, you will usually create a view model to represent your ",(0,a.jsx)(n.code,{children:"Window"})," with a set of commands relating to the menu commands:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class MainWindowViewModel\n{\n    public MainWindowViewModel()\n    {\n        OpenCommand = ReactiveCommand.CreateFromTask(Open);\n        SaveCommand = ReactiveCommand.Create(Save);\n        OpenRecentCommand = ReactiveCommand.Create<string>(OpenRecent);\n    }\n\n    public IReadOnlyList<MenuItemViewModel> MenuItems { get; set; }\n    public ReactiveCommand<Unit, Unit> OpenCommand { get; }\n    public ReactiveCommand<Unit, Unit> SaveCommand { get; }\n    public ReactiveCommand<string, Unit> OpenRecentCommand { get; }\n\n    public async Task Open()\n    {\n        var dialog = new OpenFileDialog();\n        var result = await dialog.ShowAsync();\n\n        if (result != null)\n        {\n            foreach (var path in result)\n            {\n                System.Diagnostics.Debug.WriteLine($"Opened: {path}");\n            }\n        }\n    }\n\n    public void Save()\n    {\n        System.Diagnostics.Debug.WriteLine("Save");\n    }\n\n    public void OpenRecent(string path)\n    {\n        System.Diagnostics.Debug.WriteLine($"Open recent: {path}");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"And a view model for the menu items"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public class MenuItemViewModel\n{\n    public string Header { get; set; }\n    public ICommand Command { get; set; }\n    public object CommandParameter { get; set; }\n    public IList<MenuItemViewModel> Items { get; set; }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Next, you can create your menu structure using the view models. The following code when placed in a ",(0,a.jsx)(n.code,{children:"Window"})," constructor will create a basic menu structure and assign it to the ",(0,a.jsx)(n.code,{children:"Window"}),"'s ",(0,a.jsx)(n.code,{children:"DataContext"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public MainWindow()\n{\n    InitializeComponent();\n\n    var vm = new MainWindowViewModel();\n\n    vm.MenuItems = new[]\n    {\n        new MenuItemViewModel\n        {\n            Header = "_File",\n            Items = new[]\n            {\n                new MenuItemViewModel { Header = "_Open...", Command = vm.OpenCommand },\n                new MenuItemViewModel { Header = "Save", Command = vm.SaveCommand },\n                new MenuItemViewModel { Header = "-" },\n                new MenuItemViewModel\n                {\n                    Header = "Recent",\n                    Items = new[]\n                    {\n                        new MenuItemViewModel\n                        {\n                            Header = "File1.txt",\n                            Command = vm.OpenRecentCommand,\n                            CommandParameter = @"c:\\foo\\File1.txt"\n                        },\n                        new MenuItemViewModel\n                        {\n                            Header = "File2.txt",\n                            Command = vm.OpenRecentCommand,\n                            CommandParameter = @"c:\\foo\\File2.txt"\n                        },\n                    }\n                },\n            }\n        },\n        new MenuItemViewModel\n        {\n            Header = "_Edit",\n            Items = new[]\n            {\n                new MenuItemViewModel { Header = "_Copy" },\n                new MenuItemViewModel { Header = "_Paste" },\n            }\n        }\n    };\n\n    DataContext = vm;\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Finally assign the bindings to the view model in a ",(0,a.jsx)(n.code,{children:"Style"})," within the menu:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<Menu Items="{Binding MenuItems}">\n    <Menu.Styles>\n        <Style Selector="MenuItem">\n            <Setter Property="Header" Value="{Binding Header}"/>\n            <Setter Property="Items" Value="{Binding Items}"/>\n            <Setter Property="Command" Value="{Binding Command}"/>\n            <Setter Property="CommandParameter" Value="{Binding CommandParameter}"/>\n        </Style>\n    </Menu.Styles>\n</Menu>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"reference",children:"Reference"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"http://reference.avaloniaui.net/api/Avalonia.Controls/Menu/",children:"Menu"})}),"\n",(0,a.jsx)(n.h2,{id:"source-code",children:"Source code"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls/Menu.cs",children:"Menu.cs"})})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>d,a:()=>c});var a=t(67294);const o={},i=a.createContext(o);function c(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);