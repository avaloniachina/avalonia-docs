"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[75892],{34280:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>l});var s=t(85893),i=t(11151);const a=t.p+"assets/images/long1-be25e0feedca147e7c0a93bf4c0e01ca.gif",o=t.p+"assets/images/long2-0d2e191c35c76a500d33619dda3832a4.gif",r={id:"accessing-the-ui-thread",title:"How To Access the UI Thread"},c="How To Access the UI Thread",d={id:"guides/development-guides/accessing-the-ui-thread",title:"How To Access the UI Thread",description:"This guide will show you how to access the UI thread in your Avalonia UI application.",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/guides/development-guides/accessing-the-ui-thread.md",sourceDirName:"guides/development-guides",slug:"/guides/development-guides/accessing-the-ui-thread",permalink:"/avalonia-docs/ru/docs/guides/development-guides/accessing-the-ui-thread",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/current/guides/development-guides/accessing-the-ui-thread.md",tags:[],version:"current",frontMatter:{id:"accessing-the-ui-thread",title:"How To Access the UI Thread"},sidebar:"documentationSidebar",previous:{title:"Add a Custom Control Class",permalink:"/avalonia-docs/ru/docs/guides/custom-controls/add-custom-control-class"},next:{title:"Data Validation",permalink:"/avalonia-docs/ru/docs/guides/development-guides/data-validation"}},h={},l=[{value:"Dispatcher Priority",id:"dispatcher-priority",level:2},{value:"Example",id:"example",level:2},{value:"More Information",id:"more-information",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"how-to-access-the-ui-thread",children:"How To Access the UI Thread"}),"\n",(0,s.jsxs)(n.p,{children:["This guide will show you how to access the UI thread in your ",(0,s.jsx)(n.em,{children:"Avalonia UI"})," application."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"Avalonia UI"})," applications have one main thread, and this handles the UI. When you have a process that is intensive, or long running, then you will usually opt to run it on a different thread. Then you may have scenarios where you want to update them main UI thread (for example with progress updates)."]}),"\n",(0,s.jsxs)(n.p,{children:["A dispatcher provides services for managing work items on any specific thread. In ",(0,s.jsx)(n.em,{children:"Avalonia UI"})," you will already have the dispatcher that handles the UI thread. When you need to update the UI from a different thread, you access it through this dispatcher, as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",children:"Dispatcher.UIThread\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can use either the ",(0,s.jsx)(n.code,{children:"Post"})," method or the ",(0,s.jsx)(n.code,{children:"InvokeAsync"})," method to run a process on the UI thread."]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"Post"})," when you just want to start a job, but you do not need to wait for the job to be finished, and you do not need the result: this is the 'fire-and-forget' dispatcher method."]}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"InvokeAsync"})," when you need to wait for the result, and potentially want to receive the result."]}),"\n",(0,s.jsx)(n.h2,{id:"dispatcher-priority",children:"Dispatcher Priority"}),"\n",(0,s.jsxs)(n.p,{children:["Both of the above methods have a dispatcher priority parameter. You can use this with the ",(0,s.jsx)(n.code,{children:"DispatcherPriority"})," enumeration to specify the queue priority that the given job should be given."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["For the possible values of the ",(0,s.jsx)(n.code,{children:"DispatcherPriority"})," enumeration, see ",(0,s.jsx)(n.a,{href:"http://reference.avaloniaui.net/api/Avalonia.Threading/DispatcherPriority/",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["In this example a text block is used to show the result of a long running task, and a button is used to start the work. In this version, the fire-and-forget ",(0,s.jsx)(n.code,{children:"Post"})," method is used:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"title='XAML'",children:'<StackPanel Margin="20">    \n  <Button x:Name="RunButton" Content="Run long running process" \n          Click="ButtonClickHandler" />\n  <TextBlock x:Name="ResultText" Margin="10"/>\n</StackPanel>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='Task C#'",children:'using System.Threading.Tasks;\n...\nprivate async Task LongRunningTask()\n{\n    this.FindControl<Button>("RunButton").IsEnabled = false;\n    this.FindControl<TextBlock>("ResultText").Text = "I\'m working ...";\n    await Task.Delay(5000);\n    this.FindControl<TextBlock>("ResultText").Text = "Done";\n    this.FindControl<Button>("RunButton").IsEnabled = true;\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='Post C#'",children:"private void ButtonClickHandler(object sender, RoutedEventArgs e)\n{\n    // Start the job and return immediately\n    Dispatcher.UIThread.Post(() => LongRunningTask(), \n                                            DispatcherPriority.Background);\n}\n"})}),"\n",(0,s.jsx)("img",{src:a,alt:""}),"\n",(0,s.jsx)(n.p,{children:"Notice that because the long running task is executed on its own thread, the UI does not lose responsiveness."}),"\n",(0,s.jsxs)(n.p,{children:["To get a result from the long running task, the XAML is the same, but this version uses the ",(0,s.jsx)(n.code,{children:"InvokeAsync"}),"method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",metastring:"title='XAML'",children:'<StackPanel Margin="20">    \n  <Button x:Name="RunButton" Content="Run long running process" \n          Click="ButtonClickHandler" />\n  <TextBlock x:Name="ResultText" Margin="10" />\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='Task C#'",children:'using System.Threading.Tasks;\n...\nprivate async Task<string> LongRunningTask()\n{\n    this.FindControl<Button>("RunButton").IsEnabled = false;\n    this.FindControl<TextBlock>("ResultText").Text = "I\'m working ...";\n    await Task.Delay(5000);    \n    return "Success";\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='InvokeAsync C#'",children:'private async void ButtonClickHandler(object sender, RoutedEventArgs e)\n{\n    var result = await Dispatcher.UIThread.InvokeAsync(LongRunningTask, \n                                    DispatcherPriority.Background);\n    //result returns here\n    this.FindControl<TextBlock>("ResultText").Text = result;\n    this.FindControl<Button>("RunButton").IsEnabled = true;\n}\n'})}),"\n",(0,s.jsx)("img",{src:o,alt:""}),"\n",(0,s.jsx)(n.h2,{id:"more-information",children:"More Information"}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["For the complete API documentation about the dispatcher, see ",(0,s.jsx)(n.a,{href:"http://reference.avaloniaui.net/api/Avalonia.Threading/Dispatcher/",children:"here"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["View the source code on ",(0,s.jsx)(n.em,{children:"GitHub"})," ",(0,s.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Threading/Dispatcher.cs",children:(0,s.jsx)(n.code,{children:"Dispatcher.cs"})})]})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>o});var s=t(67294);const i={},a=s.createContext(i);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);