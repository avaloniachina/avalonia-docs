"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[65824],{23408:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>l,frontMatter:()=>c,metadata:()=>r,toc:()=>d});var i=t(85893),o=t(11151);const c={description:"CONCEPTS - ReactiveUI"},a="Command Update",r={id:"concepts/reactiveui/command-update",title:"Command Update",description:"CONCEPTS - ReactiveUI",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/concepts/reactiveui/command-update.md",sourceDirName:"concepts/reactiveui",slug:"/concepts/reactiveui/command-update",permalink:"/avalonia-docs/ru/docs/concepts/reactiveui/command-update",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/current/concepts/reactiveui/command-update.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS - ReactiveUI"},sidebar:"documentationSidebar",previous:{title:"Reactive View Model",permalink:"/avalonia-docs/ru/docs/concepts/reactiveui/reactive-view-model"},next:{title:"Reactive Command",permalink:"/avalonia-docs/ru/docs/concepts/reactiveui/reactive-command"}},s={},d=[];function u(e){const n={code:"code",em:"em",h1:"h1",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"command-update",children:"Command Update"}),"\n",(0,i.jsxs)(n.p,{children:["This page introduces how you can use Avalonia UI binding to initiate changes on a view model from controls like buttons that have a ",(0,i.jsx)(n.code,{children:"Command"})," attribute."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, you can use this view model with an action defined in the method ",(0,i.jsx)(n.code,{children:"ButtonAction"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'public class MainWindowViewModel : ViewModelBase\n{\n    private string _greeting = "Welcome to Avalonia!";\n\n    public string Greeting\n    {\n        get => _greeting;\n        set => this.RaiseAndSetIfChanged(ref _greeting,  value);\n    }\n\n    public void ButtonAction()\n    {\n        Greeting = "Another greeting from Avalonia";\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Then in the corresponding XAML define two controls:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'<TextBlock Text="{Binding Greeting}" />\n<Button Command="{Binding ButtonAction}" >Change It</Button>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This means that when the user clicks the button, ",(0,i.jsx)(n.em,{children:"Avalonia UI"})," updates the view model by calling the ",(0,i.jsx)(n.code,{children:"ButtonAction"})," method. This changes the ",(0,i.jsx)(n.code,{children:"Greeting"})," property using the setter, so in turn the new greeting text is notified back to the text control on the UI."]})]})}function l(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>a});var i=t(67294);const o={},c=i.createContext(o);function a(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);