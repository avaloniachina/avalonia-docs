"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[90785],{15984:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>r});var t=i(85893),o=i(11151);const a={description:"CONCEPTS"},s="The Main Window",c={id:"concepts/the-main-window",title:"The Main Window",description:"CONCEPTS",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/concepts/the-main-window.md",sourceDirName:"concepts",slug:"/concepts/the-main-window",permalink:"/avalonia-docs/ru/docs/concepts/the-main-window",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/current/concepts/the-main-window.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS"},sidebar:"documentationSidebar",previous:{title:"Keyboard and Hotkeys",permalink:"/avalonia-docs/ru/docs/concepts/input/hotkeys"},next:{title:"The MVVM Pattern",permalink:"/avalonia-docs/ru/docs/concepts/the-mvvm-pattern/"}},d={},r=[];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"the-main-window",children:"The Main Window"}),"\n",(0,t.jsxs)(n.p,{children:["The main window is the window passed to ",(0,t.jsx)(n.code,{children:"ApplicationLifetime.MainWindow"})," in the ",(0,t.jsx)(n.code,{children:"OnFrameworkInitializationCompleted"})," method of your ",(0,t.jsx)(n.code,{children:"App.axaml.cs"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public override void OnFrameworkInitializationCompleted()\n{\n    if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktopLifetime)\n    {\n        desktopLifetime.MainWindow = new MainWindow();\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["It can be retrieved at any time by casting ",(0,t.jsx)(n.code,{children:"Application.Current.ApplicationLifetime"})," to ",(0,t.jsx)(n.code,{children:"IClassicDesktopStyleApplicationLifetime"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Worth mentioning, developers should keep in mind, that using static globals and accessing MainWindow from any place of the app can be dangerous and sometimes cause bad UX. All top-level (window) related APIs should be used from the most specific top-level, usually, it's the latest active one. In this way, user dialogs won't be opened from the wrong window, for example."}),"\n",(0,t.jsx)(n.admonition,{type:"warning",children:(0,t.jsx)(n.p,{children:"Mobile and browser platforms don't have a concept of Window in Avalonia. Instead, you need to set MainView control in Application.ApplicationLifetime when it implements ISingleViewApplicationLifetime interface."})}),"\n",(0,t.jsx)(n.h3,{id:"",children:(0,t.jsx)("a",{href:"#show-hide-and-close-a-window",id:"show-hide-and-close-a-window"})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>s});var t=i(67294);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);