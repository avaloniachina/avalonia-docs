"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[45535],{7750:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var t=n(85893),o=n(11151);const a={description:"CONCEPTS"},l="Application Lifetimes",s={id:"concepts/application-lifetimes",title:"Application Lifetimes",description:"CONCEPTS",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/concepts/application-lifetimes.md",sourceDirName:"concepts",slug:"/concepts/application-lifetimes",permalink:"/avalonia-docs/ru/docs/concepts/application-lifetimes",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/current/concepts/application-lifetimes.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS"},sidebar:"documentationSidebar",previous:{title:"Deep Dives",permalink:"/avalonia-docs/ru/docs/concepts/"},next:{title:"Attached Properties",permalink:"/avalonia-docs/ru/docs/concepts/attached-property"}},r={},c=[{value:"How do lifetimes work?",id:"how-do-lifetimes-work",level:2},{value:"Lifetime Interfaces",id:"lifetime-interfaces",level:2},{value:"IControlledApplicationLifetime",id:"icontrolledapplicationlifetime",level:3},{value:"IClassicDesktopStyleApplicationLifetime",id:"iclassicdesktopstyleapplicationlifetime",level:3},{value:"ISingleViewApplicationLifetime",id:"isingleviewapplicationlifetime",level:3},{value:"Manual Lifetime Management",id:"manual-lifetime-management",level:2}];function d(e){const i={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"application-lifetimes",children:"Application Lifetimes"}),"\n",(0,t.jsxs)(i.p,{children:["Not all platforms are created equal! For example, the lifetime management that you may be used to developing with in Windows Forms or WPF can operate only on desktop-style platforms. ",(0,t.jsx)(i.em,{children:"Avalonia UI"})," is a cross-platform framework; so to make your application portable, it provides several different lifetime models for your application, and also allows you to control everything manually if the target platform permits."]}),"\n",(0,t.jsx)(i.h2,{id:"how-do-lifetimes-work",children:"How do lifetimes work?"}),"\n",(0,t.jsx)(i.p,{children:"For a desktop application, you initialise like this:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"class Program\n{\n  // This method is needed for IDE previewer infrastructure\n  public static AppBuilder BuildAvaloniaApp() \n    => AppBuilder.Configure<App>().UsePlatformDetect();\n\n  // The entry point. Things aren't ready yet, so at this point\n  // you shouldn't use any Avalonia types or anything that expects\n  // a SynchronizationContext to be ready\n  public static int Main(string[] args) \n    => BuildAvaloniaApp().StartWithClassicDesktopLifetime(args);\n}\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Then the main window is created in the ",(0,t.jsx)(i.code,{children:"Application"})," class:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"public override void OnFrameworkInitializationCompleted()\n{\n  if (ApplicationLifetime \n                  is IClassicDesktopStyleApplicationLifetime desktop)\n    desktop.MainWindow = new MainWindow();\n  else if (ApplicationLifetime \n                  is ISingleViewApplicationLifetime singleView)\n    singleView.MainView = new MainView();\n  base.OnFrameworkInitializationCompleted();\n}\n"})}),"\n",(0,t.jsxs)(i.p,{children:["This method is called when the framework has initilized and the ",(0,t.jsx)(i.code,{children:"ApplicationLifetime"})," property contains the chosen lifetime if any."]}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["If you run the application in design mode (this uses the IDE previewer process), then ",(0,t.jsx)(i.code,{children:"ApplicationLifetime"})," is null."]})}),"\n",(0,t.jsx)(i.h2,{id:"lifetime-interfaces",children:"Lifetime Interfaces"}),"\n",(0,t.jsxs)(i.p,{children:[(0,t.jsx)(i.em,{children:"Avalonia UI"})," provides a range of interfaces to allow you to choose a level of control that is suitable for your application. These are provided by the ",(0,t.jsx)(i.code,{children:"BuildAvaloniaApp().Start[Something]"})," family of methods."]}),"\n",(0,t.jsx)(i.h3,{id:"icontrolledapplicationlifetime",children:"IControlledApplicationLifetime"}),"\n",(0,t.jsx)(i.p,{children:"Provided by:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"StartWithClassicDesktopLifetime"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"StartLinuxFramebuffer"})}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Allows you to subscribe to ",(0,t.jsx)(i.code,{children:"Startup"})," and ",(0,t.jsx)(i.code,{children:"Exit"})," events and permits explicitly shutting down of the application by calling the ",(0,t.jsx)(i.code,{children:"Shutdown"})," method. This interface gives you control of the application's exit procedures."]}),"\n",(0,t.jsx)(i.h3,{id:"iclassicdesktopstyleapplicationlifetime",children:"IClassicDesktopStyleApplicationLifetime"}),"\n",(0,t.jsxs)(i.p,{children:["Inherits: ",(0,t.jsx)(i.code,{children:"IControlledApplicationLifetime"})]}),"\n",(0,t.jsx)(i.p,{children:"Provided by:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"StartWithClassicDesktopLifetime"})}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Allows you to control your application lifetime in the manner of a Windows Forms or WPF application. This interface provides a way to access the list of the currently opened windows, to set a main window, and has three shutdown modes:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"OnLastWindowClose"})," - shuts down the application when the last window is closed"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"OnMainWindowClose"})," - shuts down the application when the main window is closed (if it has been set)."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"OnExplicitShutdown"})," - disables automatic shutdown of the application, you need to call the ",(0,t.jsx)(i.code,{children:"Shutdown"})," method in your code."]}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"isingleviewapplicationlifetime",children:"ISingleViewApplicationLifetime"}),"\n",(0,t.jsx)(i.p,{children:"Provided by:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.code,{children:"StartLinuxFramebuffer"})}),"\n",(0,t.jsx)(i.li,{children:"mobile platforms"}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["Some platforms do not have a concept of a desktop main window and only allow one view on the device's screen at a time. For these platforms the lifetime allows you to set and change the main view class (",(0,t.jsx)(i.code,{children:"MainView"}),") instead."]}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsxs)(i.p,{children:["To implement the navigation stack on platforms like this (with a single main view), you can use ",(0,t.jsxs)(i.a,{href:"https://www.reactiveui.net/docs/handbook/routing/",children:[(0,t.jsx)(i.em,{children:"ReactiveUI"})," routing"]})," or another routing control."]})}),"\n",(0,t.jsx)(i.h2,{id:"manual-lifetime-management",children:"Manual Lifetime Management"}),"\n",(0,t.jsxs)(i.p,{children:["If you need to, you can take full control of your application's lifetime management. For example on a desktop platform you can pass a delegate to ",(0,t.jsx)(i.code,{children:"AppMain"})," to the ",(0,t.jsx)(i.code,{children:"BuildAvaloniaApp.Start"})," method, and then manage things manually from there:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"class Program\n{\n  // This method is needed for IDE previewer infrastructure\n  public static AppBuilder BuildAvaloniaApp() \n    => AppBuilder.Configure<App>().UsePlatformDetect();\n\n  // The entry point. Things aren't ready yet, so at this point\n  // you shouldn't use any Avalonia types or anything that expects\n  // a SynchronizationContext to be ready\n  public static int Main(string[] args) \n    => BuildAvaloniaApp().Start(AppMain, args);\n\n  // Application entry point. Avalonia is completely initialized.\n  static void AppMain(Application app, string[] args)\n  {\n     // A cancellation token source that will be \n     // used to stop the main loop\n     var cts = new CancellationTokenSource();\n     \n     // Do you startup code here\n     new Window().Show();\n\n     // Start the main loop\n     app.Run(cts.Token);\n  }\n}\n"})})]})}function p(e={}){const{wrapper:i}={...(0,o.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,i,n)=>{n.d(i,{Z:()=>s,a:()=>l});var t=n(67294);const o={},a=t.createContext(o);function l(e){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);