"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[34432],{53499:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var o=t(85893),i=t(11151);const a={id:"macos-development",title:"macOS Development"},s="macOS Development",r={id:"guides/platforms/macos-development",title:"macOS Development",description:"Getting started developing for the macOS",source:"@site/i18n/ru/docusaurus-plugin-content-docs/current/guides/platforms/macos-development.md",sourceDirName:"guides/platforms",slug:"/guides/platforms/macos-development",permalink:"/avalonia-docs/ru/docs/guides/platforms/macos-development",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/current/guides/platforms/macos-development.md",tags:[],version:"current",frontMatter:{id:"macos-development",title:"macOS Development"},sidebar:"documentationSidebar",previous:{title:"Web Assembly",permalink:"/avalonia-docs/ru/docs/guides/platforms/how-to-use-web-assembly"},next:{title:"Deep Dives",permalink:"/avalonia-docs/ru/docs/concepts/"}},l={},c=[{value:"Native code",id:"native-code",level:2},{value:"Bundling Dev Code",id:"bundling-dev-code",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"macos-development",children:"macOS Development"}),"\n",(0,o.jsx)(n.p,{children:"Getting started developing for the macOS"}),"\n",(0,o.jsx)(n.h2,{id:"native-code",children:"Native code"}),"\n",(0,o.jsxs)(n.p,{children:["The native macOS code is located at ",(0,o.jsx)(n.code,{children:"native/Avalonia.Native/src/OSX"}),". Open the ",(0,o.jsx)(n.code,{children:"Avalonia.Native.OSX.xcodeproj"})," project in Xcode."]}),"\n",(0,o.jsx)(n.p,{children:"You can make changes in Xcode and compile using Cmd+B. You will then need to point your Avalonia application to the modified dynlib. The path can be found by clicking on the dylib in Xcode\u2019s project navigator under Products."}),"\n",(0,o.jsx)(n.p,{children:"You then specify this path in your AppBuilder using:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:".With(new AvaloniaNativePlatformOptions\n{ \n    AvaloniaNativeLibraryPath = \u201c[Path to your dylib]\u201d, \n})\n"})}),"\n",(0,o.jsx)(n.p,{children:"If you're running on an Apple Silicon Mac and targeting .NET 5 and lower then you'll need to switch to rosetta by selecting \"My Mac (Rosetta)\" in the toolbar."}),"\n",(0,o.jsx)(n.h3,{id:"bundling-dev-code",children:"Bundling Dev Code"}),"\n",(0,o.jsx)(n.p,{children:"In certain situations you need to run an Avalonia sample application as an app bundle. One of these situations is testing macOS Accessibility - Xcode's Accessibility Inspector fails to recognise the application otherwise."}),"\n",(0,o.jsxs)(n.p,{children:["A solution to this is to change the sample's output path to ",(0,o.jsx)(n.a,{href:"https://developer.apple.com/library/archive/documentation/CoreFoundation/Conceptual/CFBundles/BundleTypes/BundleTypes.html",children:"resemble an app bundle"}),". You can do this by modifying the output path in the csproj, e.g.:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<OutputPath>bin\\$(Configuration)\\$(Platform)\\ControlCatalog.NetCore.app/Contents/MacOS</OutputPath>\n<AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>\n<UseAppHost>true</UseAppHost>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["And in the ",(0,o.jsx)(n.code,{children:"Contents"})," output directory place a valid ",(0,o.jsx)(n.code,{children:"Info.plist"})," file. An example for ControlCatalog.NetCore is:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8"?>\n<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">\n<plist version="1.0">\n  <dict>\n    <key>CFBundleName</key>\n    <string>ControlCatalog.NetCore</string>\n    <key>CFBundleDisplayName</key>\n    <string>ControlCatalog.NetCore</string>\n    <key>CFBundleIdentifier</key>\n    <string>ControlCatalog.NetCore</string>\n    <key>CFBundleVersion</key>\n    <string>0.10.999</string>\n    <key>CFBundlePackageType</key>\n    <string>AAPL</string>\n    <key>CFBundleSignature</key>\n    <string>????</string>\n    <key>CFBundleExecutable</key>\n    <string>ControlCatalog.NetCore</string>\n    <key>CFBundleIconFile</key>\n    <string>ControlCatalog.NetCore.icns</string>\n    <key>CFBundleShortVersionString</key>\n    <string>0.1</string>\n    <key>NSPrincipalClass</key>\n    <string>NSApplication</string>\n    <key>NSHighResolutionCapable</key>\n    <true />\n  </dict>\n</plist>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If you're using Rider < 2021.1 then you'll need to run the application from the command line, not the IDE (see ",(0,o.jsx)(n.a,{href:"https://youtrack.jetbrains.com/issue/RIDER-53892",children:"https://youtrack.jetbrains.com/issue/RIDER-53892"}),")."]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var o=t(67294);const i={},a=o.createContext(i);function s(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);