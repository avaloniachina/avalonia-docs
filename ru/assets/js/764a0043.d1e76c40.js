"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[19633],{96289:(e,i,o)=>{o.r(i),o.d(i,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>r});var t=o(85893),n=o(11151);const a={id:"creating-a-model-and-viewmodel",title:"Creating a Model & ViewModel"},s=void 0,d={id:"tutorials/todo-list-app/creating-a-model-and-viewmodel",title:"Creating a Model & ViewModel",description:"Now that we've got a basic view on-screen let's think about how we could display real data from a database or similar in it. The most obvious, and traditional way to do this would be to load the data in the view's constructor and create a CheckBox for each TODO item in code. However doing it this way has a few disadvantages:",source:"@site/i18n/ru/docusaurus-plugin-content-docs/version-0.10.x/tutorials/todo-list-app/creating-a-model-and-viewmodel.md",sourceDirName:"tutorials/todo-list-app",slug:"/tutorials/todo-list-app/creating-a-model-and-viewmodel",permalink:"/avalonia-docs/ru/docs/0.10.x/tutorials/todo-list-app/creating-a-model-and-viewmodel",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/version-0.10.x/tutorials/todo-list-app/creating-a-model-and-viewmodel.md",tags:[],version:"0.10.x",frontMatter:{id:"creating-a-model-and-viewmodel",title:"Creating a Model & ViewModel"},sidebar:"documentationSidebar",previous:{title:"Creating a View",permalink:"/avalonia-docs/ru/docs/0.10.x/tutorials/todo-list-app/creating-a-view"},next:{title:"Wiring up the Views",permalink:"/avalonia-docs/ru/docs/0.10.x/tutorials/todo-list-app/wiring-up-the-views"}},l={},r=[{value:"Create the Model",id:"create-the-model",level:3},{value:"Create a (fake) database",id:"create-a-fake-database",level:3},{value:"Create a View Model",id:"create-a-view-model",level:3},{value:"Create an instance of TodoListViewModel",id:"create-an-instance-of-todolistviewmodel",level:3}];function c(e){const i={a:"a",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:["Now that we've got a basic view on-screen let's think about how we could display real data from a database or similar in it. The most obvious, and traditional way to do this would be to load the data in the view's constructor and create a ",(0,t.jsx)(i.code,{children:"CheckBox"})," for each TODO item in code. However doing it this way has a few disadvantages:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"We can't use XAML"}),"\n",(0,t.jsx)(i.li,{children:"We have to write code to react to changes in the data and update the display"}),"\n",(0,t.jsx)(i.li,{children:"It's not unit-testable"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"These considerations may not seem important for a small application, but as your application grows they become bigger and bigger problems: particularly the testability part."}),"\n",(0,t.jsx)(i.p,{children:"There is a better way! We mentioned the MVVM pattern at the beginning of this tutorial and it's that pattern that we're going to use now."}),"\n",(0,t.jsx)(i.h3,{id:"create-the-model",children:"Create the Model"}),"\n",(0,t.jsx)(i.p,{children:"The first thing to do is to create the model which will represent our data as it would be stored in a database. Our model is going to be pretty simple: each TODO item will consist of a textual description and a boolean value representing whether the item is checked."}),"\n",(0,t.jsxs)(i.p,{children:["Place the following class in the ",(0,t.jsx)(i.code,{children:"Models"})," directory in your project:"]}),"\n",(0,t.jsx)(i.p,{children:"Models/TodoItem.cs"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"namespace Todo.Models\n{\n    public class TodoItem\n    {\n        public string Description { get; set; }\n        public bool IsChecked { get; set; }\n    }\n}\n"})}),"\n",(0,t.jsx)(i.h3,{id:"create-a-fake-database",children:"Create a (fake) database"}),"\n",(0,t.jsxs)(i.p,{children:["We could use something like ",(0,t.jsx)(i.a,{href:"https://docs.microsoft.com/en-us/ef/core/get-started/netcore/new-db-sqlite",children:"Entity Framework"})," to read this data from an SQLite database but because this is a tutorial on Avalonia not Entity Framework, we're not actually going to be using a database. Instead we'll just populate our models from an array."]}),"\n",(0,t.jsxs)(i.p,{children:["We'll do this in a service called ",(0,t.jsx)(i.code,{children:"Database"})," and put this in a ",(0,t.jsx)(i.code,{children:"Services"})," directory:"]}),"\n",(0,t.jsx)(i.p,{children:"Services/Database.cs"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:'using System.Collections.Generic;\nusing Todo.Models;\n\nnamespace Todo.Services\n{\n    public class Database\n    {\n        public IEnumerable<TodoItem> GetItems() => new[]\n        {\n            new TodoItem { Description = "Walk the dog" },\n            new TodoItem { Description = "Buy some milk" },\n            new TodoItem { Description = "Learn Avalonia", IsChecked = true },\n        };\n    }\n}\n'})}),"\n",(0,t.jsx)(i.h3,{id:"create-a-view-model",children:"Create a View Model"}),"\n",(0,t.jsx)(i.p,{children:"Now we're going to need a view model which represents the list. This is the class that will provide the data for our view."}),"\n",(0,t.jsxs)(i.p,{children:["We have already created the view and called it ",(0,t.jsx)(i.code,{children:"TodoListView"})," and so the associated view model is going to be called ",(0,t.jsx)(i.code,{children:"TodoListViewModel"}),". Place this class in the ",(0,t.jsx)(i.code,{children:"ViewModels"})," directory in your project:"]}),"\n",(0,t.jsx)(i.p,{children:"ViewModels/TodoListViewModel.cs"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"using System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing Todo.Models;\n\nnamespace Todo.ViewModels\n{\n    public class TodoListViewModel : ViewModelBase\n    {\n        public TodoListViewModel(IEnumerable<TodoItem> items)\n        {\n            Items = new ObservableCollection<TodoItem>(items);\n        }\n\n        public ObservableCollection<TodoItem> Items { get; }\n    }\n}\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Again, our view model is very simple at this stage. It simply takes a collection of ",(0,t.jsx)(i.code,{children:"TodoItem"})," models in its constructor and puts them into an ",(0,t.jsx)(i.code,{children:"ObservableCollection"})," which is exposed via an ",(0,t.jsx)(i.code,{children:"Items"})," property."]}),"\n",(0,t.jsxs)(i.p,{children:["One thing to notice is the use of the ",(0,t.jsx)(i.code,{children:"ViewModelBase"})," class. The importance of this will become clear shortly."]}),"\n",(0,t.jsx)(i.h3,{id:"create-an-instance-of-todolistviewmodel",children:"Create an instance of TodoListViewModel"}),"\n",(0,t.jsxs)(i.p,{children:["We've seen that our ",(0,t.jsx)(i.code,{children:"TodoListViewModel"})," requires a collection of ",(0,t.jsx)(i.code,{children:"TodoItem"})," models to be passed to its constructor, but where do these items come from? Where is ",(0,t.jsx)(i.code,{children:"TodoListViewModel"})," created?"]}),"\n",(0,t.jsx)(i.p,{children:"Well, we now have two views and two view models:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"MainWindow"})," (created by the template)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"MainWindowViewModel"})," (created by the template)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"TodoListView"})," (created by us)"]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"TodoListViewModel"})," (created by us)"]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["If you think back to when we created the views, you'll remember that our views have a parent-child relationship (",(0,t.jsx)(i.code,{children:"TodoListView"})," is a child of ",(0,t.jsx)(i.code,{children:"MainWindow"}),"). This might give us a clue: ",(0,t.jsx)(i.code,{children:"MainWindowViewModel"})," should create the ",(0,t.jsx)(i.code,{children:"TodoListViewModel"}),"!"]}),"\n",(0,t.jsxs)(i.p,{children:["Edit the ",(0,t.jsx)(i.code,{children:"MainWindowViewModel.cs"})," file to look like this:"]}),"\n",(0,t.jsx)(i.p,{children:"MainWindowViewModel.cs"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"using Todo.Services;\n\nnamespace Todo.ViewModels\n{\n    class MainWindowViewModel : ViewModelBase\n    {\n        public MainWindowViewModel(Database db)\n        {\n            List = new TodoListViewModel(db.GetItems());\n        }\n\n        public TodoListViewModel List { get; }\n    }\n}\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Finally, edit the ",(0,t.jsx)(i.code,{children:"OnFrameworkInitializationCompleted"})," method in ",(0,t.jsx)(i.code,{children:"App.axaml.cs"})," to create an instance of ",(0,t.jsx)(i.code,{children:"Database"})," and pass it to ",(0,t.jsx)(i.code,{children:"MainWindowViewModel"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"public override void OnFrameworkInitializationCompleted()\n{\n    base.OnFrameworkInitializationCompleted();\n\n    if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)\n    {\n        var db = new Database();\n\n        desktop.MainWindow = new MainWindow\n        {\n            DataContext = new MainWindowViewModel(db),\n        };\n    }\n}\n"})}),"\n",(0,t.jsx)(i.p,{children:"Next we're going to wire up the views to read from our view models..."})]})}function h(e={}){const{wrapper:i}={...(0,n.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,i,o)=>{o.d(i,{Z:()=>d,a:()=>s});var t=o(67294);const n={},a=t.createContext(n);function s(e){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);