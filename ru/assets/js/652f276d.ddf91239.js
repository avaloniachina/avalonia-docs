"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[66266],{1638:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var i=o(85893),t=o(11151);const r={info:"grid",title:"Grid"},s=void 0,a={id:"wpf-developer-tips/grid",title:"Grid",description:"Column and row definitions can be specified in Avalonia using strings, avoiding the clunky syntax in WPF:",source:"@site/i18n/ru/docusaurus-plugin-content-docs/version-0.10.x/wpf-developer-tips/grid.md",sourceDirName:"wpf-developer-tips",slug:"/wpf-developer-tips/grid",permalink:"/avalonia-docs/ru/docs/0.10.x/wpf-developer-tips/grid",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/ru/docusaurus-plugin-content-docs/version-0.10.x/wpf-developer-tips/grid.md",tags:[],version:"0.10.x",frontMatter:{info:"grid",title:"Grid"},sidebar:"documentationSidebar",previous:{title:"DependencyProperty",permalink:"/avalonia-docs/ru/docs/0.10.x/wpf-developer-tips/dependencyproperty"},next:{title:"ItemsControl",permalink:"/avalonia-docs/ru/docs/0.10.x/wpf-developer-tips/itemscontrol"}},d={},c=[];function p(e){const n={code:"code",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Column and row definitions can be specified in Avalonia using strings, avoiding the clunky syntax in WPF:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'<Grid ColumnDefinitions="Auto,*,32" RowDefinitions="*,Auto">\n'})}),"\n",(0,i.jsxs)(n.p,{children:["A common use of ",(0,i.jsx)(n.code,{children:"Grid"})," in WPF is to stack two controls on top of each other. For this purpose in Avalonia you can just use a ",(0,i.jsx)(n.code,{children:"Panel"})," which is more lightweight than ",(0,i.jsx)(n.code,{children:"Grid"}),"."]})]})}function l(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>a,a:()=>s});var i=o(67294);const t={},r=i.createContext(t);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);