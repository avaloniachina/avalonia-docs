"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[92006],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=o,f=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return n?a.createElement(f,r(r({ref:t},c),{},{components:n})):a.createElement(f,r({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},66059:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const i={description:"CONCEPTS - Data Templates"},r="Reusing Data Templates",l={unversionedId:"concepts/templates/reusing-data-templates",id:"concepts/templates/reusing-data-templates",title:"Reusing Data Templates",description:"CONCEPTS - Data Templates",source:"@site/docs/concepts/templates/reusing-data-templates.md",sourceDirName:"concepts/templates",slug:"/concepts/templates/reusing-data-templates",permalink:"/avalonia-docs/docs/next/concepts/templates/reusing-data-templates",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/templates/reusing-data-templates.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS - Data Templates"},sidebar:"documentationSidebar",previous:{title:"Data Templates Collection",permalink:"/avalonia-docs/docs/next/concepts/templates/data-templates-collection"},next:{title:"Creating in Code",permalink:"/avalonia-docs/docs/next/concepts/templates/creating-data-templates-in-code"}},p={},s=[],c={toc:s},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"reusing-data-templates"},"Reusing Data Templates"),(0,o.kt)("p",null,"If you define a data template in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Window.DataTemplates"),"collection (as on the previous page), you can reuse it anywhere in the window. However, you can also extend the reuse of a data template to any window in your application."," "),(0,o.kt)("p",null,"This works because ",(0,o.kt)("em",{parentName:"p"},"Avalonia UI")," performs a hierarchical search of its logical tree to choose a data template. At its most extensive, the search starts in a control, extends to any parent controls (recursively), then looks in the window (as on the previous page), and finally looks at the application itself for a data templates collection."," "),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"From more information on the logical tree concept in ",(0,o.kt)("em",{parentName:"p"},"Avalonia UI")," , see ",(0,o.kt)("a",{parentName:"p",href:"/avalonia-docs/docs/next/concepts/ui-composition"},"here"),".")),(0,o.kt)("p",null,"Therefore if you want to reuse a template in any window of your application: define templates in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Application.DataTemplates")," collection, located in the app.axaml file."),(0,o.kt)("p",null,"To see how this works, first add another view model as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace MySample\n{\n    public class Teacher\n    {\n        public string Name { get; set; } = String.Empty;\n        public string Subject { get; set; } = String.Empty;\n    }\n}\n")),(0,o.kt)("p",null,"And in the app.axaml file, add a data template for the type ",(0,o.kt)("inlineCode",{parentName:"p"},"Teacher"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<Application xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:vm="using:MySample"\n             x:Class="MySample.App"\n             RequestedThemeVariant="Light">\n    <Application.Styles>\n        <FluentTheme />\n    </Application.Styles>\n\n  <Application.DataTemplates>\n    <DataTemplate DataType="{x:Type vm:Teacher}">\n      <Grid ColumnDefinitions="Auto,Auto" RowDefinitions="Auto,Auto">\n        <TextBlock Grid.Row="0" Grid.Column="0">Name:</TextBlock>\n        <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding Name}"/>\n        <TextBlock Grid.Row="1" Grid.Column="0">Subject:</TextBlock>\n        <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding Subject}"/>\n      </Grid>\n    </DataTemplate>\n  </Application.DataTemplates>\n</Application>\n')),(0,o.kt)("p",null,"Use a local definition of a teacher in the window content zone:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n        xmlns:local="using:MySample"\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"\n        x:Class="MySample.MainWindow"\n        Title="MySample">\n  <Window.DataTemplates>\n    <DataTemplate DataType="{x:Type local:Student}">\n      <Grid ColumnDefinitions="Auto,Auto" RowDefinitions="Auto,Auto">\n        <TextBlock Grid.Row="0" Grid.Column="0">First Name:</TextBlock>\n        <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding FirstName}"/>\n        <TextBlock Grid.Row="1" Grid.Column="0">Last Name:</TextBlock>\n        <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding LastName}"/>\n      </Grid>\n    </DataTemplate>\n  </Window.DataTemplates>\n  \n  <local:Teacher Name="Dr Jones" Subject="Maths"/>\n</Window>\n')),(0,o.kt)("p",null,"Although there is no data template for a teacher in the window; Avalonia UI will find the template you defined in the application, and the display works as planned:"," "),(0,o.kt)("img",{src:"/img/gitbook-import/assets/image (50).png",alt:""}),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Remember to specify a ",(0,o.kt)("inlineCode",{parentName:"p"},"DataType")," in every data template, wherever it is defined, because if ",(0,o.kt)("em",{parentName:"p"},"Avalonia UI")," fails to find a data template match for your data; then nothing will be displayed!")),(0,o.kt)("blockquote",null))}d.isMDXComponent=!0}}]);