"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[58488],{29285:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=s(85893),n=s(11151);const i={id:"add-data-persistence",title:"Add Data Persistence"},o=void 0,r={id:"tutorials/music-store-app/add-data-persistence",title:"Add Data Persistence",description:"Persisting Music Collection",source:"@site/versioned_docs/version-0.10.x/tutorials/music-store-app/add-data-persistence.md",sourceDirName:"tutorials/music-store-app",slug:"/tutorials/music-store-app/add-data-persistence",permalink:"/avalonia-docs/docs/0.10.x/tutorials/music-store-app/add-data-persistence",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/tutorials/music-store-app/add-data-persistence.md",tags:[],version:"0.10.x",frontMatter:{id:"add-data-persistence",title:"Add Data Persistence"},sidebar:"documentationSidebar",previous:{title:"Add Items to User Collection",permalink:"/avalonia-docs/docs/0.10.x/tutorials/music-store-app/add-items-to-users-collection"},next:{title:"Load data at Startup",permalink:"/avalonia-docs/docs/0.10.x/tutorials/music-store-app/load-data-at-startup"}},c={},d=[{value:"Persisting Music Collection",id:"persisting-music-collection",level:2}];function l(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"persisting-music-collection",children:"Persisting Music Collection"}),"\n",(0,a.jsxs)(t.p,{children:["Persistence is the job of the business logic (",(0,a.jsx)(t.code,{children:"model"}),") code. However here we will see it's very simple to wire this up to the UI."]}),"\n",(0,a.jsxs)(t.p,{children:["Add the following method to ",(0,a.jsx)(t.code,{children:"AlbumViewModel"})," this will call our backend logic to save the Album to the users collection. The backend also provides a way to cache the album bitmap. It provides us a stream we can save our bitmap to."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"public async Task SaveToDiskAsync()\n{\n    await _album.SaveAsync();\n\n    if (Cover != null)\n    {\n        var bitmap = Cover;\n\n        await Task.Run(() =>\n        {\n            using (var fs = _album.SaveCoverBitmapStream())\n            {\n                bitmap.Save(fs);\n            }\n        });\n    }\n}\n"})}),"\n",(0,a.jsxs)(t.p,{children:["Now we can simply call this method when our dialog returns its result in ",(0,a.jsx)(t.code,{children:"MainWindowViewModel.cs"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:"BuyMusicCommand = ReactiveCommand.CreateFromTask(async () =>\n{\n    var store = new MusicStoreViewModel();\n\n    var result = await ShowDialog.Handle(store);\n\n    if (result != null)\n    {\n        Albums.Add(result);\n\n        await result.SaveToDiskAsync();\n    }\n});\n"})})]})}function u(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>r,a:()=>o});var a=s(67294);const n={},i=a.createContext(n);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);