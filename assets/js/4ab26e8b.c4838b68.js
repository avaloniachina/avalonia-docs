"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[85822],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=a,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||o;return n?r.createElement(k,i(i({ref:t},d),{},{components:n})):r.createElement(k,i({ref:t},d))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79055:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const o={info:"index",title:"WPF Developer Tips"},i=void 0,l={unversionedId:"wpf-developer-tips/index",id:"version-0.10.x/wpf-developer-tips/index",title:"WPF Developer Tips",description:"Avalonia is in general very similar to WPF, but you will find differences. Here are the most common:",source:"@site/versioned_docs/version-0.10.x/wpf-developer-tips/index.md",sourceDirName:"wpf-developer-tips",slug:"/wpf-developer-tips/",permalink:"/avalonia-docs/docs/wpf-developer-tips/",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/wpf-developer-tips/index.md",tags:[],version:"0.10.x",frontMatter:{info:"index",title:"WPF Developer Tips"},sidebar:"documentationSidebar",previous:{title:"Build and Run your Application on your iPhone or iPad",permalink:"/avalonia-docs/docs/tutorials/developing-for-mobile/ios/build-and-run-your-application-on-your-iphone-or-ipad"},next:{title:"Styling",permalink:"/avalonia-docs/docs/wpf-developer-tips/styling"}},p={},s=[],d={toc:s},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Avalonia is in general very similar to WPF, but you will find differences. Here are the most common:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"styling"},"Styling")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"datatemplates"},"DataTemplates")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"hierachicaldatatemplate"},"HierachicalDataTemplate.md")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"uielement-frameworkelement-and-control"},"UIElement, FrameworkElement and Control\n")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"dependencyproperty"},"DependencyProperty")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"grid"},"Grid")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"itemscontrol"},"ItemsControl")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"tunnelling-events"},"Tunnelling Events")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"class-handlers"},"Class Handlers")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"propertychangedcallback"},"PropertyChangedCallback")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"rendertransforms-and-rendertransformorigin"},"RenderTransforms & RenderTransformorigin"))),(0,a.kt)("h1",{id:"dispatcher-changes"},"Dispatcher changes"),(0,a.kt)("p",null,"If you use ",(0,a.kt)("inlineCode",{parentName:"p"},"Application.Current.Dispatcher"),", you should use ",(0,a.kt)("inlineCode",{parentName:"p"},"Dispatcher.UIThread")," instead which provide similar facilities."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WPF")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Application.Current.Dispatcher.InvokeAsync(handler, DispatcherPriority.Background);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Avalonia")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Dispatcher.UIThread.InvokeAsync(handler, DispatcherPriority.Background);\n")),(0,a.kt)("p",null,"If you previously access dispatcher on the control itself, you should use global static instance ",(0,a.kt)("inlineCode",{parentName:"p"},"Dispatcher.UIThread")," too."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WPF")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"this.Dispatcher.InvokeAsync(handler, DispatcherPriority.Background);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Avalonia")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Dispatcher.UIThread.InvokeAsync(handler, DispatcherPriority.Background);\n")),(0,a.kt)("p",null,"In more details, it's explained in the ",(0,a.kt)("a",{parentName:"p",href:"/avalonia-docs/docs/guides/basics/accessing-the-ui-thread"},"Accessing the UI thread")," article."),(0,a.kt)("h1",{id:"visibility-of-elements"},"Visibility of elements"),(0,a.kt)("p",null,"WPF has uses ",(0,a.kt)("inlineCode",{parentName:"p"},"Visibility")," property which can be ",(0,a.kt)("inlineCode",{parentName:"p"},"Collapsed"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Hidden")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Visible"),". Avalonia uses simpler and more intuitive model ",(0,a.kt)("inlineCode",{parentName:"p"},"bool IsVisible"),"."),(0,a.kt)("h1",{id:"binding"},"Binding"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WPF")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<TextBox Name="MyTextbox" Text="{Binding ElementName=searchTextBox, Path=Text}"" />\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Avalonia")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'<TextBox Name="MyTextbox" Text="{Binding #searchTextBox.Text}" />\n')),(0,a.kt)("h1",{id:"handling-attachment-to-visual-tree"},"Handling attachment to visual tree"),(0,a.kt)("p",null,"There no events like ",(0,a.kt)("inlineCode",{parentName:"p"},"Loaded"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"Unloaded")," in Avalonia, but you can override ",(0,a.kt)("inlineCode",{parentName:"p"},"OnAttachedToVisualTree"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"OnDetachedFromVisualTree")," on the control, to know when control attached to virtual tree, or detatched from it. Alternatively you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"TemplateApplied")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"Loaded")," event."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WPF")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Unloaded += OnControl_Unloaded;\nLoaded += OnControl_Loaded;\n\nprivate void OnControl_Loaded(object sender, RoutedEventArgs e)\n{\n    // Handle control loaded event.\n}\n\nprivate void OnControl_Unloaded(object sender, RoutedEventArgs e)\n{\n    // Handle control unload event.\n}\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Avalonia")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"TemplateApplied += OnControl_Loaded;\nprivate void OnControl_Loaded(object sender, RoutedEventArgs e)\n{\n\n}\n// or\nprotected override void OnAttachedToVisualTree(VisualTreeAttachmentEventArgs e)\n{\n    // Handle control loaded event.\n}\n\n// Use this instead of Unloaded event.\nprotected override void OnDetachedFromVisualTree(VisualTreeAttachmentEventArgs e)\n{\n    // Handle control unload event.\n}\n")),(0,a.kt)("p",null,"That mean that you cannot subscribe to tree attachment/detachment events for other controls."),(0,a.kt)("h1",{id:"tooltips"},"Tooltips"),(0,a.kt)("p",null,"Avalonia controls does not have ",(0,a.kt)("inlineCode",{parentName:"p"},"ToolTip")," property like WPF. Instead you should use ",(0,a.kt)("inlineCode",{parentName:"p"},"ToolTip.Tip")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WPF")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'<Button ToolTip="Save file as..." />\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Avalonia")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'<Button ToolTip.Tip="Save file as..." />\n')),(0,a.kt)("h1",{id:"textrun-decorations"},"TextRun decorations"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"WPF")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"TextRunProperties.SetTextDecorations(TextDecorations.Underline);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Avalonia")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"TextRunProperties.Underline = true;\n")))}u.isMDXComponent=!0}}]);