"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[6948],{69426:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>r});var o=t(85893),s=t(11151);const i={description:"TUTORIALS - To Do List App"},a="Inspect the XAML",l={id:"tutorials/todo-list-app/inspect-the-xaml",title:"Inspect the XAML",description:"TUTORIALS - To Do List App",source:"@site/docs/tutorials/todo-list-app/inspect-the-xaml.md",sourceDirName:"tutorials/todo-list-app",slug:"/tutorials/todo-list-app/inspect-the-xaml",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/inspect-the-xaml",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/tutorials/todo-list-app/inspect-the-xaml.md",tags:[],version:"current",frontMatter:{description:"TUTORIALS - To Do List App"},sidebar:"documentationSidebar",previous:{title:"Create a New View",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/creating-a-view"},next:{title:"Main Window Content",permalink:"/avalonia-docs/docs/tutorials/todo-list-app/main-window-content"}},c={},r=[{value:"Control Content",id:"control-content",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"inspect-the-xaml",children:"Inspect the XAML"}),"\n",(0,o.jsx)(n.p,{children:"This is a good time for you to take a look at the code generated by the view template."}),"\n",(0,o.jsx)(n.p,{children:"Start with the root element, its declarations of namespaces and settings:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:' <UserControl \n    xmlns="https://github.com/avaloniaui"\n    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n    mc:Ignorable="d" d:DesignWidth="250" d:DesignHeight="450"\n    x:Class="ToDoList.Views.ToDoListView">\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The root element in the XAML file starts ",(0,o.jsx)(n.code,{children:"<UserControl"})," and this is followed by a number of XML  ",(0,o.jsx)(n.code,{children:"xmlns"})," namespace declarations common to ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," controls.  The most important declaration to note is the first one:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<UserControl xmlns="https://github.com/avaloniaui" ... >\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This declares that the XAML in the file contains ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," XAML."]}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["Without this entry nothing will work in your ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," project!"]})}),"\n",(0,o.jsxs)(n.p,{children:["The next namespace is ",(0,o.jsx)(n.code,{children:'xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"'})," and this is used to import Microsoft XAML language features that are used by ",(0,o.jsx)(n.em,{children:"Avalonia UI"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["For more information see the Microsoft documentation ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/desktop/xaml-services/namespace-language-features",children:"here"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["The remaining two namespaces are used to communicate information to the ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," designer (code and preview panes)."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<UserControl ...\n     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" ... > \n'})}),"\n",(0,o.jsx)(n.p,{children:"For example, as you have already done, you can specify the width and height of the control as it is displayed in the designer preview pane:"}),"\n",(0,o.jsx)("pre",{class:"language-xml",children:(0,o.jsxs)("code",{class:"lang-xml",children:["<UserControl ...\n",(0,o.jsxs)("strong",{children:["mc",":Ignorable",'="d" d',":DesignWidth",'="250" d',":DesignHeight",'="450" ... >']})]})}),"\n",(0,o.jsxs)(n.p,{children:["The entry ",(0,o.jsx)(n.code,{children:'mc:Ignorable="d"'})," tells the ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," XAML engine that entries beginning with ",(0,o.jsx)(n.code,{children:"d:"})," can be ignored at runtime."]}),"\n",(0,o.jsx)(n.p,{children:"The last line links the XAML file with its code-behind class. Note that the fully-qualified class name has to be used here."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markup",children:'<UserControl ...\n   x:Class="ToDoList.Views.ToDoListView">\n'})}),"\n",(0,o.jsx)(n.h2,{id:"control-content",children:"Control Content"}),"\n",(0,o.jsx)(n.p,{children:"The content zone of the user control is occupied by a dock panel:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<DockPanel>\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["To review the concept of layout zones, see ",(0,o.jsx)(n.a,{href:"../../concepts/layout/layout-zones",children:"here"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["A user control can only contain a single child control in its content zone; so you will often need to start a layout with one of the ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," panel controls, as these allow you to contain multiple child controls in the space instead."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["You can browse the full range of ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," panel controls in the reference section  ",(0,o.jsx)(n.a,{href:"/avalonia-docs/docs/reference/controls/panel",children:"here"}),"."]})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, you are using the dock panel ",(0,o.jsx)(n.code,{children:"<DockPanel>"})," control. This is a type of panel which lays out its child controls along the edges of its content zone. Each child control can specify which edge: top, bottom, left or right. This is done using the ",(0,o.jsx)(n.code,{children:"DockPanel.Dock"})," attribute. For example, this XAML aligns a button at the bottom of the view; and it is stretched to fit the width, with its text centered."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Button DockPanel.Dock="Bottom"\n    HorizontalAlignment="Stretch"\n    HorizontalContentAlignment="Center">Add Item</Button>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In a dock panel there must be a single control filling the remaining space in its content zone (wherever that is located); or it will not display correctly. This filling control must have no ",(0,o.jsx)(n.code,{children:"DockPanel.Dock"})," attribute. The tutorial uses a stack panel to fill the remainng space:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<StackPanel>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The stack panel lays out its child controls in a stack, which is vertical by default. (You can make the stack horizontal by setting the ",(0,o.jsx)(n.code,{children:"Orientation"})," attribute.) You will often use the stack panel in your ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," layouts."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["To more detail about the stack panel, see the reference ",(0,o.jsx)(n.a,{href:"/avalonia-docs/docs/reference/controls/stackpanel",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"The remaining XAML adds the hard-coded to do list items as check boxes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markup",children:'<CheckBox Margin="4">Walk the dog</CheckBox>\n<CheckBox Margin="4">Buy some milk</CheckBox>\n'})}),"\n",(0,o.jsx)(n.p,{children:"Notice that these controls have the margin attribute set. This will separate them a little visually."}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The margin is one of the ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," control layout zones. To review the concept of layout zones, see ",(0,o.jsx)(n.a,{href:"../../concepts/layout/layout-zones",children:"here"}),"."]})}),"\n",(0,o.jsx)(n.p,{children:"On the next page, you will learn how to display the view created here in the main window of the app."})]})}function d(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var o=t(67294);const s={},i=o.createContext(s);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);