"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[47972],{63768:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"0.10.x","label":"0.10.x","banner":null,"badge":true,"noIndex":false,"className":"docs-version-0.10.x","isLast":true,"docsSidebars":{"documentationSidebar":[{"type":"link","label":"Welcome","href":"/avalonia-docs/docs/welcome","docId":"welcome"},{"type":"category","label":"Getting Started","items":[{"type":"category","label":"IDE Support","items":[{"type":"link","label":"JetBrains Rider Setup","href":"/avalonia-docs/docs/getting-started/jetbrains-rider-setup","docId":"getting-started/jetbrains-rider-setup"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/getting-started/ide-support"},{"type":"category","label":"Programming with Avalonia UI","items":[{"type":"link","label":"The Model-View-ViewModel Pattern","href":"/avalonia-docs/docs/getting-started/programming-with-avalonia/the-model-view-viewmodel-pattern-mvvm","docId":"getting-started/programming-with-avalonia/the-model-view-viewmodel-pattern-mvvm"},{"type":"link","label":"Controls & Layouts","href":"/avalonia-docs/docs/getting-started/programming-with-avalonia/controls-and-layouts","docId":"getting-started/programming-with-avalonia/controls-and-layouts"},{"type":"link","label":"Data Binding","href":"/avalonia-docs/docs/getting-started/programming-with-avalonia/data-binding","docId":"getting-started/programming-with-avalonia/data-binding"},{"type":"link","label":"Graphics & Animations","href":"/avalonia-docs/docs/getting-started/programming-with-avalonia/graphics-and-animations","docId":"getting-started/programming-with-avalonia/graphics-and-animations"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/getting-started/programming-with-avalonia/"},{"type":"link","label":"Windows","href":"/avalonia-docs/docs/getting-started/windows","docId":"getting-started/windows"},{"type":"link","label":"UserControls","href":"/avalonia-docs/docs/getting-started/usercontrols","docId":"getting-started/usercontrols"},{"type":"link","label":"Assets","href":"/avalonia-docs/docs/getting-started/assets","docId":"getting-started/assets"},{"type":"link","label":"Developer Tools","href":"/avalonia-docs/docs/getting-started/developer-tools","docId":"getting-started/developer-tools"},{"type":"link","label":"Logging Errors and Warnings","href":"/avalonia-docs/docs/getting-started/logging-errors-and-warnings","docId":"getting-started/logging-errors-and-warnings"},{"type":"link","label":"Unhandled Exceptions","href":"/avalonia-docs/docs/getting-started/unhandled-exceptions","docId":"getting-started/unhandled-exceptions"},{"type":"link","label":"Application Lifetimes","href":"/avalonia-docs/docs/getting-started/application-lifetimes","docId":"getting-started/application-lifetimes"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/getting-started/"},{"type":"category","label":"Data Binding","items":[{"type":"link","label":"The DataContext","href":"/avalonia-docs/docs/data-binding/the-datacontext","docId":"data-binding/the-datacontext"},{"type":"link","label":"Change Notifications","href":"/avalonia-docs/docs/data-binding/change-notifications","docId":"data-binding/change-notifications"},{"type":"link","label":"Bindings","href":"/avalonia-docs/docs/data-binding/bindings","docId":"data-binding/bindings"},{"type":"link","label":"Compiled Bindings","href":"/avalonia-docs/docs/data-binding/compiled-bindings","docId":"data-binding/compiled-bindings"},{"type":"link","label":"Binding to Controls","href":"/avalonia-docs/docs/data-binding/binding-to-controls","docId":"data-binding/binding-to-controls"},{"type":"link","label":"Converting Binding Values","href":"/avalonia-docs/docs/data-binding/converting-binding-values","docId":"data-binding/converting-binding-values"},{"type":"link","label":"Binding to Commands","href":"/avalonia-docs/docs/data-binding/binding-to-commands","docId":"data-binding/binding-to-commands"},{"type":"link","label":"Binding to Tasks and Observables","href":"/avalonia-docs/docs/data-binding/binding-to-tasks-and-observables","docId":"data-binding/binding-to-tasks-and-observables"},{"type":"link","label":"Binding from Code","href":"/avalonia-docs/docs/data-binding/binding-from-code","docId":"data-binding/binding-from-code"},{"type":"link","label":"Binding in a Control Template","href":"/avalonia-docs/docs/data-binding/binding-in-a-control-template","docId":"data-binding/binding-in-a-control-template"},{"type":"link","label":"Binding Classes","href":"/avalonia-docs/docs/data-binding/binding-classes","docId":"data-binding/binding-classes"},{"type":"link","label":"Creating and binding Attached Properties","href":"/avalonia-docs/docs/data-binding/creating-and-binding-attached-properties","docId":"data-binding/creating-and-binding-attached-properties"},{"type":"link","label":"Data Validation","href":"/avalonia-docs/docs/data-binding/data-validation","docId":"data-binding/data-validation"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/data-binding/"},{"type":"category","label":"Styling","items":[{"type":"link","label":"Styles","href":"/avalonia-docs/docs/styling/styles","docId":"styling/styles"},{"type":"link","label":"Selectors","href":"/avalonia-docs/docs/styling/selectors","docId":"styling/selectors"},{"type":"link","label":"Resources","href":"/avalonia-docs/docs/styling/resources","docId":"styling/resources"},{"type":"link","label":"Troubleshooting","href":"/avalonia-docs/docs/styling/troubleshooting","docId":"styling/troubleshooting"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/styling/"},{"type":"category","label":"Controls","items":[{"type":"link","label":"AutoCompleteBox","href":"/avalonia-docs/docs/controls/autocompletebox","docId":"controls/autocompletebox"},{"type":"link","label":"Border","href":"/avalonia-docs/docs/controls/border","docId":"controls/border"},{"type":"category","label":"Buttons","items":[{"type":"link","label":"Button","href":"/avalonia-docs/docs/controls/buttons/button","docId":"controls/buttons/button"},{"type":"link","label":"RadioButton","href":"/avalonia-docs/docs/controls/buttons/radiobutton","docId":"controls/buttons/radiobutton"},{"type":"link","label":"ToggleButton","href":"/avalonia-docs/docs/controls/buttons/togglebutton","docId":"controls/buttons/togglebutton"},{"type":"link","label":"ButtonSpinner","href":"/avalonia-docs/docs/controls/buttons/buttonspinner","docId":"controls/buttons/buttonspinner"},{"type":"link","label":"SplitButton","href":"/avalonia-docs/docs/controls/buttons/splitbutton","docId":"controls/buttons/splitbutton"},{"type":"link","label":"ToggleSplitButton","href":"/avalonia-docs/docs/controls/buttons/togglesplitbutton","docId":"controls/buttons/togglesplitbutton"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/controls/buttons/"},{"type":"link","label":"Calendar","href":"/avalonia-docs/docs/controls/calendar","docId":"controls/calendar"},{"type":"link","label":"CalendarDatePicker","href":"/avalonia-docs/docs/controls/calendardatepicker","docId":"controls/calendardatepicker"},{"type":"link","label":"Canvas","href":"/avalonia-docs/docs/controls/canvas","docId":"controls/canvas"},{"type":"link","label":"Carousel","href":"/avalonia-docs/docs/controls/carousel","docId":"controls/carousel"},{"type":"link","label":"CheckBox","href":"/avalonia-docs/docs/controls/checkbox","docId":"controls/checkbox"},{"type":"link","label":"ComboBox","href":"/avalonia-docs/docs/controls/combobox","docId":"controls/combobox"},{"type":"link","label":"ContentControl","href":"/avalonia-docs/docs/controls/contentcontrol","docId":"controls/contentcontrol"},{"type":"link","label":"ContextMenu","href":"/avalonia-docs/docs/controls/contextmenu","docId":"controls/contextmenu"},{"type":"link","label":"Decorator","href":"/avalonia-docs/docs/controls/decorator","docId":"controls/decorator"},{"type":"category","label":"DataGrid","items":[{"type":"link","label":"DataGridColumns","href":"/avalonia-docs/docs/controls/datagrid/datagridcolumns","docId":"controls/datagrid/datagridcolumns"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/controls/datagrid/"},{"type":"link","label":"DatePicker","href":"/avalonia-docs/docs/controls/datepicker","docId":"controls/datepicker"},{"type":"link","label":"DockPanel","href":"/avalonia-docs/docs/controls/dockpanel","docId":"controls/dockpanel"},{"type":"link","label":"Expander","href":"/avalonia-docs/docs/controls/expander","docId":"controls/expander"},{"type":"link","label":"Flyouts","href":"/avalonia-docs/docs/controls/flyouts","docId":"controls/flyouts"},{"type":"link","label":"Grid","href":"/avalonia-docs/docs/controls/grid","docId":"controls/grid"},{"type":"link","label":"GridSplitter","href":"/avalonia-docs/docs/controls/gridsplitter","docId":"controls/gridsplitter"},{"type":"link","label":"Image","href":"/avalonia-docs/docs/controls/image","docId":"controls/image"},{"type":"link","label":"ItemsControl","href":"/avalonia-docs/docs/controls/itemscontrol","docId":"controls/itemscontrol"},{"type":"link","label":"ItemsRepeater","href":"/avalonia-docs/docs/controls/itemsrepeater","docId":"controls/itemsrepeater"},{"type":"link","label":"LayoutTransformControl","href":"/avalonia-docs/docs/controls/layouttransformcontrol","docId":"controls/layouttransformcontrol"},{"type":"link","label":"ListBox","href":"/avalonia-docs/docs/controls/listbox","docId":"controls/listbox"},{"type":"link","label":"MaskedTextBox","href":"/avalonia-docs/docs/controls/maskedtextbox","docId":"controls/maskedtextbox"},{"type":"link","label":"Menu","href":"/avalonia-docs/docs/controls/menu","docId":"controls/menu"},{"type":"link","label":"NativeMenu","href":"/avalonia-docs/docs/controls/nativemenu","docId":"controls/nativemenu"},{"type":"link","label":"NumericUpDown","href":"/avalonia-docs/docs/controls/numericupdown","docId":"controls/numericupdown"},{"type":"link","label":"Panel","href":"/avalonia-docs/docs/controls/panel","docId":"controls/panel"},{"type":"link","label":"ProgressBar","href":"/avalonia-docs/docs/controls/progressbar","docId":"controls/progressbar"},{"type":"link","label":"RelativePanel","href":"/avalonia-docs/docs/controls/relativepanel","docId":"controls/relativepanel"},{"type":"link","label":"ScrollBar","href":"/avalonia-docs/docs/controls/scrollbar","docId":"controls/scrollbar"},{"type":"link","label":"ScrollViewer","href":"/avalonia-docs/docs/controls/scrollviewer","docId":"controls/scrollviewer"},{"type":"link","label":"Separator","href":"/avalonia-docs/docs/controls/separator","docId":"controls/separator"},{"type":"link","label":"Slider","href":"/avalonia-docs/docs/controls/slider","docId":"controls/slider"},{"type":"link","label":"SplitView","href":"/avalonia-docs/docs/controls/splitview","docId":"controls/splitview"},{"type":"link","label":"StackPanel","href":"/avalonia-docs/docs/controls/stackpanel","docId":"controls/stackpanel"},{"type":"link","label":"TabControl","href":"/avalonia-docs/docs/controls/tabcontrol","docId":"controls/tabcontrol"},{"type":"link","label":"TabStrip","href":"/avalonia-docs/docs/controls/tabstrip","docId":"controls/tabstrip"},{"type":"link","label":"TextBlock","href":"/avalonia-docs/docs/controls/textblock","docId":"controls/textblock"},{"type":"link","label":"TrayIcon","href":"/avalonia-docs/docs/controls/trayicon","docId":"controls/trayicon"},{"type":"category","label":"TreeDataGrid","items":[{"type":"link","label":"Creating a Hierarchical TreeDataGrid","href":"/avalonia-docs/docs/controls/treedatagrid/creating-a-hierarchical-treedatagrid","docId":"controls/treedatagrid/creating-a-hierarchical-treedatagrid"},{"type":"link","label":"Creating a Flat TreeDataGrid","href":"/avalonia-docs/docs/controls/treedatagrid/creating-a-flat-treedatagrid","docId":"controls/treedatagrid/creating-a-flat-treedatagrid"},{"type":"link","label":"TreeDataGrid column types","href":"/avalonia-docs/docs/controls/treedatagrid/treedatagrid-column-types","docId":"controls/treedatagrid/treedatagrid-column-types"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/controls/treedatagrid/"},{"type":"link","label":"TimePicker","href":"/avalonia-docs/docs/controls/timepicker","docId":"controls/timepicker"},{"type":"link","label":"TextBox","href":"/avalonia-docs/docs/controls/textbox","docId":"controls/textbox"},{"type":"link","label":"ToolTip","href":"/avalonia-docs/docs/controls/tooltip","docId":"controls/tooltip"},{"type":"link","label":"TreeView","href":"/avalonia-docs/docs/controls/treeview","docId":"controls/treeview"},{"type":"link","label":"TransitioningContentControl","href":"/avalonia-docs/docs/controls/transitioningcontentcontrol","docId":"controls/transitioningcontentcontrol"},{"type":"link","label":"UserControl","href":"/avalonia-docs/docs/controls/usercontrol","docId":"controls/usercontrol"},{"type":"link","label":"Viewbox","href":"/avalonia-docs/docs/controls/viewbox","docId":"controls/viewbox"},{"type":"link","label":"Window","href":"/avalonia-docs/docs/controls/window","docId":"controls/window"},{"type":"link","label":"WrapPanel","href":"/avalonia-docs/docs/controls/wrappanel","docId":"controls/wrappanel"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/controls/"},{"type":"category","label":"Templates","items":[{"type":"link","label":"Data Templates","href":"/avalonia-docs/docs/templates/data-templates","docId":"templates/data-templates"},{"type":"link","label":"Creating Data Templates in Code","href":"/avalonia-docs/docs/templates/creating-data-templates-in-code","docId":"templates/creating-data-templates-in-code"},{"type":"link","label":"Implementing IDataTemplate","href":"/avalonia-docs/docs/templates/implement-idatatemplates","docId":"templates/implement-idatatemplates"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/templates/"},{"type":"category","label":"Authoring Controls","items":[{"type":"link","label":"Types of Control","href":"/avalonia-docs/docs/authoring-controls/types-of-control","docId":"authoring-controls/types-of-control"},{"type":"link","label":"Defining Properties","href":"/avalonia-docs/docs/authoring-controls/defining-properties","docId":"authoring-controls/defining-properties"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/authoring-controls/"},{"type":"category","label":"Input","items":[{"type":"link","label":"Routed Events","href":"/avalonia-docs/docs/input/routed-events","docId":"input/routed-events"},{"type":"link","label":"Clipboard","href":"/avalonia-docs/docs/input/clipboard","docId":"input/clipboard"},{"type":"link","label":"Mouse & Pointer devices","href":"/avalonia-docs/docs/input/pointer","docId":"input/pointer"},{"type":"link","label":"Hotkeys","href":"/avalonia-docs/docs/input/hotkeys","docId":"input/hotkeys"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/input/"},{"type":"category","label":"Animations","items":[{"type":"link","label":"Keyframe Animations","href":"/avalonia-docs/docs/animations/keyframe-animations","docId":"animations/keyframe-animations"},{"type":"link","label":"Transitions","href":"/avalonia-docs/docs/animations/transitions","docId":"animations/transitions"},{"type":"link","label":"Page Transitions","href":"/avalonia-docs/docs/animations/page-transitions","docId":"animations/page-transitions"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/animations/"},{"type":"category","label":"Layout","items":[{"type":"link","label":"Panels Overview","href":"/avalonia-docs/docs/layout/panels-overview","docId":"layout/panels-overview"},{"type":"link","label":"Alignment, Margins and Padding","href":"/avalonia-docs/docs/layout/alignment-margins-and-padding","docId":"layout/alignment-margins-and-padding"},{"type":"link","label":"Create a Custom Panel","href":"/avalonia-docs/docs/layout/create-a-custom-panel","docId":"layout/create-a-custom-panel"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/layout/"},{"type":"category","label":"Distribution & Publishing","items":[{"type":"link","label":"macOS Distribution","href":"/avalonia-docs/docs/distribution-publishing/macos","docId":"distribution-publishing/macos"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/distribution-publishing/"},{"type":"category","label":"Guides","items":[{"type":"category","label":"Basics","items":[{"type":"link","label":"Introduction to XAML","href":"/avalonia-docs/docs/guides/basics/introduction-to-xaml","docId":"guides/basics/introduction-to-xaml"},{"type":"link","label":"Code Behind","href":"/avalonia-docs/docs/guides/basics/code-behind","docId":"guides/basics/code-behind"},{"type":"link","label":"MVVM Architecture","href":"/avalonia-docs/docs/guides/basics/mvvm","docId":"guides/basics/mvvm"},{"type":"link","label":"Accessing the UI thread","href":"/avalonia-docs/docs/guides/basics/accessing-the-ui-thread","docId":"guides/basics/accessing-the-ui-thread"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/guides/basics/"},{"type":"category","label":"Deep Dives","items":[{"type":"link","label":"Running your app on a Raspberry Pi","href":"/avalonia-docs/docs/guides/deep-dives/running-your-app-on-a-raspberry-pi","docId":"guides/deep-dives/running-your-app-on-a-raspberry-pi"},{"type":"link","label":"Running your Avalonia app on a Raspberry Pi with Raspbian Lite","href":"/avalonia-docs/docs/guides/deep-dives/running-on-raspbian-lite-via-drm","docId":"guides/deep-dives/running-on-raspbian-lite-via-drm"},{"type":"category","label":"ReactiveUI","items":[{"type":"link","label":"View Activation","href":"/avalonia-docs/docs/guides/deep-dives/reactiveui/view-activation","docId":"guides/deep-dives/reactiveui/view-activation"},{"type":"link","label":"Routing","href":"/avalonia-docs/docs/guides/deep-dives/reactiveui/routing","docId":"guides/deep-dives/reactiveui/routing"},{"type":"link","label":"Data Persistence","href":"/avalonia-docs/docs/guides/deep-dives/reactiveui/data-persistence","docId":"guides/deep-dives/reactiveui/data-persistence"},{"type":"link","label":"Binding to Sorted/Filtered Data","href":"/avalonia-docs/docs/guides/deep-dives/reactiveui/binding-to-sorted-filtered-list","docId":"guides/deep-dives/reactiveui/binding-to-sorted-filtered-list"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/guides/deep-dives/reactiveui/"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/guides/deep-dives/"},{"type":"category","label":"Developer Guides","items":[{"type":"link","label":"Build Avalonia from Source","href":"/avalonia-docs/docs/guides/developer-guides/build-avalonia-from-source","docId":"guides/developer-guides/build-avalonia-from-source"},{"type":"link","label":"Comparison of Avalonia with WPF and UWP","href":"/avalonia-docs/docs/guides/developer-guides/comparison-of-avalonia-with-wpf-and-uwp","docId":"guides/developer-guides/comparison-of-avalonia-with-wpf-and-uwp"},{"type":"link","label":"Debugging Previewer","href":"/avalonia-docs/docs/guides/developer-guides/debugging-previewer","docId":"guides/developer-guides/debugging-previewer"},{"type":"link","label":"Debugging the XAML compiler","href":"/avalonia-docs/docs/guides/developer-guides/debugging-xamlil","docId":"guides/developer-guides/debugging-xamlil"},{"type":"link","label":"macOS Development","href":"/avalonia-docs/docs/guides/developer-guides/macos-development","docId":"guides/developer-guides/macos-development"},{"type":"link","label":"Release Process","href":"/avalonia-docs/docs/guides/developer-guides/release-process","docId":"guides/developer-guides/release-process"},{"type":"link","label":"Maintaining Stable Branch","href":"/avalonia-docs/docs/guides/developer-guides/maintaining-stable-branch-pr-merge-process","docId":"guides/developer-guides/maintaining-stable-branch-pr-merge-process"},{"type":"link","label":"Testing with NCrunch","href":"/avalonia-docs/docs/guides/developer-guides/testing-with-ncrunch","docId":"guides/developer-guides/testing-with-ncrunch"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/guides/developer-guides/"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/guides/"},{"type":"category","label":"Tutorials","items":[{"type":"category","label":"ToDo List App","items":[{"type":"link","label":"Creating a new project","href":"/avalonia-docs/docs/tutorials/todo-list-app/creating-a-new-project","docId":"tutorials/todo-list-app/creating-a-new-project"},{"type":"link","label":"Creating a View","href":"/avalonia-docs/docs/tutorials/todo-list-app/creating-a-view","docId":"tutorials/todo-list-app/creating-a-view"},{"type":"link","label":"Creating a Model & ViewModel","href":"/avalonia-docs/docs/tutorials/todo-list-app/creating-a-model-and-viewmodel","docId":"tutorials/todo-list-app/creating-a-model-and-viewmodel"},{"type":"link","label":"Wiring up the Views","href":"/avalonia-docs/docs/tutorials/todo-list-app/wiring-up-the-views","docId":"tutorials/todo-list-app/wiring-up-the-views"},{"type":"link","label":"Locating Views","href":"/avalonia-docs/docs/tutorials/todo-list-app/locating-views","docId":"tutorials/todo-list-app/locating-views"},{"type":"link","label":"Adding new Items","href":"/avalonia-docs/docs/tutorials/todo-list-app/adding-new-items","docId":"tutorials/todo-list-app/adding-new-items"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/tutorials/todo-list-app/"},{"type":"category","label":"Music Store App","items":[{"type":"link","label":"Setup Development Environment","href":"/avalonia-docs/docs/tutorials/music-store-app/setup-development-environment","docId":"tutorials/music-store-app/setup-development-environment"},{"type":"link","label":"Create the Project","href":"/avalonia-docs/docs/tutorials/music-store-app/creating-the-project","docId":"tutorials/music-store-app/creating-the-project"},{"type":"link","label":"Creating a Modern looking Window","href":"/avalonia-docs/docs/tutorials/music-store-app/creating-a-modern-looking-window","docId":"tutorials/music-store-app/creating-a-modern-looking-window"},{"type":"link","label":"Add and Layout Controls","href":"/avalonia-docs/docs/tutorials/music-store-app/add-and-layout-controls","docId":"tutorials/music-store-app/add-and-layout-controls"},{"type":"link","label":"Opening a Dialog","href":"/avalonia-docs/docs/tutorials/music-store-app/opening-a-dialog","docId":"tutorials/music-store-app/opening-a-dialog"},{"type":"link","label":"Add Content to Dialog","href":"/avalonia-docs/docs/tutorials/music-store-app/add-content-to-dialog","docId":"tutorials/music-store-app/add-content-to-dialog"},{"type":"link","label":"Return from Dialog","href":"/avalonia-docs/docs/tutorials/music-store-app/return-from-dialog","docId":"tutorials/music-store-app/return-from-dialog"},{"type":"link","label":"Searching for Albums","href":"/avalonia-docs/docs/tutorials/music-store-app/searching-for-albums","docId":"tutorials/music-store-app/searching-for-albums"},{"type":"link","label":"Displaying Images","href":"/avalonia-docs/docs/tutorials/music-store-app/displaying-images","docId":"tutorials/music-store-app/displaying-images"},{"type":"link","label":"Add Items to User Collection","href":"/avalonia-docs/docs/tutorials/music-store-app/add-items-to-users-collection","docId":"tutorials/music-store-app/add-items-to-users-collection"},{"type":"link","label":"Add Data Persistence","href":"/avalonia-docs/docs/tutorials/music-store-app/add-data-persistence","docId":"tutorials/music-store-app/add-data-persistence"},{"type":"link","label":"Load data at Startup","href":"/avalonia-docs/docs/tutorials/music-store-app/load-data-at-startup","docId":"tutorials/music-store-app/load-data-at-startup"},{"type":"link","label":"Summary","href":"/avalonia-docs/docs/tutorials/music-store-app/summary","docId":"tutorials/music-store-app/summary"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/tutorials/music-store-app/"},{"type":"link","label":"Running in the Browser","href":"/avalonia-docs/docs/tutorials/running-in-the-browser","docId":"tutorials/running-in-the-browser"},{"type":"category","label":"Developing for Mobile","items":[{"type":"link","label":"Create a cross platform solution","href":"/avalonia-docs/docs/tutorials/developing-for-mobile/create-a-cross-platform-solution","docId":"tutorials/developing-for-mobile/create-a-cross-platform-solution"},{"type":"category","label":"Android","items":[{"type":"link","label":"Setting up your developer environment for Android","href":"/avalonia-docs/docs/tutorials/developing-for-mobile/android/setting-up-your-developer-environment-for-android","docId":"tutorials/developing-for-mobile/android/setting-up-your-developer-environment-for-android"},{"type":"link","label":"Build and run your Application on a Simulator","href":"/avalonia-docs/docs/tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-simulator","docId":"tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-simulator"},{"type":"link","label":"Build and run your Application on a physical device","href":"/avalonia-docs/docs/tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device","docId":"tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device"},{"type":"link","label":"Configure debugging in Visual Studio Code (Linux)","href":"/avalonia-docs/docs/tutorials/developing-for-mobile/android/configure-vscode-debug-linux","docId":"tutorials/developing-for-mobile/android/configure-vscode-debug-linux"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/tutorials/developing-for-mobile/android/"},{"type":"category","label":"iOS","items":[{"type":"link","label":"Setting up your developer environment for iOS","href":"/avalonia-docs/docs/tutorials/developing-for-mobile/ios/setting-up-your-developer-environment-for-ios","docId":"tutorials/developing-for-mobile/ios/setting-up-your-developer-environment-for-ios"},{"type":"link","label":"Build and run your application on a Simulator","href":"/avalonia-docs/docs/tutorials/developing-for-mobile/ios/build-and-run-your-application-on-a-simulator","docId":"tutorials/developing-for-mobile/ios/build-and-run-your-application-on-a-simulator"},{"type":"link","label":"Build and Run your Application on your iPhone or iPad","href":"/avalonia-docs/docs/tutorials/developing-for-mobile/ios/build-and-run-your-application-on-your-iphone-or-ipad","docId":"tutorials/developing-for-mobile/ios/build-and-run-your-application-on-your-iphone-or-ipad"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/tutorials/developing-for-mobile/ios/"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/tutorials/developing-for-mobile/"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/tutorials/"},{"type":"category","label":"WPF Developer Tips","items":[{"type":"link","label":"Styling","href":"/avalonia-docs/docs/wpf-developer-tips/styling","docId":"wpf-developer-tips/styling"},{"type":"link","label":"DataTemplates","href":"/avalonia-docs/docs/wpf-developer-tips/datatemplates","docId":"wpf-developer-tips/datatemplates"},{"type":"link","label":"HierachicalDataTemplate","href":"/avalonia-docs/docs/wpf-developer-tips/hierachicaldatatemplate","docId":"wpf-developer-tips/hierachicaldatatemplate"},{"type":"link","label":"UIElement, FrameworkElement and Control","href":"/avalonia-docs/docs/wpf-developer-tips/uielement-frameworkelement-and-control","docId":"wpf-developer-tips/uielement-frameworkelement-and-control"},{"type":"link","label":"DependencyProperty","href":"/avalonia-docs/docs/wpf-developer-tips/dependencyproperty","docId":"wpf-developer-tips/dependencyproperty"},{"type":"link","label":"Grid","href":"/avalonia-docs/docs/wpf-developer-tips/grid","docId":"wpf-developer-tips/grid"},{"type":"link","label":"ItemsControl","href":"/avalonia-docs/docs/wpf-developer-tips/itemscontrol","docId":"wpf-developer-tips/itemscontrol"},{"type":"link","label":"Tunnelling Events","href":"/avalonia-docs/docs/wpf-developer-tips/tunnelling-events","docId":"wpf-developer-tips/tunnelling-events"},{"type":"link","label":"Class Handlers","href":"/avalonia-docs/docs/wpf-developer-tips/class-handlers","docId":"wpf-developer-tips/class-handlers"},{"type":"link","label":"PropertyChangedCallback","href":"/avalonia-docs/docs/wpf-developer-tips/propertychangedcallback","docId":"wpf-developer-tips/propertychangedcallback"},{"type":"link","label":"RenderTransforms and RenderTransformOrigin","href":"/avalonia-docs/docs/wpf-developer-tips/rendertransforms-and-rendertransformorigin","docId":"wpf-developer-tips/rendertransforms-and-rendertransformorigin"}],"collapsed":true,"collapsible":true,"href":"/avalonia-docs/docs/wpf-developer-tips/"},{"type":"link","label":"FAQ","href":"/avalonia-docs/docs/faq","docId":"faq"},{"type":"link","label":"Community Support","href":"/avalonia-docs/docs/community","docId":"community"}]},"docs":{"animations/index":{"id":"animations/index","title":"Animations","description":"There are two types of animations in Avalonia:","sidebar":"documentationSidebar"},"animations/keyframe-animations":{"id":"animations/keyframe-animations","title":"Keyframe Animations","description":"Keyframe animations in Avalonia are heavily inspired by CSS Animations. They can be used to animate any number of properties on a control, using any number of keyframes to define the states that each property must pass through. Keyframe animations can run any number of times, in either direction.","sidebar":"documentationSidebar"},"animations/page-transitions":{"id":"animations/page-transitions","title":"Page Transitions","description":"PageTransitions are used to render a transition between two views, for example in a Carousel or TransitioningContentControl","sidebar":"documentationSidebar"},"animations/transitions":{"id":"animations/transitions","title":"Transitions","description":"Transitions in Avalonia are also heavily inspired by CSS Animations. They listen to any changes in target property\'s value and subsequently animates the change according to its parameters. They can be defined on any Control via Transitions property:","sidebar":"documentationSidebar"},"authoring-controls/defining-properties":{"id":"authoring-controls/defining-properties","title":"Defining Properties","description":"If you are creating a control, you will want to define properties on your control. You do this by defining AvaloniaPropertys for your control. Avalonia properties consist of two parts: the property definition and the CLR getter/setter for the property.","sidebar":"documentationSidebar"},"authoring-controls/index":{"id":"authoring-controls/index","title":"Authoring Controls","description":"Learn how to create custom controls.","sidebar":"documentationSidebar"},"authoring-controls/types-of-control":{"id":"authoring-controls/types-of-control","title":"Types of Control","description":"If you want to create your own controls, there are three main categories of control in Avalonia. The first thing to do is choose the category of control that best suits your use-case.","sidebar":"documentationSidebar"},"community":{"id":"community","title":"Community Support","description":"Telegram","sidebar":"documentationSidebar"},"controls/autocompletebox":{"id":"controls/autocompletebox","title":"AutoCompleteBox","description":"Represents a control that provides a text box for user input and a drop-down that contains possible matches based on the input in the text box.","sidebar":"documentationSidebar"},"controls/border":{"id":"controls/border","title":"Border","description":"The Border control decorates a child with a border and background. It can also be used to display rounded corners by setting the CornerRadius property.","sidebar":"documentationSidebar"},"controls/buttons/button":{"id":"controls/buttons/button","title":"Button","description":"The Button control is a ContentControl which reacts to pointer presses.","sidebar":"documentationSidebar"},"controls/buttons/buttonspinner":{"id":"controls/buttons/buttonspinner","title":"ButtonSpinner","description":"Represents a spinner control that includes two Buttons.","sidebar":"documentationSidebar"},"controls/buttons/index":{"id":"controls/buttons/index","title":"Buttons","description":"","sidebar":"documentationSidebar"},"controls/buttons/radiobutton":{"id":"controls/buttons/radiobutton","title":"RadioButton","description":"The RadioButton control allows users to select one or more things from a collection of presented things.","sidebar":"documentationSidebar"},"controls/buttons/repeatbutton":{"id":"controls/buttons/repeatbutton","title":"RepeatButton","description":"The RepeatButton is a Button control that has the added feature of regularly generating Click events while the button is being pressed down."},"controls/buttons/splitbutton":{"id":"controls/buttons/splitbutton","title":"SplitButton","description":"The SplitButton functions as a Button with primary and secondary parts that can each be pressed separately. The primary part behaves like normal Button and the secondary part opens a Flyout with additional actions.","sidebar":"documentationSidebar"},"controls/buttons/togglebutton":{"id":"controls/buttons/togglebutton","title":"ToggleButton","description":"The ToggleButton control is a subclass of the Button control that has a built-in checked state. This means the button can be checked or unchecked on click by a user. You may change the styling of controls based on whether ToggleButton is checked or not by using the :checked pseudoclass.","sidebar":"documentationSidebar"},"controls/buttons/togglesplitbutton":{"id":"controls/buttons/togglesplitbutton","title":"ToggleSplitButton","description":"The ToggleSplitButton functions as a ToggleButton with primary and secondary parts that can each be pressed separately. The primary part behaves like a normal ToggleButton and the secondary part opens a Flyout with additional actions.","sidebar":"documentationSidebar"},"controls/calendar":{"id":"controls/calendar","title":"Calendar","description":"The Calendar control is a standard Calendar control for users to select date\\\\(s\\\\) or date ranges.","sidebar":"documentationSidebar"},"controls/calendardatepicker":{"id":"controls/calendardatepicker","title":"CalendarDatePicker","description":"The CalendarDatePicker control allows the user to pick a date value using a calendar. It\'s similar to DatePicker, except it displays a calendar instead of combo boxes.","sidebar":"documentationSidebar"},"controls/canvas":{"id":"controls/canvas","title":"Canvas","description":"The Canvas control is a Panel which lays out its children by explicit coordinates.","sidebar":"documentationSidebar"},"controls/carousel":{"id":"controls/carousel","title":"Carousel","description":"The Carousel control is an items control that displays its items as pages that fill the control.","sidebar":"documentationSidebar"},"controls/checkbox":{"id":"controls/checkbox","title":"CheckBox","description":"The CheckBox control is a ContentControl which allows user to check an option. It is usually used to display a boolean option where selection is either checked or unchecked. But it also supports three state mode where selection is either checked, indeterminate or unchecked.","sidebar":"documentationSidebar"},"controls/combobox":{"id":"controls/combobox","title":"ComboBox","description":"Common Properties","sidebar":"documentationSidebar"},"controls/contentcontrol":{"id":"controls/contentcontrol","title":"ContentControl","description":"Common Properties","sidebar":"documentationSidebar"},"controls/contextmenu":{"id":"controls/contextmenu","title":"ContextMenu","description":"The ContextMenu control is a menu that can be applied to any control to provide right-click control-specific menus.","sidebar":"documentationSidebar"},"controls/datagrid/datagridcolumns":{"id":"controls/datagrid/datagridcolumns","title":"DataGridColumns","description":"Overview","sidebar":"documentationSidebar"},"controls/datagrid/index":{"id":"controls/datagrid/index","title":"DataGrid","description":"The DataGrid control is a control that displays data in a customizable grid.","sidebar":"documentationSidebar"},"controls/datepicker":{"id":"controls/datepicker","title":"DatePicker","description":"The DatePicker control allows the user to pick a date value.","sidebar":"documentationSidebar"},"controls/decorator":{"id":"controls/decorator","title":"Decorator","description":"The Decorator is the base decorator class for decorating a single child control.","sidebar":"documentationSidebar"},"controls/dockpanel":{"id":"controls/dockpanel","title":"DockPanel","description":"The DockPanel control is a Panel which lays out its children by \\"docking\\" them to the sides or floating in the center.","sidebar":"documentationSidebar"},"controls/expander":{"id":"controls/expander","title":"Expander","description":"The Expander control is a control that allows for expanding to show nested content.","sidebar":"documentationSidebar"},"controls/flyouts":{"id":"controls/flyouts","title":"Flyouts","description":"Overview","sidebar":"documentationSidebar"},"controls/grid":{"id":"controls/grid","title":"Grid","description":"The Grid control is a Panel control useful for organizing other controls in columns and rows. ColumnDefinition and RowDefinition properties are used to define absolute, relative, or proportional row and column geometries for the grid. Each control in the grid will be placed using the Grid.Column and Grid.Row additional properties. It is also possible to have controls that span multiple rows and/or columns by using the ColumnSpan and RowSpan properties.","sidebar":"documentationSidebar"},"controls/gridsplitter":{"id":"controls/gridsplitter","title":"GridSplitter","description":"The GridSplitter control is a control that allows a user to resize the space between Grid rows or columns.","sidebar":"documentationSidebar"},"controls/image":{"id":"controls/image","title":"Image","description":"The Image control is a control for displaying raster images.","sidebar":"documentationSidebar"},"controls/index":{"id":"controls/index","title":"Controls","description":"Avalonia provides following groups of controls:","sidebar":"documentationSidebar"},"controls/itemscontrol":{"id":"controls/itemscontrol","title":"ItemsControl","description":"The ItemsControl control is the base class for controls that display multiple items like ListBox.","sidebar":"documentationSidebar"},"controls/itemsrepeater":{"id":"controls/itemsrepeater","title":"ItemsRepeater","description":"A data-driven collection control that incorporates a flexible layout system, custom views, and virtualization.","sidebar":"documentationSidebar"},"controls/layouttransformcontrol":{"id":"controls/layouttransformcontrol","title":"LayoutTransformControl","description":"The LayoutTransformControl allows for dynamically transforming layout completely within the View class definition.","sidebar":"documentationSidebar"},"controls/listbox":{"id":"controls/listbox","title":"ListBox","description":"The ListBox is an ItemsControl which displays items in a multi-line list box and allows individual selection.","sidebar":"documentationSidebar"},"controls/maskedtextbox":{"id":"controls/maskedtextbox","title":"MaskedTextBox","description":"The MaskedTextBox control is an editable text field where a user can input text.","sidebar":"documentationSidebar"},"controls/menu":{"id":"controls/menu","title":"Menu","description":"The Menu control adds a top-level menu to an application. A Menu is usually placed in a DockPanel in a Window, docked to the top of the window:","sidebar":"documentationSidebar"},"controls/nativemenu":{"id":"controls/nativemenu","title":"NativeMenu","description":"Displays a native menu on macOS and some Linux distributions.","sidebar":"documentationSidebar"},"controls/numericupdown":{"id":"controls/numericupdown","title":"NumericUpDown","description":"The NumericUpDown is an editable numeric input field.","sidebar":"documentationSidebar"},"controls/panel":{"id":"controls/panel","title":"Panel","description":"The Panel is the base class for controls that can contain multiple children like DockPanel or StackPanel.","sidebar":"documentationSidebar"},"controls/progressbar":{"id":"controls/progressbar","title":"ProgressBar","description":"The ProgressBar control allow for showing dynamic progress status.","sidebar":"documentationSidebar"},"controls/relativepanel":{"id":"controls/relativepanel","title":"RelativePanel","description":"The RelativePanel control is a Panel which lets you layout elements by specifying where they go in relation to other elements and in relation to the panel.","sidebar":"documentationSidebar"},"controls/scrollbar":{"id":"controls/scrollbar","title":"ScrollBar","description":"A scrollbar control","sidebar":"documentationSidebar"},"controls/scrollviewer":{"id":"controls/scrollviewer","title":"ScrollViewer","description":"The ScrollViewer control scrolls its content if the content is bigger than the space available. A ScrollViewer cannot be contained in a control that has infinite height or width (depending on scrolling direction) such as a StackPanel. To avoid it, you can either set fixed Height/Width or MaxHeight/MaxWidth or choose another container panel.","sidebar":"documentationSidebar"},"controls/separator":{"id":"controls/separator","title":"Separator","description":"The Separator control is used to provide visual separators within a Menu control.","sidebar":"documentationSidebar"},"controls/slider":{"id":"controls/slider","title":"Slider","description":"The Slider control is a control that lets the user select from a range of values by moving a Thumb control along a track.","sidebar":"documentationSidebar"},"controls/splitview":{"id":"controls/splitview","title":"SplitView","description":"Represents a container with two views; one view for the main content and another view that is typically used for navigation commands.","sidebar":"documentationSidebar"},"controls/stackpanel":{"id":"controls/stackpanel","title":"StackPanel","description":"The StackPanel control is a Panel which lays out its children by stacking them horizontally or vertically. StackPanel is typically used to arrange a small subsection of the UI on a page.","sidebar":"documentationSidebar"},"controls/tabcontrol":{"id":"controls/tabcontrol","title":"TabControl","description":"The TabControl allows us to switch between different pages by means of tabs like the tabs in web navigators or the ribbon menu \\\\(which uses tabs\\\\) in Word Office for instance.","sidebar":"documentationSidebar"},"controls/tabstrip":{"id":"controls/tabstrip","title":"TabStrip","description":"Displays a strip of selectable tabs.","sidebar":"documentationSidebar"},"controls/textblock":{"id":"controls/textblock","title":"TextBlock","description":"The TextBlock control allows for the display of label-like text in the interface.","sidebar":"documentationSidebar"},"controls/textbox":{"id":"controls/textbox","title":"TextBox","description":"The TextBox control is an editable text field where a user can input text.","sidebar":"documentationSidebar"},"controls/timepicker":{"id":"controls/timepicker","title":"TimePicker","description":"The TimePicker control allows the user to pick a time value.","sidebar":"documentationSidebar"},"controls/tooltip":{"id":"controls/tooltip","title":"ToolTip","description":"The ToolTip is a control that pops up with hint text when hovered over the appropriate control.","sidebar":"documentationSidebar"},"controls/transitioningcontentcontrol":{"id":"controls/transitioningcontentcontrol","title":"TransitioningContentControl","description":"Common Properties","sidebar":"documentationSidebar"},"controls/trayicon":{"id":"controls/trayicon","title":"TrayIcon","description":"Overview","sidebar":"documentationSidebar"},"controls/treedatagrid/creating-a-flat-treedatagrid":{"id":"controls/treedatagrid/creating-a-flat-treedatagrid","title":"Creating a Flat TreeDataGrid","description":"There are two parts to any TreeDataGrid:","sidebar":"documentationSidebar"},"controls/treedatagrid/creating-a-hierarchical-treedatagrid":{"id":"controls/treedatagrid/creating-a-hierarchical-treedatagrid","title":"Creating a Hierarchical TreeDataGrid","description":"There are two parts to any TreeDataGrid:","sidebar":"documentationSidebar"},"controls/treedatagrid/index":{"id":"controls/treedatagrid/index","title":"TreeDataGrid","description":"Introduction","sidebar":"documentationSidebar"},"controls/treedatagrid/treedatagrid-column-types":{"id":"controls/treedatagrid/treedatagrid-column-types","title":"TreeDataGrid column types","description":"TreeDataGrid currently supports three different column types:","sidebar":"documentationSidebar"},"controls/treeview":{"id":"controls/treeview","title":"TreeView","description":"The TreeView is a control that presents hierarchical tree data and allows selection of it.","sidebar":"documentationSidebar"},"controls/usercontrol":{"id":"controls/usercontrol","title":"UserControl","description":"UserControl control is a ContentControl that represents a reusable collection of controls in a predefined layout.","sidebar":"documentationSidebar"},"controls/viewbox":{"id":"controls/viewbox","title":"Viewbox","description":"The Viewbox is a decorator control which scales its child. It can be used to scale its child to fit the available space.","sidebar":"documentationSidebar"},"controls/window":{"id":"controls/window","title":"Window","description":"Window is a top-level ContentControl.","sidebar":"documentationSidebar"},"controls/wrappanel":{"id":"controls/wrappanel","title":"WrapPanel","description":"The WrapPanel control is a Panel which positions child elements in sequential position from left to right, breaking content to the next line at the edge of the containing box. Subsequent ordering happens sequentially from top to bottom or from right to left, depending on the value of the Orientation property.","sidebar":"documentationSidebar"},"data-binding/binding-classes":{"id":"data-binding/binding-classes","title":"Binding Classes","description":"In Avalonia, you also can bind classes. Sometimes it could be useful to switch classes depending on some logic, and for those purposes, you can use Binding Classes API. There is the sample usage of Binding Classes. We have two different styles and we want to switch between them depending on MyProperty state.","sidebar":"documentationSidebar"},"data-binding/binding-from-code":{"id":"data-binding/binding-from-code","title":"Binding from Code","description":"Binding from code in Avalonia works somewhat differently to WPF/UWP. At the low level, Avalonia\'s binding system is based on Reactive Extensions\' IObservable which is then built upon by XAML bindings \\\\(which can also be instantiated in code\\\\).","sidebar":"documentationSidebar"},"data-binding/binding-in-a-control-template":{"id":"data-binding/binding-in-a-control-template","title":"Binding in a Control Template","description":"When you\'re creating a control template and you want to bind to the templated parent you can use:","sidebar":"documentationSidebar"},"data-binding/binding-to-commands":{"id":"data-binding/binding-to-commands","title":"Binding to Commands","description":"Controls that carry out an action, such as Button have a Command property which can be bound to an ICommand. When the control is activated \\\\(e.g. when a button is clicked\\\\) the ICommand.Execute method will be called.","sidebar":"documentationSidebar"},"data-binding/binding-to-controls":{"id":"data-binding/binding-to-controls","title":"Binding to Controls","description":"As well as binding to a control\'s DataContext you can also bind to other controls.","sidebar":"documentationSidebar"},"data-binding/binding-to-tasks-and-observables":{"id":"data-binding/binding-to-tasks-and-observables","title":"Binding to Tasks and Observables","description":"You can subscribe to the result of a task or an observable by using the ^ stream binding operator.","sidebar":"documentationSidebar"},"data-binding/bindings":{"id":"data-binding/bindings","title":"Bindings","description":"You bind in XAML using the  markup extension. By using bindings \\\\(assuming you\'ve implemented change notifications\\\\) any changes to the data context will automatically be updated in the control.","sidebar":"documentationSidebar"},"data-binding/change-notifications":{"id":"data-binding/change-notifications","title":"Change Notifications","description":"Property Changes","sidebar":"documentationSidebar"},"data-binding/compiled-bindings":{"id":"data-binding/compiled-bindings","title":"Compiled Bindings","description":"Bindings defined in the XAML are using reflection in order to find and access the requested property in your ViewModel. In Avalonia, you can also use compiled bindings, which have some benefits:","sidebar":"documentationSidebar"},"data-binding/converting-binding-values":{"id":"data-binding/converting-binding-values","title":"Converting Binding Values","description":"Negating Values","sidebar":"documentationSidebar"},"data-binding/creating-and-binding-attached-properties":{"id":"data-binding/creating-and-binding-attached-properties","title":"Creating and binding Attached Properties","description":"When you need more or let\'s say foreign properties on avalonia elements, then attached properties are the right thing to use. They can also be used to create so called behaviors to generally modify the hosted gui components. This can be utilized to bind a command to an event for instance.","sidebar":"documentationSidebar"},"data-binding/data-validation":{"id":"data-binding/data-validation","title":"Data Validation","description":"Avalonia offers different data validation options. In this section we will show you how you can validate the Properties of your ViewModel and how you can style the displayed error message.","sidebar":"documentationSidebar"},"data-binding/index":{"id":"data-binding/index","title":"Data Binding","description":"Data binding provides a simple way to get data into your application\'s UI without having to set properties on each control each time a value changes.","sidebar":"documentationSidebar"},"data-binding/the-datacontext":{"id":"data-binding/the-datacontext","title":"The DataContext","description":"The Control.DataContext property describes where controls will look by default for values when binding. The data context will usually be set for top-level controls such as Window and child controls will inherit this data context.","sidebar":"documentationSidebar"},"distribution-publishing/index":{"id":"distribution-publishing/index","title":"Distribution / Publishing","description":"","sidebar":"documentationSidebar"},"distribution-publishing/macos":{"id":"distribution-publishing/macos","title":"macOS Distribution","description":"macOS applications are typically distributed in a .app application bundle. To make .NET Core and Avalonia projects work in a .app bundle, some extra legwork has to be done after your application has gone through the publishing process.","sidebar":"documentationSidebar"},"faq":{"id":"faq","title":"FAQ","description":"Can I code my UI instead of using XAML?","sidebar":"documentationSidebar"},"getting-started/application-lifetimes":{"id":"getting-started/application-lifetimes","title":"Application Lifetimes","description":"Platforms are not created equal. The lifetime management that we are used to in Windows Forms and WPF can work only on desktop-style platforms. AvaloniaUI is a cross-platform framework, so to help your application to be portable, we provide different lifetime models for your application and allow you to control everything manually if platform allows us to do so.","sidebar":"documentationSidebar"},"getting-started/assets":{"id":"getting-started/assets","title":"Assets","description":"Many applications need to include assets such as bitmaps and resource dictionaries within their executable and refer to these assets from XAML.","sidebar":"documentationSidebar"},"getting-started/developer-tools":{"id":"getting-started/developer-tools","title":"Developer Tools","description":"Avalonia has an inbuilt DevTools window which is enabled by calling the attached AttachDevTools() method in a Window constructor. The default templates have this enabled when the program is compiled in DEBUG mode:","sidebar":"documentationSidebar"},"getting-started/ide-support":{"id":"getting-started/ide-support","title":"IDE Support","description":"JetBrains Rider","sidebar":"documentationSidebar"},"getting-started/index":{"id":"getting-started/index","title":"Getting Started with Avalonia","description":"Ready to get started with Avalonia? Follow these steps to install the templates and create your first application.","sidebar":"documentationSidebar"},"getting-started/jetbrains-rider-setup":{"id":"getting-started/jetbrains-rider-setup","title":"JetBrains Rider Setup","description":"1. Download and install the .NET SDK of your choice Download .NET \\\\(Linux, macOS, and Windows\\\\) \\\\(microsoft.com\\\\)","sidebar":"documentationSidebar"},"getting-started/logging-errors-and-warnings":{"id":"getting-started/logging-errors-and-warnings","title":"Logging Errors and Warnings","description":"Avalonia can log warnings and errors using System.Diagnostics.Trace. To enable logging the LogToTrace method call should be present in your Program.cs file:","sidebar":"documentationSidebar"},"getting-started/programming-with-avalonia/controls-and-layouts":{"id":"getting-started/programming-with-avalonia/controls-and-layouts","title":"Controls & Layouts","description":"Controls","sidebar":"documentationSidebar"},"getting-started/programming-with-avalonia/data-binding":{"id":"getting-started/programming-with-avalonia/data-binding","title":"Data Binding","description":"Avalonia includes comprehensive support for binding between controls and to arbitrary .NET objects. Data binding can be set up in XAML or in code and supports:","sidebar":"documentationSidebar"},"getting-started/programming-with-avalonia/graphics-and-animations":{"id":"getting-started/programming-with-avalonia/graphics-and-animations","title":"Graphics & Animations","description":"Graphics","sidebar":"documentationSidebar"},"getting-started/programming-with-avalonia/index":{"id":"getting-started/programming-with-avalonia/index","title":"Programming with Avalonia","description":"Avalonia lets you develop an application using the XAML markup language and C\\\\# \\\\(or another .NET language\\\\) for code. You generally use XAML markup to implement the appearance of an application while using code to implement its behavior.","sidebar":"documentationSidebar"},"getting-started/programming-with-avalonia/the-model-view-viewmodel-pattern-mvvm":{"id":"getting-started/programming-with-avalonia/the-model-view-viewmodel-pattern-mvvm","title":"The Model-View-ViewModel Pattern","description":"As well as writing code in code-behind, Avalonia supports using the Model-View-ViewModel pattern \\\\(or MVVM\\\\). MVVM is a common way to structure UI applications that separates view logic from application logic in a way that allows your applications to become unit-testable.","sidebar":"documentationSidebar"},"getting-started/unhandled-exceptions":{"id":"getting-started/unhandled-exceptions","title":"Unhandled Exceptions","description":"Avalonia does not offer any mechanism to handle exceptions globally and mark this as handled. The reason is, that one cannot know if the exception has been handled correctly and therefore the application may be in an invalid state. Instead it\'s highly recommend to handle exceptions locally if these can be handled by your application. That said it is still a good idea to log any unhandled exception for further support and debugging.","sidebar":"documentationSidebar"},"getting-started/usercontrols":{"id":"getting-started/usercontrols","title":"UserControls","description":"UserControl represents a \\"view\\" in Avalonia, which is a reusable collection of controls in a predefined layout.","sidebar":"documentationSidebar"},"getting-started/windows":{"id":"getting-started/windows","title":"Windows","description":"Window is the top-level control in Avalonia.","sidebar":"documentationSidebar"},"guides/basics/accessing-the-ui-thread":{"id":"guides/basics/accessing-the-ui-thread","title":"Accessing the UI thread","description":"A Dispatcher provides services for managing work items on a specific thread. In Avalonia you will usually have only one Dispatcher, the one that handles the UI thread. Whenever you need to update the UI from a different thread than the UI thread, you need to access the UI thread via the running Dispatcher.","sidebar":"documentationSidebar"},"guides/basics/code-behind":{"id":"guides/basics/code-behind","title":"Code Behind","description":"Window and UserControl files also have an associated code-behind file which usually has the extension .xaml.cs or .axaml.cs and may be displayed collapsed under the XAML file in your editor. Below you can see a MainWindow.xaml file along with its markdown file MainWindow.xaml.cs in Visual Studio:","sidebar":"documentationSidebar"},"guides/basics/index":{"id":"guides/basics/index","title":"Basics","description":"ToDo List App","sidebar":"documentationSidebar"},"guides/basics/introduction-to-xaml":{"id":"guides/basics/introduction-to-xaml","title":"Introduction to XAML","description":"Avalonia uses XAML to define user-interfaces. XAML is an XML-based markup language that is used by many UI frameworks.","sidebar":"documentationSidebar"},"guides/basics/mvvm":{"id":"guides/basics/mvvm","title":"MVVM Architecture","description":"The Model-View-ViewModel pattern (MVVM) is a common way of structuring a UI application. It takes advantage of Avalonia\'s binding system to separate the logic of the application from the display of the application.","sidebar":"documentationSidebar"},"guides/deep-dives/index":{"id":"guides/deep-dives/index","title":"Deep Dives","description":"","sidebar":"documentationSidebar"},"guides/deep-dives/reactiveui/binding-to-sorted-filtered-list":{"id":"guides/deep-dives/reactiveui/binding-to-sorted-filtered-list","title":"Binding to Sorted/Filtered Data","description":"A common UI task that applications need to do is display sorted and/or filtered \'views\' of data. In Avalonia this can be accomplished by connecting a SourceCache or a SourceList to a ReadOnlyObservableCollection and binding to that collection","sidebar":"documentationSidebar"},"guides/deep-dives/reactiveui/data-persistence":{"id":"guides/deep-dives/reactiveui/data-persistence","title":"Data Persistence","description":"For better UX, your app should be capable of saving state to the disk when the app is suspending and of restoring state when the app is resuming. ReactiveUI provides facilities allowing you to persist application state by serializing the view model tree when the app is shutting down or suspending. In this tutorial we are going to look through the capabilities of ReactiveUI that help us manage the state which outlives the process.","sidebar":"documentationSidebar"},"guides/deep-dives/reactiveui/index":{"id":"guides/deep-dives/reactiveui/index","title":"ReactiveUI","description":"","sidebar":"documentationSidebar"},"guides/deep-dives/reactiveui/routing":{"id":"guides/deep-dives/reactiveui/routing","title":"Routing","description":"ReactiveUI routing consists of an IScreen that contains current RoutingState, several IRoutableViewModels, and a platform-specific XAML control called RoutedViewHost. RoutingState manages the view model navigation stack and allows view models to navigate to other view models. IScreen is the root of a navigation stack; despite the name, its views don\'t have to occupy the whole screen. RoutedViewHost monitors an instance of RoutingState, responding to any changes in the navigation stack by creating and embedding the appropriate view.","sidebar":"documentationSidebar"},"guides/deep-dives/reactiveui/view-activation":{"id":"guides/deep-dives/reactiveui/view-activation","title":"View Activation","description":"For the WhenActivated ReactiveUI feature to work, you need to use custom base classes from the Avalonia.ReactiveUI package, such as ReactiveWindow or ReactiveUserControl. Of course, you can also implement the IViewFor interface by hand in your class, but make sure you store the ViewModel in an AvaloniaProperty.","sidebar":"documentationSidebar"},"guides/deep-dives/running-on-raspbian-lite-via-drm":{"id":"guides/deep-dives/running-on-raspbian-lite-via-drm","title":"Running your Avalonia app on a Raspberry Pi with Raspbian Lite","description":"This tutorial shows you how to run your Avalonia app on a Raspberry Pi with Raspbian Lite","sidebar":"documentationSidebar"},"guides/deep-dives/running-your-app-on-a-raspberry-pi":{"id":"guides/deep-dives/running-your-app-on-a-raspberry-pi","title":"Running your app on a Raspberry Pi","description":"Step 1","sidebar":"documentationSidebar"},"guides/developer-guides/build-avalonia-from-source":{"id":"guides/developer-guides/build-avalonia-from-source","title":"Build Avalonia from Source","description":"Prerequisites","sidebar":"documentationSidebar"},"guides/developer-guides/comparison-of-avalonia-with-wpf-and-uwp":{"id":"guides/developer-guides/comparison-of-avalonia-with-wpf-and-uwp","title":"Comparison of Avalonia with WPF and UWP","description":"Originally based on UWPvsWPF.md with Avalonia-specific changes. Licensed CC BY-SA 4.0","sidebar":"documentationSidebar"},"guides/developer-guides/debugging-previewer":{"id":"guides/developer-guides/debugging-previewer","title":"Debugging Previewer","description":"By default, even if you would put a breakpoint in Avalonia main repo directly it would not be hit when Previewer executes this code. This is because Previewer is a completely different process usually run by IDE.","sidebar":"documentationSidebar"},"guides/developer-guides/debugging-xamlil":{"id":"guides/developer-guides/debugging-xamlil","title":"Debugging the XAML compiler","description":"You can debug the XAML compiler by adding the AvaloniaXamlIlDebuggerLaunch property to your .csproj like this:","sidebar":"documentationSidebar"},"guides/developer-guides/index":{"id":"guides/developer-guides/index","title":"Developer Guides","description":"This section contains guides and documentations for developer contributing and working on Avalonia","sidebar":"documentationSidebar"},"guides/developer-guides/macos-development":{"id":"guides/developer-guides/macos-development","title":"macOS Development","description":"How to build and run your AvaloniaUI app for macOS","sidebar":"documentationSidebar"},"guides/developer-guides/maintaining-stable-branch-pr-merge-process":{"id":"guides/developer-guides/maintaining-stable-branch-pr-merge-process","title":"Maintaining Stable Branch","description":"This Process MUST be followed during any period that master branch is allowing breaking changes.","sidebar":"documentationSidebar"},"guides/developer-guides/release-process":{"id":"guides/developer-guides/release-process","title":"Release Process","description":"* Create a branch named release/0.10.2 for example. This branch should be level with the master commit that the release will be based on.","sidebar":"documentationSidebar"},"guides/developer-guides/testing-with-ncrunch":{"id":"guides/developer-guides/testing-with-ncrunch","title":"Testing with NCrunch","description":"When you enable NCrunch on your solution the build will most likely fail with an error along the lines of The name \'InitializeComponent\' does not exist in the current context. This is because the *.axaml files are not included in the NCrunch workspace directory because (currently) NCrunch does not know to include those files.","sidebar":"documentationSidebar"},"guides/index":{"id":"guides/index","title":"Guides","description":"","sidebar":"documentationSidebar"},"input/clipboard":{"id":"input/clipboard","title":"Clipboard","description":"Avalonia provides access to the Clipboard via the IClipboard interface. You can get an instance of this interface for the current Application with Application.Current.Clipboard.","sidebar":"documentationSidebar"},"input/hotkeys":{"id":"input/hotkeys","title":"Hotkeys","description":"Various Controls that implement ICommandSource have a HotKey property that you can set or bind to. Pressing the hotkey will execute the command bound to the Control.","sidebar":"documentationSidebar"},"input/index":{"id":"input/index","title":"Input","description":"","sidebar":"documentationSidebar"},"input/pointer":{"id":"input/pointer","title":"Mouse & Pointer devices","description":"Avalonia operates on the abstraction called pointer devices. These devices including, but not limited to mouse, touch, pen etc. Each control in Avalonia provides following events which allow developer to subscribe to the pointer device movements, clicks and wheel movements:","sidebar":"documentationSidebar"},"input/routed-events":{"id":"input/routed-events","title":"Routed Events","description":"Most events in Avalonia are implemented as Routed Events. Routed events are events that are raised on the whole tree rather than just the control that raised the event.","sidebar":"documentationSidebar"},"layout/alignment-margins-and-padding":{"id":"layout/alignment-margins-and-padding","title":"Alignment, Margins and Padding","description":"An Avalonia control exposes several properties that are used to precisely position child elements. This topic discusses four of the most important properties: HorizontalAlignment, Margin, Padding, and VerticalAlignment. The effects of these properties are important to understand, because they provide the basis for controlling the position of elements in Avalonia applications.","sidebar":"documentationSidebar"},"layout/create-a-custom-panel":{"id":"layout/create-a-custom-panel","title":"Create a Custom Panel","description":"This example shows how to override the default layout behavior of the Panel element and create custom layout elements that are derived from Panel.","sidebar":"documentationSidebar"},"layout/index":{"id":"layout/index","title":"Layout","description":"Panels","sidebar":"documentationSidebar"},"layout/panels-overview":{"id":"layout/panels-overview","title":"Panels Overview","description":"Panel elements are components that control the rendering of elements - their size and dimensions, their position, and the arrangement of their child content. Avalonia provides a number of predefined Panel elements as well as the ability to construct custom Panel elements.","sidebar":"documentationSidebar"},"styling/index":{"id":"styling/index","title":"Styling","description":"Styles in Avalonia are used to share property settings between controls. The Avalonia styling system can be thought of as a mix of CSS styling and WPF/UWP styling. At its most basic, a style consists of a selector and a collection of setters.","sidebar":"documentationSidebar"},"styling/resources":{"id":"styling/resources","title":"Resources","description":"Often, styles and controls will need to share resources such as \\\\(but not limited to\\\\) brushes and colors. You can put such resources in the Resources dictionary which is available on every style and control and then refer to these resources elsewhere.","sidebar":"documentationSidebar"},"styling/selectors":{"id":"styling/selectors","title":"Selectors","description":"OfType","sidebar":"documentationSidebar"},"styling/styles":{"id":"styling/styles","title":"Styles","description":"Styles in Avalonia are used to share property settings between controls. The Avalonia styling system can be thought of as a mix of CSS styling and WPF/UWP styling. At its most basic, a style consists of a selector and a collection of setters.","sidebar":"documentationSidebar"},"styling/troubleshooting":{"id":"styling/troubleshooting","title":"Troubleshooting","description":"Avalonia styling system is a mix of XAML and CSS styling approaches, so developers with knowledge of only one of these technologies can be confused by details of another one.","sidebar":"documentationSidebar"},"templates/creating-data-templates-in-code":{"id":"templates/creating-data-templates-in-code","title":"Creating Data Templates in Code","description":"Avalonia also supports creating data templates in code with the FuncDataTemplate class.","sidebar":"documentationSidebar"},"templates/data-templates":{"id":"templates/data-templates","title":"Data Templates","description":"Many controls have a Content property, such as ContentControl.Content. Window inherits from ContentControl, so lets use that as an example. You\'re probably familiar with what happens when you put a control in the Window.Content property - the window displays the control:","sidebar":"documentationSidebar"},"templates/implement-idatatemplates":{"id":"templates/implement-idatatemplates","title":"Implementing IDataTemplate","description":"If you need more control over your DataTemplate you can do this by creating a class which implements the IDataTemplate-interface. With this interface you can create your own DataTemplate not only respecting the DataType of your data, but also its properties or whatever you like.","sidebar":"documentationSidebar"},"templates/index":{"id":"templates/index","title":"Data Templates","description":"","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device":{"id":"tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-device","title":"Build and run your Application on a physical device","description":"To deploy and run the Application on a real Android device, make sure of the following:","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-simulator":{"id":"tutorials/developing-for-mobile/android/build-and-run-your-application-on-a-simulator","title":"Build and run your Application on a Simulator","description":"Please ensure you have followed the guide create-a-cross-platform-solution.md.","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/android/configure-vscode-debug-linux":{"id":"tutorials/developing-for-mobile/android/configure-vscode-debug-linux","title":"Configure debugging in Visual Studio Code (Linux)","description":"For debugging Avalonia-based Android projects on Linux (using Visual Studio Code), follow the steps:","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/android/index":{"id":"tutorials/developing-for-mobile/android/index","title":"Android","description":"In this section we describe how to setup you machine for Android development. Then how to run your application in an Android simulator or test it on an Android device.","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/android/setting-up-your-developer-environment-for-android":{"id":"tutorials/developing-for-mobile/android/setting-up-your-developer-environment-for-android","title":"Setting up your developer environment for Android","description":"Install the dotnet SDK","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/create-a-cross-platform-solution":{"id":"tutorials/developing-for-mobile/create-a-cross-platform-solution","title":"Create a cross platform solution","description":"Make sure you use latest .NET 7 SDK. iOS especially requires developers to use 7.0.102 SDK or newer.","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/index":{"id":"tutorials/developing-for-mobile/index","title":"Developing for Mobile","description":"This section contains the following guides:","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/ios/build-and-run-your-application-on-a-simulator":{"id":"tutorials/developing-for-mobile/ios/build-and-run-your-application-on-a-simulator","title":"Build and run your application on a Simulator","description":"Please ensure you have followed the guide create-a-cross-platform-solution.md.","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/ios/build-and-run-your-application-on-your-iphone-or-ipad":{"id":"tutorials/developing-for-mobile/ios/build-and-run-your-application-on-your-iphone-or-ipad","title":"Build and Run your Application on your iPhone or iPad","description":"In order to allow dotnet to sideload your application to your iphone or ipad you must first use Xcode to provision your device.","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/ios/index":{"id":"tutorials/developing-for-mobile/ios/index","title":"iOS","description":"In this section we describe how to setup you machine for iOS development. Then, if you have a Mac, how to run it on a simulator or an actual iPhone or iPad.","sidebar":"documentationSidebar"},"tutorials/developing-for-mobile/ios/setting-up-your-developer-environment-for-ios":{"id":"tutorials/developing-for-mobile/ios/setting-up-your-developer-environment-for-ios","title":"Setting up your developer environment for iOS","description":"Prerequisites","sidebar":"documentationSidebar"},"tutorials/index":{"id":"tutorials/index","title":"Tutorials","description":"","sidebar":"documentationSidebar"},"tutorials/music-store-app/add-and-layout-controls":{"id":"tutorials/music-store-app/add-and-layout-controls","title":"Add and Layout Controls","description":"Add and Layout some Controls","sidebar":"documentationSidebar"},"tutorials/music-store-app/add-content-to-dialog":{"id":"tutorials/music-store-app/add-content-to-dialog","title":"Add Content to Dialog","description":"Adding Content to the Dialog","sidebar":"documentationSidebar"},"tutorials/music-store-app/add-data-persistence":{"id":"tutorials/music-store-app/add-data-persistence","title":"Add Data Persistence","description":"Persisting Music Collection","sidebar":"documentationSidebar"},"tutorials/music-store-app/add-items-to-users-collection":{"id":"tutorials/music-store-app/add-items-to-users-collection","title":"Add Items to User Collection","description":"Adding Albums to the Users Collection","sidebar":"documentationSidebar"},"tutorials/music-store-app/creating-a-modern-looking-window":{"id":"tutorials/music-store-app/creating-a-modern-looking-window","title":"Creating a Modern looking Window","description":"Use Dark Mode and Add a little Acrylic","sidebar":"documentationSidebar"},"tutorials/music-store-app/creating-the-project":{"id":"tutorials/music-store-app/creating-the-project","title":"Create the Project","description":"Creating a New Project","sidebar":"documentationSidebar"},"tutorials/music-store-app/displaying-images":{"id":"tutorials/music-store-app/displaying-images","title":"Displaying Images","description":"Displaying Album Cover Images","sidebar":"documentationSidebar"},"tutorials/music-store-app/index":{"id":"tutorials/music-store-app/index","title":"Music Store App","description":"The completed project can be found at https://github.com/AvaloniaUI/Avalonia.MusicStore.","sidebar":"documentationSidebar"},"tutorials/music-store-app/load-data-at-startup":{"id":"tutorials/music-store-app/load-data-at-startup","title":"Load data at Startup","description":"Loading Albums on Startup","sidebar":"documentationSidebar"},"tutorials/music-store-app/opening-a-dialog":{"id":"tutorials/music-store-app/opening-a-dialog","title":"Opening a Dialog","description":"Opening a Dialog","sidebar":"documentationSidebar"},"tutorials/music-store-app/return-from-dialog":{"id":"tutorials/music-store-app/return-from-dialog","title":"Return from Dialog","description":"Returning from the Dialog","sidebar":"documentationSidebar"},"tutorials/music-store-app/searching-for-albums":{"id":"tutorials/music-store-app/searching-for-albums","title":"Searching for Albums","description":"Searching For Albums","sidebar":"documentationSidebar"},"tutorials/music-store-app/setup-development-environment":{"id":"tutorials/music-store-app/setup-development-environment","title":"Setup Development Environment","description":"Setting up your development environment","sidebar":"documentationSidebar"},"tutorials/music-store-app/summary":{"id":"tutorials/music-store-app/summary","title":"Summary","description":"In this tutorial we have shown how Avalonia can be used to create engaging desktop applications. Although we have covered a lot of ground, this is only a small amount of what Avalonia can do. With Avalonia your imagination really is the only limit.","sidebar":"documentationSidebar"},"tutorials/running-in-the-browser":{"id":"tutorials/running-in-the-browser","title":"Running in the Browser","description":"It is currently very early days and not ready for production, however if you want to test this exciting new feature please take the following steps.","sidebar":"documentationSidebar"},"tutorials/todo-list-app/adding-new-items":{"id":"tutorials/todo-list-app/adding-new-items","title":"Adding new Items","description":"When we originally created the TodoListView we added an \\"Add an item\\" button. It\'s time now to make that button do something. When the button is clicked we want to replace the list of items with a new view which will allow the user to enter the description of a new item.","sidebar":"documentationSidebar"},"tutorials/todo-list-app/creating-a-model-and-viewmodel":{"id":"tutorials/todo-list-app/creating-a-model-and-viewmodel","title":"Creating a Model & ViewModel","description":"Now that we\'ve got a basic view on-screen let\'s think about how we could display real data from a database or similar in it. The most obvious, and traditional way to do this would be to load the data in the view\'s constructor and create a CheckBox for each TODO item in code. However doing it this way has a few disadvantages:","sidebar":"documentationSidebar"},"tutorials/todo-list-app/creating-a-new-project":{"id":"tutorials/todo-list-app/creating-a-new-project","title":"Creating a new project","description":"Visual Studio","sidebar":"documentationSidebar"},"tutorials/todo-list-app/creating-a-view":{"id":"tutorials/todo-list-app/creating-a-view","title":"Creating a View","description":"Let\'s first create a view to display a list of TODO items together with a button to add a new item.","sidebar":"documentationSidebar"},"tutorials/todo-list-app/index":{"id":"tutorials/todo-list-app/index","title":"ToDo List App","description":"In this tutorial we\'re going to be creating a simple TODO application in Avalonia using the Model-View-ViewModel \\\\(MVVM\\\\) pattern.","sidebar":"documentationSidebar"},"tutorials/todo-list-app/locating-views":{"id":"tutorials/todo-list-app/locating-views","title":"Locating Views","description":"Hold on, rewind a second. An observant reader will have noticed something strange going on in the last section.","sidebar":"documentationSidebar"},"tutorials/todo-list-app/wiring-up-the-views":{"id":"tutorials/todo-list-app/wiring-up-the-views","title":"Wiring up the Views","description":"Now that we\'ve got the view models set up, we need to make our views use these view models. We do this by making use of Avalonia\'s data binding feature.","sidebar":"documentationSidebar"},"welcome":{"id":"welcome","title":"Welcome","description":"Welcome to the documentation for Avalonia, a cross-platform .NET framework for building beautiful, modern graphical user interfaces (GUIs). With Avalonia, you can create native applications for Windows, macOS, Linux, iOS, Android, and WebAssembly, all from a single codebase.","sidebar":"documentationSidebar"},"wpf-developer-tips/class-handlers":{"id":"wpf-developer-tips/class-handlers","title":"Class Handlers","description":"In WPF, class handlers for events can be added by calling EventManager.RegisterClassHandler. An example of registering a class handler in WPF might be:","sidebar":"documentationSidebar"},"wpf-developer-tips/datatemplates":{"id":"wpf-developer-tips/datatemplates","title":"DataTemplates","description":"As styles aren\'t stored in Resources, neither are DataTemplates. Instead, DataTemplates are placed in a DataTemplates collection on each control \\\\(and on Application\\\\):","sidebar":"documentationSidebar"},"wpf-developer-tips/dependencyproperty":{"id":"wpf-developer-tips/dependencyproperty","title":"DependencyProperty","description":"The Avalonia equivalent of DependencyProperty is StyledProperty, however Avalonia has a richer property system than WPF, and includes DirectProperty for turning standard CLR properties into Avalonia properties. The common base class of StyledProperty and DirectProperty is AvaloniaProperty.","sidebar":"documentationSidebar"},"wpf-developer-tips/grid":{"id":"wpf-developer-tips/grid","title":"Grid","description":"Column and row definitions can be specified in Avalonia using strings, avoiding the clunky syntax in WPF:","sidebar":"documentationSidebar"},"wpf-developer-tips/hierachicaldatatemplate":{"id":"wpf-developer-tips/hierachicaldatatemplate","title":"HierachicalDataTemplate","description":"WPF\'s HierarchicalDataTemplate is called TreeDataTemplate in Avalonia \\\\(as the former is difficult to type!\\\\). The two are almost entirely equivalent except that the ItemTemplate property is not present in Avalonia.","sidebar":"documentationSidebar"},"wpf-developer-tips/index":{"id":"wpf-developer-tips/index","title":"WPF Developer Tips","description":"Avalonia is in general very similar to WPF, but you will find differences. Here are the most common:","sidebar":"documentationSidebar"},"wpf-developer-tips/itemscontrol":{"id":"wpf-developer-tips/itemscontrol","title":"ItemsControl","description":"In WPF, ItemsControl and derived classes such as ListBox have two separate items properties Items which is same as WPF ItemsSource property.","sidebar":"documentationSidebar"},"wpf-developer-tips/propertychangedcallback":{"id":"wpf-developer-tips/propertychangedcallback","title":"PropertyChangedCallback","description":"Listening to changes on DependencyProperties in WPF can be complex. When you register a DependencyProperty you can supply a static PropertyChangedCallback but if you want to listen to changes from elsewhere things can get complicated and error-prone.","sidebar":"documentationSidebar"},"wpf-developer-tips/rendertransforms-and-rendertransformorigin":{"id":"wpf-developer-tips/rendertransforms-and-rendertransformorigin","title":"RenderTransforms and RenderTransformOrigin","description":"RenderTransformOrigins are different in WPF and Avalonia","sidebar":"documentationSidebar"},"wpf-developer-tips/styling":{"id":"wpf-developer-tips/styling","title":"Styling","description":"The most obvious difference from other XAML frameworks is that Avalonia uses a CSS-like styling system. Styles aren\'t stored in a Resources collection as in WPF, they are stored in a separate Styles collection:","sidebar":"documentationSidebar"},"wpf-developer-tips/tunnelling-events":{"id":"wpf-developer-tips/tunnelling-events","title":"Tunnelling Events","description":"Avalonia has tunnelling events but they\'re not exposed via separate Preview CLR event handlers. To subscribe to a tunnelling event you must call AddHandler with RoutingStrategies.Tunnel:","sidebar":"documentationSidebar"},"wpf-developer-tips/uielement-frameworkelement-and-control":{"id":"wpf-developer-tips/uielement-frameworkelement-and-control","title":"UIElement, FrameworkElement and Control","description":"WPF\'s UIElement and FrameworkElement are non-templated control base classes, which roughly equate to the Avalonia Control class. WPF\'s Control class on the other hand is a templated control - Avalonia\'s equivalent of this is TemplatedControl.","sidebar":"documentationSidebar"}}}')}}]);