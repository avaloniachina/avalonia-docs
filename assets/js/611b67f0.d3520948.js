"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[11989],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?o.createElement(h,r(r({ref:t},s),{},{components:n})):o.createElement(h,r({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,r[1]=l;for(var p=2;p<i;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},26741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(87462),a=(n(67294),n(3905));const i={description:"CONCEPTS"},r="The View Locator",l={unversionedId:"concepts/view-locator",id:"concepts/view-locator",title:"The View Locator",description:"CONCEPTS",source:"@site/docs/concepts/view-locator.md",sourceDirName:"concepts",slug:"/concepts/view-locator",permalink:"/avalonia-docs/docs/next/concepts/view-locator",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/view-locator.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS"},sidebar:"documentationSidebar",previous:{title:"The TopLevel",permalink:"/avalonia-docs/docs/next/concepts/toplevel"},next:{title:"Deployment",permalink:"/avalonia-docs/docs/next/deployment/"}},c={},p=[{value:"How it works",id:"how-it-works",level:2},{value:"Customizing the View Locator",id:"customizing-the-view-locator",level:2},{value:"Using the View Locator",id:"using-the-view-locator",level:2}],s={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-view-locator"},"The View Locator"),(0,a.kt)("p",null,"While the use of the View Locator comes as part of the default templates, it's important to note that it's not a mandatory requirement. It's an optional tool provided to help you structure your Avalonia application using the Model-View-ViewModel (MVVM) design pattern."),(0,a.kt)("p",null,"The View Locator is a mechanism in Avalonia that is used to resolve the view (user interface) that corresponds to a specific ViewModel. This is a core part of the MVVM (Model-View-ViewModel) pattern, which is a design pattern that separates the development of the graphical user interface from the development of the business logic or back-end logic."),(0,a.kt)("h2",{id:"how-it-works"},"How it works"),(0,a.kt)("p",null,'The View Locator uses naming conventions to map ViewModel types to view types. By default, it replaces every occurrence of the string "ViewModel" within the fully-qualified ViewModel type name with "View".'),(0,a.kt)("p",null,"For example, given a ViewModel named ",(0,a.kt)("inlineCode",{parentName:"p"},"MyApplication.ViewModels.ExampleViewModel"),", the View Locator will look for a View named ",(0,a.kt)("inlineCode",{parentName:"p"},"MyApplication.Views.ExampleView"),"."),(0,a.kt)("p",null,"The View Locator is typically used in conjunction with the ",(0,a.kt)("inlineCode",{parentName:"p"},"DataContext")," property, which is used to link a view to its ViewModel."),(0,a.kt)("p",null,"Here's a simple usage example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cs"},'public class ViewLocator : IDataTemplate\n{\n    public bool SupportsRecycling => false;\n\n    public Control Build(object data)\n    {\n        var name = data.GetType().FullName.Replace("ViewModel", "View");\n        var type = Type.GetType(name);\n\n        if (type != null)\n        {\n            return (Control)Activator.CreateInstance(type);\n        }\n        else\n        {\n            return new TextBlock { Text = "Not Found: " + name };\n        }\n    }\n\n    public bool Match(object data)\n    {\n        return data is ViewModelBase;\n    }\n}\n')),(0,a.kt)("p",null,"In this example, the View Locator is implemented as an ",(0,a.kt)("inlineCode",{parentName:"p"},"IDataTemplate"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"Build")," method creates the view for the ViewModel, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"Match")," method checks if the data object is a ViewModel that this locator knows how to handle. If you do not have a ",(0,a.kt)("inlineCode",{parentName:"p"},"ViewModelBase")," class, at a minimum your ViewModel must implement ",(0,a.kt)("inlineCode",{parentName:"p"},"INotifyPropertyChanged"),", and the comparison in ",(0,a.kt)("inlineCode",{parentName:"p"},"Match")," should be changed accordingly. "),(0,a.kt)("h2",{id:"customizing-the-view-locator"},"Customizing the View Locator"),(0,a.kt)("p",null,"You can customize the View Locator to use different conventions. For example, you might want to look for views in a different assembly, or use a different naming convention. To do this, you can implement your own View Locator by creating a class that implements the ",(0,a.kt)("inlineCode",{parentName:"p"},"IDataTemplate")," interface, and replace the default View Locator with your own."),(0,a.kt)("h2",{id:"using-the-view-locator"},"Using the View Locator"),(0,a.kt)("p",null,"By default, the View Locator is referenced in App.axaml as a DataTemplate, in the content of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Application.DataTemplates")," XAML tag. Ensure that its appropriate 'using' statement is in the ",(0,a.kt)("inlineCode",{parentName:"p"},"xmlns:local")," property of the Application root tag."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xaml"},'<Application xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             x:Class="LearningAvalonia.App"\n             xmlns:local="using:LearningAvalonia"\n             RequestedThemeVariant="Default">\n             \x3c!-- "Default" ThemeVariant follows system theme variant. "Dark" or "Light" are other available options. --\x3e\n    <Application.DataTemplates>\n        <local:ViewLocator />\n    </Application.DataTemplates>\n\n    <Application.Styles>\n        <FluentTheme />\n    </Application.Styles>\n</Application>\n')))}m.isMDXComponent=!0}}]);