"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[32052],{81128:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>m});var i=t(85893),a=t(11151);const o=t.p+"assets/images/command-3152cddc7d47d7e45638f382cb6790c8.gif",d={id:"how-to-bind-to-a-command-with-reactiveui",title:"How to Bind to a Command with ReactiveUI"},r="How to Bind to a Command with ReactiveUI",s={id:"guides/data-binding/how-to-bind-to-a-command-with-reactiveui",title:"How to Bind to a Command with ReactiveUI",description:"This guide shows you how to bind a view model method (that performs an action) to a control that can initiate an action in response to user interaction (for example, a button). This binding is defined in XAML using the Command attribute, for example:",source:"@site/docs/guides/data-binding/how-to-bind-to-a-command-with-reactiveui.md",sourceDirName:"guides/data-binding",slug:"/guides/data-binding/how-to-bind-to-a-command-with-reactiveui",permalink:"/avalonia-docs/docs/guides/data-binding/how-to-bind-to-a-command-with-reactiveui",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/data-binding/how-to-bind-to-a-command-with-reactiveui.md",tags:[],version:"current",frontMatter:{id:"how-to-bind-to-a-command-with-reactiveui",title:"How to Bind to a Command with ReactiveUI"},sidebar:"documentationSidebar",previous:{title:"How to Bind Can Execute",permalink:"/avalonia-docs/docs/guides/data-binding/how-to-bind-can-execute"},next:{title:"How to Bind to a Command without ReactiveUI",permalink:"/avalonia-docs/docs/guides/data-binding/how-to-bind-to-a-command-without-reactiveui"}},c={},m=[{value:"Command Parameter",id:"command-parameter",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"how-to-bind-to-a-command-with-reactiveui",children:"How to Bind to a Command with ReactiveUI"}),"\n",(0,i.jsxs)(n.p,{children:["This guide shows you how to bind a view model method (that performs an action) to a control that can initiate an action in response to user interaction (for example, a button). This binding is defined in XAML using the ",(0,i.jsx)(n.code,{children:"Command"})," attribute, for example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'<Window xmlns="https://github.com/avaloniaui">\n    ...\n  <StackPanel Margin="20">\n      <Button Command="{Binding ExampleCommand}">Run the example</Button>\n  </StackPanel>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This guide assumes that you are using the MVVM implementation pattern, and you have based your view model on the ",(0,i.jsx)(n.em,{children:"ReactiveUI"})," framework."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["To review the concept behind the MVVM implementation pattern, see ",(0,i.jsx)(n.a,{href:"../../concepts/the-mvvm-pattern/",children:"here"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["If you created your application using the ",(0,i.jsx)(n.strong,{children:"Avalonia MVVM Application"})," solution template then your solution will already contain the ",(0,i.jsx)(n.em,{children:"ReactiveUI"})," framework package, and you can reference it like this:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using ReactiveUI;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["A view model that can perform actions implements them through the ",(0,i.jsx)(n.code,{children:"ICommand"})," interface. The ",(0,i.jsx)(n.em,{children:"ReactiveUI"})," framework provides the ",(0,i.jsx)(n.code,{children:"ReactiveCommand"})," class that implements ",(0,i.jsx)(n.code,{children:"ICommand"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["For details of the definition of the ",(0,i.jsx)(n.code,{children:"ICommand"})," interface, see ",(0,i.jsx)(n.a,{href:"https://docs.microsoft.com/en-gb/dotnet/api/system.windows.input.icommand?view=netstandard-2.0",children:"here"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Command"})," attribute data binding will call the bound view model method through its ",(0,i.jsx)(n.code,{children:"ICommand.Execute"})," interface, when the bound control is activated. In this example: when the button is clicked."]}),"\n",(0,i.jsxs)(n.p,{children:["To create a view model with a ",(0,i.jsx)(n.code,{children:"ReactiveCommand"}),", follow this example:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"In your view model, declare a command, like this:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public ReactiveCommand<Unit, Unit> ExampleCommand { get; } \n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create a private method in the view model to perform the action."}),"\n",(0,i.jsx)(n.li,{children:"Initialize the reactive command, passing the name of the method that performs the action."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Your view model code will now look like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'namespace AvaloniaGuides.ViewModels\n{\n    public class MainWindowViewModel \n    {\n        public ReactiveCommand<Unit, Unit> ExampleCommand { get; }\n\n        public MainWindowViewModel()\n        {\n            ExampleCommand = ReactiveCommand.Create(PerformAction);\n        }\n        private void PerformAction()\n        {\n            Debug.WriteLine("The action was called.");\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Run the app and monitor the debug output."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"When the control bound to the reactive command is activated (in this example: when the button is clicked); then the private method to perform the action is called through the reactive command."}),"\n",(0,i.jsx)("img",{src:o,alt:""}),"\n",(0,i.jsx)(n.h2,{id:"command-parameter",children:"Command Parameter"}),"\n",(0,i.jsxs)(n.p,{children:["You will often need to pass an argument to the reactive command that is bound to a control. You can achieve this using the ",(0,i.jsx)(n.code,{children:"CommandParameter"})," attribute in the XAML. For example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'<Window xmlns="https://github.com/avaloniaui">\n   ...\n   <StackPanel Margin="20">\n      <Button Command="{Binding ExampleCommand}"\n              CommandParameter="From the button">Run the example</Button>\n   </StackPanel>\n</Window>\n'})}),"\n",(0,i.jsx)(n.p,{children:"You must now modify the view model so that the reactive commend expects a string parameter, the initialisation expects a string parameter, and the private method to perform the action expects a string parameter. As follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'namespace AvaloniaGuides.ViewModels\n{\n    public class MainWindowViewModel \n    {\n        public ReactiveCommand<string, Unit> ExampleCommand { get; }\n\n        public MainWindowViewModel()\n        {\n            ExampleCommand = ReactiveCommand.Create<string>(PerformAction);\n        }\n        private void PerformAction(string msg)\n        {\n            Debug.WriteLine($"The action was called. {msg}");\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note that no type conversion is carried out on the ",(0,i.jsx)(n.code,{children:"CommandParameter"})," attribute, so if you need to use a type parameter that is not a string, then you must define the type in the XAML. You will also need to use the expanded XAML syntax for the parameter."]}),"\n",(0,i.jsx)(n.p,{children:"For example to pass an integer parameter:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:sys="clr-namespace:System;assembly=mscorlib">\n ...   \n    <Button Command="{Binding ExampleIntegerCommand}">\n        <Button.CommandParameter>\n            <sys:Int32>42</sys:Int32>\n        </Button.CommandParameter>\n        What is the answer?\n    </Button>\n</Window>\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"danger",children:(0,i.jsx)(n.p,{children:"You will get an error if your parameter definitions are missing or not the correct type."})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"Like any other property, the command parameter can be bound."})})]})}function h(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>d});var i=t(67294);const a={},o=i.createContext(a);function d(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:d(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);