"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[84325],{35436:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var n=s(85893),o=s(11151);const r={},l="Styling",i={id:"get-started/wpf/styling",title:"Styling",description:"The most obvious difference from other XAML frameworks is in its styling system. There are two ways of styling controls in Avalonia:",source:"@site/docs/get-started/wpf/styling.md",sourceDirName:"get-started/wpf",slug:"/get-started/wpf/styling",permalink:"/avalonia-docs/docs/get-started/wpf/styling",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/get-started/wpf/styling.md",tags:[],version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Migrating from WPF",permalink:"/avalonia-docs/docs/get-started/wpf/"},next:{title:"Data Templates",permalink:"/avalonia-docs/docs/get-started/wpf/datatemplates"}},a={},c=[{value:"Example",id:"example",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"styling",children:"Styling"}),"\n",(0,n.jsx)(t.p,{children:"The most obvious difference from other XAML frameworks is in its styling system. There are two ways of styling controls in Avalonia:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["A ",(0,n.jsx)(t.a,{href:"../../basics/user-interface/styling",children:(0,n.jsx)(t.code,{children:"Style"})})," is a CSS-like style. Styles aren't stored in a ",(0,n.jsx)(t.code,{children:"Resources"})," collection as in WPF, they are stored in a separate ",(0,n.jsx)(t.code,{children:"Styles"})," collection."]}),"\n",(0,n.jsxs)(t.li,{children:["A ",(0,n.jsx)(t.a,{href:"../../basics/user-interface/styling/control-themes",children:(0,n.jsx)(t.code,{children:"ControlTheme"})})," is similar to a WPF ",(0,n.jsx)(t.code,{children:"Style"})," and is usually used to create themes for lookless controls"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsxs)(t.p,{children:["The following code shows a ",(0,n.jsx)(t.code,{children:"UserControl"})," which defines its own CSS-like style."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-markup",children:'<UserControl>\n    <UserControl.Styles>\n        \x3c!-- Make TextBlocks with the h1 style class have a font size of 24 points --\x3e\n        <Style Selector="TextBlock.h1">\n            <Setter Property="FontSize" Value="24"/>\n        </Style>\n    </UserControl.Styles>\n    <TextBlock Classes="h1">Header</TextBlock>\n<UserControl>\n'})})]})}function h(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>i,a:()=>l});var n=s(67294);const o={},r=n.createContext(o);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);