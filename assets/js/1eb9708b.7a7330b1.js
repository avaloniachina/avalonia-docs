"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[50828],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>h});var n=o(67294);function a(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){a(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,a=function(e,t){if(null==e)return{};var o,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(a[o]=e[o]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var o=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(o),d=a,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||r;return o?n.createElement(h,i(i({ref:t},c),{},{components:o})):n.createElement(h,i({ref:t},c))}));function h(e,t){var o=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<r;p++)i[p]=o[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}d.displayName="MDXCreateElement"},62427:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>y,frontMatter:()=>p,metadata:()=>u,toc:()=>d});var n=o(87462),a=(o(67294),o(3905));const r=o.p+"assets/images/image (10) (2)-fe5e10ec364e9c2e1945d246a8ad4228.png",i=o.p+"assets/images/image (3) (1)-98bdacece2a704364377dc015543d266.png",l=o.p+"assets/images/image (8) (2)-bb5a461766cfd0fe716c1180cef96975.png",s=o.p+"assets/images/image (8) (3)-a0606ad14f3818fdb5abd708d698244b.png",p={description:"CONCEPTS"},c="UI Composition",u={unversionedId:"concepts/ui-composition",id:"concepts/ui-composition",title:"UI Composition",description:"CONCEPTS",source:"@site/docs/concepts/ui-composition.md",sourceDirName:"concepts",slug:"/concepts/ui-composition",permalink:"/avalonia-docs/docs/next/concepts/ui-composition",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/ui-composition.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS"},sidebar:"documentationSidebar",previous:{title:"Themes",permalink:"/avalonia-docs/docs/next/concepts/themes"},next:{title:"Unhandled Exceptions",permalink:"/avalonia-docs/docs/next/concepts/unhandledexceptions"}},m={},d=[{value:"Windows and Built-in Controls",id:"windows-and-built-in-controls",level:2},{value:"Logical and Visual Trees",id:"logical-and-visual-trees",level:2},{value:"User Controls",id:"user-controls",level:2},{value:"Tutorial",id:"tutorial",level:2},{value:"Collection Controls",id:"collection-controls",level:2},{value:"Custom Controls",id:"custom-controls",level:2},{value:"Templated Controls",id:"templated-controls",level:2}],h={toc:d},f="wrapper";function y(e){let{components:t,...o}=e;return(0,a.kt)(f,(0,n.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ui-composition"},"UI Composition"),(0,a.kt)("p",null,"UI composition is the process you use to create the layouts that your apps require. It allows you to build a complex view from an arrangement of components. The advantages are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Encapsulation")," - reduce the complexity of each component by restricting its XAML and code to only what it needs, making your code more understandable and maintainable."," "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"Reuse")," - maintain consistent presentation and behaviour of repeated parts of your app."," ")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," makes it easy for you to use UI composition to create the layouts and functions that your apps require."," "),(0,a.kt)("p",null,"When you build an app using ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI"),", there are several different types of component to choose from:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Windows"),(0,a.kt)("li",{parentName:"ul"},"Built-in Controls"),(0,a.kt)("li",{parentName:"ul"},"User Controls"),(0,a.kt)("li",{parentName:"ul"},"Custom Controls"),(0,a.kt)("li",{parentName:"ul"},"Template Controls")),(0,a.kt)("h2",{id:"windows-and-built-in-controls"},"Windows and Built-in Controls"),(0,a.kt)("p",null,"A window in ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," is a basic unit of layout (for a windowing platform)."," "),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," contains a large number of built-in controls that will cover most of your UI requirements.   "," "),(0,a.kt)("img",{src:r,alt:""}),(0,a.kt)("p",null,"When you first meet ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI"),", you might place a single built-in control in the content zone of a window (above, left). This is the simplest form of UI composition: the window has the title of the app and usually some window state controls (depending on the target platform). The built-in control allows your app to receive some user input, or to present some output with layout and styling."),(0,a.kt)("p",null,"A slightly more complex app may require one of the built-in layout controls to arrange more than one other built-in control in the content zone of a window (above, right)."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"To see the full range of Avalonia UI built-in controls, see the reference section ",(0,a.kt)("a",{parentName:"p",href:"../reference/controls/"},"here"),".")),(0,a.kt)("h2",{id:"logical-and-visual-trees"},"Logical and Visual Trees"),(0,a.kt)("p",null,"Whatever arrangement of controls you use, ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," represents their relationships as a a tree structure, with the 'outermost' control as the root. So for example, the previous UI composition can be represented as the tree shown here:"),(0,a.kt)("img",{src:i,alt:""}),(0,a.kt)("p",null,"This is the ",(0,a.kt)("strong",{parentName:"p"},"logical control tree"),", and it represents the application controls (including the main window) in the hierarchy in which they are defined in the XAML. There are many systems in ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," that process the logical control tree and its companion the ",(0,a.kt)("strong",{parentName:"p"},"visual control tree"),"."," "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For more information on the concept of control trees, see ",(0,a.kt)("a",{parentName:"p",href:"/avalonia-docs/docs/next/concepts/control-trees"},"here"),".")),(0,a.kt)("h2",{id:"user-controls"},"User Controls"),(0,a.kt)("p",null,"User controls are the mainstay of UI composition in ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI"),"."),(0,a.kt)("img",{src:l,alt:""}),(0,a.kt)("p",null,"You can add a user control to the content zone of a main window, to represent a 'page view' (above, left).  This allows you to implement a more complex app with multiple pages; where the layout and function of each page is in its own user control (XAML and code) files.   "," "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For more information about how to implement a multi-page app using views, see the guide ",(0,a.kt)("a",{parentName:"p",href:"/avalonia-docs/docs/next/guides/development-guides/how-to-implement-multi-page-apps"},"here"),".")),(0,a.kt)("p",null,"Another use for a user control is as a component control (above, right). You might initially do this to reduce the complexity of a window or page view; but then you might also (perhaps later) reuse the resulting component on another page as well."," "),(0,a.kt)("h2",{id:"tutorial"},"Tutorial"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"In the 'To Do List App' tutorial you will learn about how to add user controls as page views; and how to use a repeating layout control to present a collection of items with data templates. Try the tutorial ",(0,a.kt)("a",{parentName:"p",href:"../tutorials/todo-list-app/"},"here"),".  "," ")),(0,a.kt)("h2",{id:"collection-controls"},"Collection Controls"),(0,a.kt)("p",null,"Another variation of UI composition is where you need to present a collection of items."," "),(0,a.kt)("img",{src:s,alt:""}),(0,a.kt)("p",null,"This scenario will use one of the built-in repeating controls, bound to a collection; together with a data template to represent the items in the collection."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For information about how to  TO DO")),(0,a.kt)("h2",{id:"custom-controls"},"Custom Controls"),(0,a.kt)("p",null,"In the unlikely scenario that you cannot find an ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," built-in control to cover your app's UI requirements, then you can 'roll-your-own' custom control from scratch. This allows you to define your own custom properties, events and methods; but it will require you to implement the drawing of the control presentation from scratch as well."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"To learn how to implement a custom control, see the guide ",(0,a.kt)("a",{parentName:"p",href:"../basics/user-interface/controls/creating-controls"},"here"),".")),(0,a.kt)("h2",{id:"templated-controls"},"Templated Controls"),(0,a.kt)("p",null,"A templated control uses the ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," ",(0,a.kt)("strong",{parentName:"p"},"styling")," system to substitute a tag in the UI layout with a"," "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For more information about the concepts behind the ",(0,a.kt)("em",{parentName:"p"},"Avalonia UI")," ",(0,a.kt)("strong",{parentName:"p"},"styling")," system, see ",(0,a.kt)("a",{parentName:"p",href:"../basics/user-interface/styling"},"here"),".")))}y.isMDXComponent=!0}}]);