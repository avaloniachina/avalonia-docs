"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[66612],{71376:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var t=i(85893),o=i(11151);const a={id:"how-to-use-design-time-data",title:"How To Use Design-time Data"},s="How To Use Design-time Data",r={id:"guides/implementation-guides/how-to-use-design-time-data",title:"How To Use Design-time Data",description:"Design-time data can help you style and position your UI layer without having to build the rest of the application. This is especially useful when you are trying to achieve a pixel-perfect presentation.",source:"@site/docs/guides/implementation-guides/how-to-use-design-time-data.md",sourceDirName:"guides/implementation-guides",slug:"/guides/implementation-guides/how-to-use-design-time-data",permalink:"/avalonia-docs/docs/guides/implementation-guides/how-to-use-design-time-data",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/implementation-guides/how-to-use-design-time-data.md",tags:[],version:"current",frontMatter:{id:"how-to-use-design-time-data",title:"How To Use Design-time Data"},sidebar:"documentationSidebar",previous:{title:"How To Use Live Preview",permalink:"/avalonia-docs/docs/guides/implementation-guides/ide-support"},next:{title:"Localizing using ResX",permalink:"/avalonia-docs/docs/guides/implementation-guides/localizing"}},l={},c=[];function d(e){const n={code:"code",em:"em",h1:"h1",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"how-to-use-design-time-data",children:"How To Use Design-time Data"}),"\n",(0,t.jsx)(n.p,{children:"Design-time data can help you style and position your UI layer without having to build the rest of the application. This is especially useful when you are trying to achieve a pixel-perfect presentation."}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.em,{children:"Avalonia UI"})," solution templates all add design-time code to the main window for you to copy."]}),"\n",(0,t.jsx)(n.p,{children:"This guide shows you how to use design-time data with the MVVM pattern to create a realistic UI with only mock data (that is without a data service layer)."}),"\n",(0,t.jsx)("img",{src:"/img/gitbook-import/assets/image (6).png",alt:""}),"\n",(0,t.jsx)(n.p,{children:"This implementation pattern is based on the concept of deriving a design version of any view model that you create, and adding mock data to its constructor. Your XAML files can then declare a design data context, and reference the design version of the view model to display mock data in the preview pane for you."}),"\n",(0,t.jsx)(n.p,{children:"In this example you are working on the UI for an appointment card to display an appointment view model, like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class AppointmentViewModel: ViewModelBase\n{\n    public string ServerName { get; set; } = null!;\n    public string ServiceTitle { get; set; } = null!;    \n    public decimal ServicePrice { get; set; }\n    public DateTime ServiceDateTime { get; set; }\n    public string Description { get; set; } = null!;   \n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"This code creates the design version of this view model:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'public class DesignAppointmentViewModel: AppointmentViewModel\n{\n    public DesignAppointmentViewModel()\n    {\n        ServerName = "John Price";\n        ServiceTitle = "Hair Cut and Beard Trim";\n        ServicePrice = (decimal)25.5;\n        ServiceDateTime = new DateTime(2023, 1, 3, 11, 15, 0);\n        Description = "Please allow 30 minutes.";\n    }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"To continue with this example: you are next working on a user control to present the appointment card. Firstly, you must first add a reference to the view models. Next check that you have set a suitable design width and/or height. Then you can add some XAML for the design data context, as shown:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             xmlns:vm="using:DesignTimeData.ViewModels"\n             mc:Ignorable="d" d:DesignWidth="400" \n             x:Class="DesignTimeData.Views.AppointmentView">\n   \n   <Design.DataContext>    \n       <vm:DesignAppointmentViewModel/>\n   </Design.DataContext>\n\n</UserControl>\n'})}),"\n",(0,t.jsx)(n.p,{children:"This means that when you start to write the XAML for the UI, you can see your progress in the preview pane. When completed, this example has XAML like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Border CornerRadius="10" Background="LightBlue"  Width="350" Margin="20">\n  <DockPanel Width="350" >\n      \n    <StackPanel Height="10"\n                    DockPanel.Dock="Bottom"\n                    IsVisible="{Binding !IsCancelVisible, }" >\n    </StackPanel>\n\n    <Button Margin="0 10"\n            HorizontalAlignment="Center"\n            DockPanel.Dock="Bottom"\n            ClickMode="Release"\n            Command="{Binding CancelAppointmentCommand}"\n            IsVisible="{Binding IsCancelVisible}">Cancel</Button>\n\n    <StackPanel DockPanel.Dock="Left" Margin="10 10 0 0" Width="200" >\n      <TextBlock Text="{Binding ServiceTitle}" FontWeight="Bold"/>\n      <TextBlock Text="{Binding ServerName, StringFormat=\'with {0}\'}"/>\n      <TextBlock Margin="0 5 0 0" \n                 Text="{Binding ServiceDateTime, StringFormat={}{0:dd MMM yyyy}}"/>\n      <TextBlock Text="{Binding ServiceDateTime, StringFormat={}{0:HH:mm}}"/>\n      <TextBlock Margin="0 5" FontSize="20" \n                 Text="{Binding ServicePrice, StringFormat={}{0:\xa30.00}}"/>\n      <TextBlock Text="{Binding Description, StringFormat={}{0:\xa30.00}}"/>\n    </StackPanel>\n\n    <Border DockPanel.Dock="Right"\n      Background="Gainsboro" CornerRadius="10"\n            Width="75" Height="75"\n            Margin="0 20 20 0">\n      <Image ToolTip.Tip="{Binding ServerName}" />\n    </Border>\n\n    <Rectangle/>\n\n  </DockPanel>\n</Border>\n'})}),"\n",(0,t.jsx)(n.p,{children:"The preview pane shows the completed UI design with the mock data:"}),"\n",(0,t.jsx)("img",{src:"/img/gitbook-import/assets/image (10).png",alt:""})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>r,a:()=>s});var t=i(67294);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);