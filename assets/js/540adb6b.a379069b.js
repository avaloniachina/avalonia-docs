"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[58644],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},b=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),b=a,g=p["".concat(s,".").concat(b)]||p[b]||u[b]||r;return n?o.createElement(g,i(i({ref:t},d),{},{components:n})):o.createElement(g,i({ref:t},d))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}b.displayName="MDXCreateElement"},75787:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const r={id:"binding-from-code",title:"How To Bind from Code"},i="How To Bind from Code",l={unversionedId:"guides/data-binding/binding-from-code",id:"guides/data-binding/binding-from-code",title:"How To Bind from Code",description:"Binding from code in Avalonia works somewhat differently to WPF/UWP. At the low level, Avalonia's binding system is based on Reactive Extensions' IObservable which is then built upon by XAML bindings (which can also be instantiated in code).",source:"@site/docs/guides/data-binding/binding-from-code.md",sourceDirName:"guides/data-binding",slug:"/guides/data-binding/binding-from-code",permalink:"/avalonia-docs/docs/next/guides/data-binding/binding-from-code",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/data-binding/binding-from-code.md",tags:[],version:"current",frontMatter:{id:"binding-from-code",title:"How To Bind from Code"},sidebar:"documentationSidebar",previous:{title:"How to Bind to a Collection",permalink:"/avalonia-docs/docs/next/guides/data-binding/how-to-bind-to-a-collection"},next:{title:"How to Create a Custom Data Binding Converter",permalink:"/avalonia-docs/docs/next/guides/data-binding/how-to-create-a-custom-data-binding-converter"}},s={},c=[{value:"Subscribing to Changes to a Property",id:"subscribing-to-changes-to-a-property",level:2},{value:"Binding to an observable",id:"binding-to-an-observable",level:2},{value:"Setting a binding in an object initializer",id:"setting-a-binding-in-an-object-initializer",level:2},{value:"Transforming binding values",id:"transforming-binding-values",level:2},{value:"Using XAML bindings from code",id:"using-xaml-bindings-from-code",level:2},{value:"Subscribing to a Property on Any Object",id:"subscribing-to-a-property-on-any-object",level:2},{value:"Binding to <code>INotifyPropertyChanged</code> objects",id:"binding-to-inotifypropertychanged-objects",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-bind-from-code"},"How To Bind from Code"),(0,a.kt)("p",null,"Binding from code in Avalonia works somewhat differently to WPF/UWP. At the low level, Avalonia's binding system is based on Reactive Extensions' ",(0,a.kt)("inlineCode",{parentName:"p"},"IObservable")," which is then built upon by XAML bindings (which can also be instantiated in code)."),(0,a.kt)("h2",{id:"subscribing-to-changes-to-a-property"},"Subscribing to Changes to a Property"),(0,a.kt)("p",null,"You can subscribe to changes on a property by calling the ",(0,a.kt)("inlineCode",{parentName:"p"},"GetObservable")," method. This returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"IObservable<T>")," which can be used to listen for changes to the property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"var textBlock = new TextBlock();\nvar text = textBlock.GetObservable(TextBlock.TextProperty);\n")),(0,a.kt)("p",null,"Each property that can be subscribed to has a static readonly field called ",(0,a.kt)("inlineCode",{parentName:"p"},"[PropertyName]Property")," which is passed to ",(0,a.kt)("inlineCode",{parentName:"p"},"GetObservable")," in order to subscribe to the property's changes."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"IObservable")," (part of Reactive Extensions, or rx for short) is out of scope for this guide, but here's an example which uses the returned observable to print a message with the changing property values to the console:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'var textBlock = new TextBlock();\nvar text = textBlock.GetObservable(TextBlock.TextProperty);\ntext.Subscribe(value => Console.WriteLine(value + " Changed"));\n')),(0,a.kt)("p",null,"When the returned observable is subscribed, it will return the current value of the property immediately and then push a new value each time the property changes. If you don't want the current value, you can use the rx ",(0,a.kt)("inlineCode",{parentName:"p"},"Skip")," operator:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"var text = textBlock.GetObservable(TextBlock.TextProperty).Skip(1);\n")),(0,a.kt)("h2",{id:"binding-to-an-observable"},"Binding to an observable"),(0,a.kt)("p",null,"You can bind a property to an observable using the ",(0,a.kt)("inlineCode",{parentName:"p"},"AvaloniaObject.Bind")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'// We use an Rx Subject here so we can push new values using OnNext\nvar source = new Subject<string>();\nvar textBlock = new TextBlock();\n\n// Bind TextBlock.Text to source\nvar subscription = textBlock.Bind(TextBlock.TextProperty, source);\n\n// Set textBlock.Text to "hello"\nsource.OnNext("hello");\n// Set textBlock.Text to "world!"\nsource.OnNext("world!");\n\n// Terminate the binding\nsubscription.Dispose();\n')),(0,a.kt)("p",null,"Notice that the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bind")," method returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"IDisposable")," which can be used to terminate the binding. If you never call this, then then binding will automatically terminate when the observable finishes via ",(0,a.kt)("inlineCode",{parentName:"p"},"OnCompleted")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"OnError"),"."),(0,a.kt)("h2",{id:"setting-a-binding-in-an-object-initializer"},"Setting a binding in an object initializer"),(0,a.kt)("p",null,"It is often useful to set up bindings in object initializers. You can do this using the indexer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"var source = new Subject<string>();\nvar textBlock = new TextBlock\n{\n    Foreground = Brushes.Red,\n    MaxWidth = 200,\n    [!TextBlock.TextProperty] = source.ToBinding(),\n};\n")),(0,a.kt)("p",null,"Using this method you can also easily bind a property on one control to a property on another:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"var textBlock1 = new TextBlock();\nvar textBlock2 = new TextBlock\n{\n    Foreground = Brushes.Red,\n    MaxWidth = 200,\n    [!TextBlock.TextProperty] = textBlock1[!TextBlock.TextProperty],\n};\n")),(0,a.kt)("p",null,"Of course the indexer can be used outside object initializers too:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"textBlock2[!TextBlock.TextProperty] = textBlock1[!TextBlock.TextProperty];\n")),(0,a.kt)("p",null,"The only downside of this syntax is that no ",(0,a.kt)("inlineCode",{parentName:"p"},"IDisposable")," is returned. If you need to manually terminate the binding then you should use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Bind")," method."),(0,a.kt)("h2",{id:"transforming-binding-values"},"Transforming binding values"),(0,a.kt)("p",null,"Because we're working with observables, we can easily transform the values we're binding!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'var source = new Subject<string>();\nvar textBlock = new TextBlock\n{\n    Foreground = Brushes.Red,\n    MaxWidth = 200,\n    [!TextBlock.TextProperty] = source.Select(x => "Hello " + x).ToBinding(),\n};\n')),(0,a.kt)("h2",{id:"using-xaml-bindings-from-code"},"Using XAML bindings from code"),(0,a.kt)("p",null,"Sometimes when you want the additional features that XAML bindings provide, it's easier to use XAML bindings from code. For example, using only observables you could bind to a property on ",(0,a.kt)("inlineCode",{parentName:"p"},"DataContext")," like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"var textBlock = new TextBlock();\nvar viewModelProperty = textBlock.GetObservable(TextBlock.DataContext)\n    .OfType<MyViewModel>()\n    .Select(x => x?.Name);\ntextBlock.Bind(TextBlock.TextProperty, viewModelProperty);\n")),(0,a.kt)("p",null,"However, it might be preferable to use a XAML binding in this case:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'var textBlock = new TextBlock\n{\n    [!TextBlock.TextProperty] = new Binding("Name")\n};\n')),(0,a.kt)("p",null,"Or, if you need an ",(0,a.kt)("inlineCode",{parentName:"p"},"IDisposable")," to terminate the binding:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},'var textBlock = new TextBlock();\nvar subscription = textBlock.Bind(TextBlock.TextProperty, new Binding("Name"));\n\nsubscription.Dispose();\n')),(0,a.kt)("h2",{id:"subscribing-to-a-property-on-any-object"},"Subscribing to a Property on Any Object"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"GetObservable")," method returns an observable that tracks changes to a property on a single instance. However, if you're writing a control you may want to implement an ",(0,a.kt)("inlineCode",{parentName:"p"},"OnPropertyChanged")," method which isn't tied to an instance of an object."),(0,a.kt)("p",null,"To do this you can subscribe to ",(0,a.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia/AvaloniaProperty/65237C52"},(0,a.kt)("inlineCode",{parentName:"a"},"AvaloniaProperty.Changed"))," which is an observable which fires ",(0,a.kt)("em",{parentName:"p"},"every time the property is changed on any instance"),"."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"In WPF this is done by passing a static ",(0,a.kt)("inlineCode",{parentName:"p"},"PropertyChangedCallback")," to the ",(0,a.kt)("inlineCode",{parentName:"p"},"DependencyProperty")," registration method, but this only allows the control author to register a property changed callback.")),(0,a.kt)("p",null,"In addition there is an ",(0,a.kt)("inlineCode",{parentName:"p"},"AddClassHandler")," extension method which can automatically route the event to a method on your control."),(0,a.kt)("p",null,"For example if you want to listen to changes to your control's ",(0,a.kt)("inlineCode",{parentName:"p"},"Foo")," property you'd do it like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"static MyControl()\n{\n    FooProperty.Changed.AddClassHandler<MyControl>(FooChanged);\n}\n\nprivate static void FooChanged(MyControl sender, AvaloniaPropertyChangedEventArgs e)\n{\n    // The 'e' parameter describes what's changed.\n}\n")),(0,a.kt)("h2",{id:"binding-to-inotifypropertychanged-objects"},"Binding to ",(0,a.kt)("inlineCode",{parentName:"h2"},"INotifyPropertyChanged")," objects"),(0,a.kt)("p",null,"Binding to objects that implements ",(0,a.kt)("inlineCode",{parentName:"p"},"INotifyPropertyChanged")," is also available."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"var textBlock = new TextBlock();\n\nvar binding = new Binding \n{ \n    Source = someObjectImplementingINotifyPropertyChanged, \n    Path = nameof(someObjectImplementingINotifyPropertyChanged.MyProperty)\n}; \n\ntextBlock.Bind(TextBlock.TextProperty, binding);\n")))}u.isMDXComponent=!0}}]);