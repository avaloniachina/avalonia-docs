"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[22264],{54071:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>a});var o=n(85893),t=n(11151);const l={description:"CONCEPTS"},c="Pseudo Classes",i={id:"concepts/pseudo-classes",title:"Pseudo Classes",description:"CONCEPTS",source:"@site/docs/concepts/pseudo-classes.md",sourceDirName:"concepts",slug:"/concepts/pseudo-classes",permalink:"/avalonia-docs/docs/concepts/pseudo-classes",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/pseudo-classes.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS"},sidebar:"documentationSidebar",previous:{title:"Binding to Sorted/Filtered Data",permalink:"/avalonia-docs/docs/concepts/reactiveui/binding-to-sorted-filtered-list"},next:{title:"Services",permalink:"/avalonia-docs/docs/concepts/services/"}},d={},a=[{value:"Usage",id:"usage",level:2},{value:"Custom Pseudo Classes",id:"custom-pseudo-classes",level:2}];function r(e){const s={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h1,{id:"pseudo-classes",children:"Pseudo Classes"}),"\n",(0,o.jsx)(s.p,{children:"Pseudo classes in Avalonia, similar to those in CSS, are keywords added to a selector that specify a special state of the selected element(s). They can be used to style controls differently based on certain conditions. For example, a button could be styled differently when it's being pressed, or a TextBox can have a different style when it is disabled."}),"\n",(0,o.jsx)(s.p,{children:"Avalonia supports a number of built-in pseudo classes, and controls can define their own."}),"\n",(0,o.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(s.p,{children:"To use pseudo classes, you append a colon (:) and the pseudo class to the selector. Here's an example:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-xml",children:'<Button Content="Click Me!">\n  <Button.Styles>\n    // highlight-start\n    <Style Selector="Button:pointerover">\n    // highlight-end\n      <Setter Property="Background" Value="Red"/>\n    </Style>\n  </Button.Styles>\n</Button>\n'})}),"\n",(0,o.jsxs)(s.p,{children:["In this example, the button's background will change to red when the pointer is over it, thanks to the ",(0,o.jsx)(s.code,{children:"pointerover"})," pseudo class."]}),"\n",(0,o.jsx)(s.p,{children:"##\xa0Built-in Pseudo Classes\nSome of the built-in pseudo classes include:"}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:":pointerover"}),": The mouse pointer is over the control."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:":pressed"}),": The control is being pressed."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:":disabled"}),": The control is disabled."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:":focus"}),": The control has input focus."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:":watermark"}),": For TextBox control, when it's displaying a watermark."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:":checked"}),": For checkable controls, like CheckBox or MenuItem, when it's checked."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:":indeterminate"}),": For controls like CheckBox, when it's in the indeterminate state."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:":valid"}),": For input controls, when the input is valid."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:":invalid"}),": For input controls, when the input is invalid."]}),"\n"]}),"\n",(0,o.jsx)(s.p,{children:"You can combine pseudo classes with type selectors and class selectors to create a wide range of effects."}),"\n",(0,o.jsx)(s.h2,{id:"custom-pseudo-classes",children:"Custom Pseudo Classes"}),"\n",(0,o.jsxs)(s.p,{children:["Controls can define their own pseudo classes for specific behaviors. To define a pseudo class, a control typically creates a static readonly field of type ",(0,o.jsx)(s.code,{children:"PseudoClass"})," and calls ",(0,o.jsx)(s.code,{children:"PseudoClasses.Set()"})," to enable the pseudo class and ",(0,o.jsx)(s.code,{children:"PseudoClasses.Remove()"})," to disable it."]}),"\n",(0,o.jsxs)(s.p,{children:["For example, a custom ",(0,o.jsx)(s.code,{children:":custom"})," pseudo class might be defined as follows:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-cs",children:'public static readonly PseudoClass CustomPseudoClass = PseudoClass.Parse(":custom");\n\n// to enable\nPseudoClasses.Set(CustomPseudoClass);\n\n// to disable\nPseudoClasses.Remove(CustomPseudoClass);\n'})}),"\n",(0,o.jsx)(s.p,{children:"This allows developers to add more expressiveness and control to their styles, tailoring styles to very specific control states."})]})}function u(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(r,{...e})}):r(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>i,a:()=>c});var o=n(67294);const t={},l=o.createContext(t);function c(e){const s=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),o.createElement(l.Provider,{value:s},e.children)}}}]);