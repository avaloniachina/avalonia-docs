"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[94739],{99762:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(85893),a=t(11151);const i=t.p+"assets/images/treedatagrid2-53de736e596522b6a39f5d3145dfd001.gif",o={description:"REFERENCE - Built-in Controls"},s="Flat Tree Data Grid",l={id:"reference/controls/detailed-reference/treedatagrid/creating-a-flat-treedatagrid",title:"Flat Tree Data Grid",description:"REFERENCE - Built-in Controls",source:"@site/docs/reference/controls/detailed-reference/treedatagrid/creating-a-flat-treedatagrid.md",sourceDirName:"reference/controls/detailed-reference/treedatagrid",slug:"/reference/controls/detailed-reference/treedatagrid/creating-a-flat-treedatagrid",permalink:"/avalonia-docs/docs/reference/controls/detailed-reference/treedatagrid/creating-a-flat-treedatagrid",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/reference/controls/detailed-reference/treedatagrid/creating-a-flat-treedatagrid.md",tags:[],version:"current",frontMatter:{description:"REFERENCE - Built-in Controls"},sidebar:"documentationSidebar",previous:{title:"Tree Data Grid",permalink:"/avalonia-docs/docs/reference/controls/detailed-reference/treedatagrid/"},next:{title:"Hierarchical Tree Data Grid",permalink:"/avalonia-docs/docs/reference/controls/detailed-reference/treedatagrid/creating-a-hierarchical-treedatagrid"}},d={},c=[{value:"Example",id:"example",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"flat-tree-data-grid",children:"Flat Tree Data Grid"}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsxs)(n.p,{children:["In this example the view model contains an observable collection that is filled with data and then used to create a ",(0,r.jsx)(n.code,{children:"FlatTreeDataGridSource"})," property to bind to the source of the tree data grid. The items of the grid are class ",(0,r.jsx)(n.code,{children:"Person"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'<TreeDataGrid Source="{Binding PersonSource}"/>\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"title='C# View Model'",children:'using Avalonia.Controls.Models.TreeDataGrid;\nusing Avalonia.Controls;\nusing AvaloniaControls.Models;\nusing System.Collections.ObjectModel;\nusing System.Linq;\n\nnamespace AvaloniaControls.ViewModels\n{\n    public class MainWindowViewModel : ViewModelBase\n    {\n        private ObservableCollection<Person> _people;\n\n        public FlatTreeDataGridSource<Person> PersonSource { get; }\n\n        public MainWindowViewModel()\n        {\n            _people = new ObservableCollection<Person>()\n            {\n                new Person ("Eleanor", "Pope", 32 ),\n                new Person ("Jeremy", "Navarro", 74 ),\n                new Person ( "Lailah ", "Velazquez", 16 ),\n                new Person ( "Jazmine", "Schroeder", 52 ),\n            };\n                          \n            PersonSource = new FlatTreeDataGridSource<Person>(_people)\n            {\n                Columns =\n                {\n                    new TextColumn<Person, string>\n                        ("First Name", x => x.FirstName),\n                    new TextColumn<Person, string>\n                        ("Last Name", x => x.LastName),\n                    new TextColumn<Person, int>\n                        ("Age", x => x.Age),\n                },\n            };\n        }\n    }\n}\n\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csharp",metastring:"title='C# Item Class'",children:"public class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public int Age { get; set; }\n\n    public Person(string firstName, string lastName, int age)\n    {\n        FirstName = firstName;\n        LastName = lastName;\n        Age = age;\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The data source also defines how to map the data model to rows and columns in the tree data grid. Because this example displays flat data, the data source is using a ",(0,r.jsx)(n.code,{children:"FlatTreeDataGridSource<Person>"})," property on the view model."]}),"\n",(0,r.jsxs)(n.p,{children:["There are three columns defined with the ",(0,r.jsx)(n.code,{children:"TextColumn"})," class. Each takes a lambda to return the column value."]}),"\n",(0,r.jsx)("img",{src:i,alt:""})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var r=t(67294);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);