"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[49168],{28409:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var o=e(85893),a=e(11151);const i={id:"how-to-bind-to-a-task-result",title:"How to Bind to a Task Result"},s="How to Bind to a Task Result",d={id:"guides/data-binding/how-to-bind-to-a-task-result",title:"How to Bind to a Task Result",description:"Content in preparation.",source:"@site/docs/guides/data-binding/how-to-bind-to-a-task-result.md",sourceDirName:"guides/data-binding",slug:"/guides/data-binding/how-to-bind-to-a-task-result",permalink:"/avalonia-docs/docs/guides/data-binding/how-to-bind-to-a-task-result",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/data-binding/how-to-bind-to-a-task-result.md",tags:[],version:"current",frontMatter:{id:"how-to-bind-to-a-task-result",title:"How to Bind to a Task Result"},sidebar:"documentationSidebar",previous:{title:"How to Bind to a Command without ReactiveUI",permalink:"/avalonia-docs/docs/guides/data-binding/how-to-bind-to-a-command-without-reactiveui"},next:{title:"How To Bind to an Observable",permalink:"/avalonia-docs/docs/guides/data-binding/how-to-bind-to-an-observable"}},r={},l=[{value:"Example 2: Binding to a task",id:"example-2-binding-to-a-task",level:2}];function c(t){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"how-to-bind-to-a-task-result",children:"How to Bind to a Task Result"}),"\n",(0,o.jsx)(n.p,{children:"Content in preparation."}),"\n",(0,o.jsx)(n.h2,{id:"example-2-binding-to-a-task",children:"Example 2: Binding to a task"}),"\n",(0,o.jsxs)(n.p,{children:["If you need to do some heavy work to load the content of a property you can bind to the result of an ",(0,o.jsx)(n.code,{children:"async Task<TResult>"})]}),"\n",(0,o.jsx)(n.p,{children:"Consider you have the following view model which generates some text in a long running process:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public Task<string> MyAsyncText => GetTextAsync();\n\nprivate async Task<string> GetTextAsync()\n{\n  await Task.Delay(1000); // The delay is just for demonstration purpose\n  return "Hello from async operation";\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can bind to the result in the following way:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-markup",children:"<TextBlock Text=\"{Binding MyAsyncText^, FallbackValue='Wait a second'}\" />\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Note: You can use ",(0,o.jsx)(n.code,{children:"FallbackValue"})," to display some loading indicator."]})})]})}function u(t={}){const{wrapper:n}={...(0,a.a)(),...t.components};return n?(0,o.jsx)(n,{...t,children:(0,o.jsx)(c,{...t})}):c(t)}},11151:(t,n,e)=>{e.d(n,{Z:()=>d,a:()=>s});var o=e(67294);const a={},i=o.createContext(a);function s(t){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function d(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),o.createElement(i.Provider,{value:n},t.children)}}}]);