"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[86239],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,m=d["".concat(l,".").concat(h)]||d[h]||p[h]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},99575:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const o=n.p+"assets/images/long1-be25e0feedca147e7c0a93bf4c0e01ca.gif",i=n.p+"assets/images/long2-0d2e191c35c76a500d33619dda3832a4.gif",s={id:"accessing-the-ui-thread",title:"How To Access the UI Thread"},l="How To Access the UI Thread",c={unversionedId:"guides/development-guides/accessing-the-ui-thread",id:"guides/development-guides/accessing-the-ui-thread",title:"How To Access the UI Thread",description:"This guide will show you how to access the UI thread in your Avalonia UI application.&#x20;",source:"@site/docs/guides/development-guides/accessing-the-ui-thread.md",sourceDirName:"guides/development-guides",slug:"/guides/development-guides/accessing-the-ui-thread",permalink:"/avalonia-docs/docs/next/guides/development-guides/accessing-the-ui-thread",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/development-guides/accessing-the-ui-thread.md",tags:[],version:"current",frontMatter:{id:"accessing-the-ui-thread",title:"How To Access the UI Thread"},sidebar:"documentationSidebar",previous:{title:"Add a Custom Control Class",permalink:"/avalonia-docs/docs/next/guides/custom-controls/add-custom-control-class"},next:{title:"Data Validation",permalink:"/avalonia-docs/docs/next/guides/development-guides/data-validation"}},u={},d=[{value:"Dispatcher Priority",id:"dispatcher-priority",level:2},{value:"Example",id:"example",level:2},{value:"More Information",id:"more-information",level:2}],p={toc:d},h="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"how-to-access-the-ui-thread"},"How To Access the UI Thread"),(0,r.kt)("p",null,"This guide will show you how to access the UI thread in your ",(0,r.kt)("em",{parentName:"p"},"Avalonia UI")," application."," "),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Avalonia UI")," applications have one main thread, and this handles the UI. When you have a process that is intensive, or long running, then you will usually opt to run it on a different thread. Then you may have scenarios where you want to update them main UI thread (for example with progress updates). "," "),(0,r.kt)("p",null,"A dispatcher provides services for managing work items on any specific thread. In ",(0,r.kt)("em",{parentName:"p"},"Avalonia UI")," you will already have the dispatcher that handles the UI thread. When you need to update the UI from a different thread, you access it through this dispatcher, as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"Dispatcher.UIThread\n")),(0,r.kt)("p",null,"You can use either the ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," method or the ",(0,r.kt)("inlineCode",{parentName:"p"},"InvokeAsync")," method to run a process on the UI thread."," "),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," when you just want to start a job, but you do not need to wait for the job to be finished, and you do not need the result: this is the 'fire-and-forget' dispatcher method."," "),(0,r.kt)("p",null,"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"InvokeAsync")," when you need to wait for the result, and potentially want to receive the result."," "),(0,r.kt)("h2",{id:"dispatcher-priority"},"Dispatcher Priority"),(0,r.kt)("p",null,"Both of the above methods have a dispatcher priority parameter. You can use this with the ",(0,r.kt)("inlineCode",{parentName:"p"},"DispatcherPriority")," enumeration to specify the queue priority that the given job should be given."," "),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For the possible values of the ",(0,r.kt)("inlineCode",{parentName:"p"},"DispatcherPriority")," enumeration, see ",(0,r.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia.Threading/DispatcherPriority/"},"here"),".")),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"In this example a text block is used to show the result of a long running task, and a button is used to start the work. In this version, the fire-and-forget ",(0,r.kt)("inlineCode",{parentName:"p"},"Post")," method is used:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title='XAML'",title:"'XAML'"},'<StackPanel Margin="20">    \n  <Button x:Name="RunButton" Content="Run long running process" \n          Click="ButtonClickHandler" />\n  <TextBlock x:Name="ResultText" Margin="10"/>\n</StackPanel>\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='Task C#'",title:"'Task","C#'":!0},'using System.Threading.Tasks;\n...\nprivate async Task LongRunningTask()\n{\n    this.FindControl<Button>("RunButton").IsEnabled = false;\n    this.FindControl<TextBlock>("ResultText").Text = "I\'m working ...";\n    await Task.Delay(5000);\n    this.FindControl<TextBlock>("ResultText").Text = "Done";\n    this.FindControl<Button>("RunButton").IsEnabled = true;\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='Post C#'",title:"'Post","C#'":!0},"private void ButtonClickHandler(object sender, RoutedEventArgs e)\n{\n    // Start the job and return immediately\n    Dispatcher.UIThread.Post(() => LongRunningTask(), \n                                            DispatcherPriority.Background);\n}\n")),(0,r.kt)("img",{src:o,alt:""}),(0,r.kt)("p",null,"Notice that because the long running task is executed on its own thread, the UI does not lose responsiveness."),(0,r.kt)("p",null,"To get a result from the long running task, the XAML is the same, but this version uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"InvokeAsync"),"method:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title='XAML'",title:"'XAML'"},'<StackPanel Margin="20">    \n  <Button x:Name="RunButton" Content="Run long running process" \n          Click="ButtonClickHandler" />\n  <TextBlock x:Name="ResultText" Margin="10" />\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='Task C#'",title:"'Task","C#'":!0},'using System.Threading.Tasks;\n...\nprivate async Task<string> LongRunningTask()\n{\n    this.FindControl<Button>("RunButton").IsEnabled = false;\n    this.FindControl<TextBlock>("ResultText").Text = "I\'m working ...";\n    await Task.Delay(5000);    \n    return "Success";\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='InvokeAsync C#'",title:"'InvokeAsync","C#'":!0},'private async void ButtonClickHandler(object sender, RoutedEventArgs e)\n{\n    var result = await Dispatcher.UIThread.InvokeAsync(LongRunningTask, \n                                    DispatcherPriority.Background);\n    //result returns here\n    this.FindControl<TextBlock>("ResultText").Text = result;\n    this.FindControl<Button>("RunButton").IsEnabled = true;\n}\n')),(0,r.kt)("img",{src:i,alt:""}),(0,r.kt)("h2",{id:"more-information"},"More Information"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"For the complete API documentation about the dispatcher, see ",(0,r.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia.Threading/Dispatcher/"},"here"),".")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"View the source code on ",(0,r.kt)("em",{parentName:"p"},"GitHub")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Threading/Dispatcher.cs"},(0,r.kt)("inlineCode",{parentName:"a"},"Dispatcher.cs")))))}m.isMDXComponent=!0}}]);