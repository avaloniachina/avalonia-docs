"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[20403],{50573:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>t});var o=s(85893),i=s(11151);const l={id:"upgrade-from-0.10",title:"Upgrading from 0.10"},a=void 0,r={id:"stay-up-to-date/upgrade-from-0.10",title:"Upgrading from 0.10",description:"Avalonia 11 introduces a number of breaking changes from 0.10. The following guide converse the most commonly-encountered changes and gives solutions for them.",source:"@site/docs/stay-up-to-date/upgrade-from-0.10.md",sourceDirName:"stay-up-to-date",slug:"/stay-up-to-date/upgrade-from-0.10",permalink:"/avalonia-docs/docs/stay-up-to-date/upgrade-from-0.10",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/stay-up-to-date/upgrade-from-0.10.md",tags:[],version:"current",frontMatter:{id:"upgrade-from-0.10",title:"Upgrading from 0.10"},sidebar:"documentationSidebar",previous:{title:"Stay Up-To-Date",permalink:"/avalonia-docs/docs/stay-up-to-date/"},next:{title:"What's new",permalink:"/avalonia-docs/docs/stay-up-to-date/whats-new"}},d={},t=[{value:"Updating the project",id:"updating-the-project",level:2},{value:"Theme Handling",id:"theme-handling",level:2},{value:"Theme Dictionary and Theme Variant",id:"theme-dictionary-and-theme-variant",level:3},{value:"System.Reactive/Observables",id:"systemreactiveobservables",level:2},{value:"Updating Interfaces",id:"updating-interfaces",level:2},{value:"Optional, but recommended:",id:"optional-but-recommended",level:3},{value:"Views",id:"views",level:2},{value:"ItemsControl",id:"itemscontrol",level:2},{value:"Classes",id:"classes",level:2},{value:"Windows",id:"windows",level:2},{value:"AssetLoader",id:"assetloader",level:2},{value:"OnPropertyChanged",id:"onpropertychanged",level:2},{value:"Events",id:"events",level:2},{value:"Layout",id:"layout",level:2},{value:"Focus",id:"focus",level:2},{value:"Visual Tree",id:"visual-tree",level:2},{value:"Rendering",id:"rendering",level:2},{value:"Locator",id:"locator",level:2},{value:"Miscellaneous/Advanced Scenarios",id:"miscellaneousadvanced-scenarios",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Avalonia 11 introduces a number of breaking changes from 0.10. The following guide converse the most commonly-encountered changes and gives solutions for them."}),"\n",(0,o.jsx)(n.h2,{id:"updating-the-project",children:"Updating the project"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Update the Avalonia packages to 11.x"}),"\n",(0,o.jsxs)(n.li,{children:["Themes are no longer included in the Avalonia.Desktop package, so you will need to add a package reference to either","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"Avalonia.Themes.Fluent"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"Avalonia.Themes.Simple"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Remove the package reference to ",(0,o.jsx)(n.code,{children:"XamlNameReferenceGenerator"})," - Avalonia now includes an inbuilt generator by default"]}),"\n",(0,o.jsxs)(n.li,{children:["If necessary, update the ",(0,o.jsx)(n.code,{children:"<LangVersion>"})," to at least 9 in order to be able to use init-only properties"]}),"\n",(0,o.jsxs)(n.li,{children:["If you want the same fonts as in 0.10, also include ",(0,o.jsx)(n.code,{children:"Avalonia.Fonts.Inter"})," package and add ",(0,o.jsx)(n.code,{children:".WithInterFont()"})," to the app builder. By default, 11.0 doesn't include any custom fonts."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"theme-handling",children:"Theme Handling"}),"\n",(0,o.jsxs)(n.p,{children:["In v0.10, the theme is specified directly inside the ",(0,o.jsx)(n.code,{children:"Application.Styles"})," tag in the ",(0,o.jsx)(n.code,{children:"Application.axaml"})," file. An example of this is shown below:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Application.Styles>\n    <FluentTheme Mode="Light"/>\n</Application.Styles>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["In this example, the ",(0,o.jsx)(n.code,{children:"Mode"})," attribute of the ",(0,o.jsx)(n.code,{children:"FluentTheme"}),' tag is used to specify the theme mode, which can be either "Light" or "Dark".']}),"\n",(0,o.jsxs)(n.p,{children:["Theme management is improved by introducing a new attribute to the ",(0,o.jsx)(n.code,{children:"Application"})," tag: ",(0,o.jsx)(n.code,{children:"RequestedThemeVariant"}),'. This new attribute is used to set the theme of your application, overriding the system\'s current theme if specified. If you want to follow the system\'s current theme, you can set it to "Default". Other available options are "Dark" and "Light".']}),"\n",(0,o.jsx)(n.p,{children:"An example of how this attribute is used is shown below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Application xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             x:Class="ILoveAvaloniaUI.App"\n             xmlns:local="using:ILoveAvaloniaUI"\n             RequestedThemeVariant="Default">\n'})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"FluentTheme"})," tag no longer requires the ",(0,o.jsx)(n.code,{children:"Mode"})," attribute and can be left empty."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"<Application.Styles>\n    <FluentTheme />\n</Application.Styles>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"theme-dictionary-and-theme-variant",children:"Theme Dictionary and Theme Variant"}),"\n",(0,o.jsxs)(n.p,{children:["The method, ",(0,o.jsx)(n.code,{children:"Styles.TryGetResource"})," method now requires a nullable ",(0,o.jsx)(n.code,{children:"ThemeVariant"})," parameter as per PR ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/8166",children:"#8166"}),". This allows users to specify ",(0,o.jsx)(n.code,{children:"Light"}),", ",(0,o.jsx)(n.code,{children:"Dark"}),", and ",(0,o.jsx)(n.code,{children:"Default"})]}),"\n",(0,o.jsxs)(n.p,{children:["Using ",(0,o.jsx)(n.code,{children:"ThemeVariant.Default"})," as the key marks a specific theme dictionary as a fallback in case the theme variant or resource key is not found in other theme dictionaries."]}),"\n",(0,o.jsxs)(n.p,{children:["In addition to the built-in values of ",(0,o.jsx)(n.code,{children:"Light"}),", ",(0,o.jsx)(n.code,{children:"Dark"}),", and ",(0,o.jsx)(n.code,{children:"Default"}),", any object value can be used as a key (",(0,o.jsxs)(n.em,{children:["since it's wrapped in the ",(0,o.jsx)(n.code,{children:"ThemeVariant(object key)"})," structure"]}),"). ",(0,o.jsx)(n.code,{children:"{x:Static}"})," markup extension can also be used here if a developer wants to define multiple custom themes as static properties and reference them from the XAML code."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cs",children:"// Before\nbool TryGetResource(object key, out object? value)\n\n// Avalonia v11\nbool TryGetResource(object key, ThemeVariant? theme, out object? value)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"systemreactiveobservables",children:"System.Reactive/Observables"}),"\n",(0,o.jsxs)(n.p,{children:["Avalonia no longer has a dependency on ",(0,o.jsx)(n.code,{children:"System.Reactive"}),". If you're using reactive features, add a package reference to ",(0,o.jsx)(n.code,{children:"System.Reactive"})," to your project."]}),"\n",(0,o.jsxs)(n.p,{children:["If you don't need the whole of ",(0,o.jsx)(n.code,{children:"System.Reactive"})," but just want to make a simple subscription to an ",(0,o.jsx)(n.code,{children:"IObservable<T>"})," you can use the utility class ",(0,o.jsx)(n.code,{children:"AnonymousObserver<T>"})," provided by Avalonia, for example:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"observable.Subscribe(new AnonymousObserver<string>(() => { /* Code to execute when the observable changes. */ }));\n"})}),"\n",(0,o.jsxs)(n.p,{children:["If you need to subscribe on property or event changes, you can ",(0,o.jsx)(n.code,{children:"AddClassHandler"})," instead of observables."]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/9749",children:"#9749"}),", ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/10105",children:"#10105"})," for more information."]}),"\n",(0,o.jsx)(n.h2,{id:"updating-interfaces",children:"Updating Interfaces"}),"\n",(0,o.jsx)(n.p,{children:"Many interfaces have been removed in Avalonia 11. You should be able to do a global find/replace to replace each of the follow interfaces with its concrete type:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IAvaloniaObject"})," -> ",(0,o.jsx)(n.code,{children:"AvaloniaObject"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IBitmap"})," -> ",(0,o.jsx)(n.code,{children:"Bitmap"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IContentPresenter"})," -> ",(0,o.jsx)(n.code,{children:"ContentPresenter"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IControl"})," -> ",(0,o.jsx)(n.code,{children:"Control"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IInteractive"})," -> ",(0,o.jsx)(n.code,{children:"Interactive"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IItemsPresenter"})," -> ",(0,o.jsx)(n.code,{children:"ItemsPresenter"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ILayoutable"})," -> ",(0,o.jsx)(n.code,{children:"Layoutable"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IPanel"})," -> ",(0,o.jsx)(n.code,{children:"Panel"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IStyledElement"})," -> ",(0,o.jsx)(n.code,{children:"StyledElement"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ITemplatedControl"})," -> ",(0,o.jsx)(n.code,{children:"TemplatedControl"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IVisual"})," -> ",(0,o.jsx)(n.code,{children:"Visual"})]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"If you have your own interfaces that derive from one of these interfaces you'll need to remove the interface base, and do a cast to the concrete class at the point of usage."}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/9553",children:"#9553"}),", ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/11495",children:"#11495"})," for more information."]}),"\n",(0,o.jsx)(n.h3,{id:"optional-but-recommended",children:"Optional, but recommended:"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"IStyleable"})," interface is now deprecated. In Avalonia 0.10.x, to override a control's style key you implemented ",(0,o.jsx)(n.code,{children:"IStyleable"})," and added an explicit interface implementation for ",(0,o.jsx)(n.code,{children:"StyleKey"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"class MyButton : Button, IStyleable\n{\n    Type IStyleable.StyleKey => typeof(Button);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In Avalonia 11, the ",(0,o.jsx)(n.code,{children:"IStyleable"})," reference will give a deprecated warning. The following should be used instead:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"class MyButton : Button\n{\n    protected override Type StyleKeyOverride => typeof(Button);\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/11380",children:"#11380"})," for more information."]}),"\n",(0,o.jsx)(n.h2,{id:"views",children:"Views"}),"\n",(0,o.jsxs)(n.p,{children:["Views that are in the form of a ",(0,o.jsx)(n.code,{children:".axaml"}),"/",(0,o.jsx)(n.code,{children:".axaml.cs"})," (or ",(0,o.jsx)(n.code,{children:".xaml"}),"/",(0,o.jsx)(n.code,{children:".xaml.cs"}),") pair now have auto-generated C# code. To facilitate this:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Make the class in the .cs file ",(0,o.jsx)(n.code,{children:"partial"})]}),"\n",(0,o.jsxs)(n.li,{children:["Remove the ",(0,o.jsx)(n.code,{children:"private void InitializeComponent()"})," method"]}),"\n",(0,o.jsxs)(n.li,{children:["Do ",(0,o.jsx)(n.strong,{children:"NOT"})," remove the call to ",(0,o.jsx)(n.code,{children:"InitializeComponent()"})," in the constructor: this method is now a generated method and still needs to be called"]}),"\n",(0,o.jsxs)(n.li,{children:["Remove the ",(0,o.jsx)(n.code,{children:"this.AttachDevTools()"})," call from the constructor - ",(0,o.jsx)(n.code,{children:"InitializeComponent"})," now has a parameter which controls whether DevTools is attached in debug mode whose default is ",(0,o.jsx)(n.code,{children:"true"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Previously, to find a named control declared in the XAML file, a call to ",(0,o.jsx)(n.code,{children:"this.FindControl<T>(string name)"})," or ",(0,o.jsx)(n.code,{children:"this.GetControl<T>(string name)"})," was needed. This is now unnecessary - controls in the XAML file with a ",(0,o.jsx)(n.code,{children:"Name"})," or ",(0,o.jsx)(n.code,{children:"x:Name"})," attribute will automatically cause a field to be generated in the class to access the named control (as in WPF/UWP etc)."]}),"\n",(0,o.jsx)(n.p,{children:"Note, this source generator is available for C# only. For F# nothing was changed."}),"\n",(0,o.jsx)(n.h2,{id:"itemscontrol",children:"ItemsControl"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ItemsControl"})," and derived classes such as ",(0,o.jsx)(n.code,{children:"ListBox"})," and ",(0,o.jsx)(n.code,{children:"ComboBox"})," now have both an ",(0,o.jsx)(n.code,{children:"Items"})," property and an ",(0,o.jsx)(n.code,{children:"ItemsSource"})," as in WPF/UWP."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Items"})," is a readonly collection property that is pre-populated, and ",(0,o.jsx)(n.code,{children:"ItemsSource"})," is the read/write version that has a default value of null."]}),"\n",(0,o.jsxs)(n.p,{children:["Replace any bindings to ",(0,o.jsx)(n.code,{children:"Items"})," with a binding to ",(0,o.jsx)(n.code,{children:"ItemsSource"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<ListBox Items="{Binding Items}">\n'})}),"\n",(0,o.jsx)(n.p,{children:"Becomes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<ListBox ItemsSource="{Binding Items}">\n'})}),"\n",(0,o.jsx)(n.p,{children:"In addition:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ListBox.VirtualizationMode"})," has been removed, the virtualization mode is changed by changing the ",(0,o.jsx)(n.code,{children:"ItemsPanel"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["To disable virtualization use a ",(0,o.jsx)(n.code,{children:"StackPanel"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["To enable virtualization use a ",(0,o.jsx)(n.code,{children:"VirtualizingStackPanel"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Carousel.IsVirtualizing"}),' has been removed, there is now only a "virtualizing" mode for ',(0,o.jsx)(n.code,{children:"Carousel"})]}),"\n",(0,o.jsxs)(n.li,{children:["Item container lookup was moved to ",(0,o.jsx)(n.code,{children:"ItemsControl"})," as in UWP (old methods are left on ItemContainerGenerator marked with [Obsolete]):","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"ItemsControl.ContainerFromIndex(object item)"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"ItemsControl.IndexFromContainer(Control container)"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["The ",(0,o.jsx)(n.code,{children:"Items"})," and ",(0,o.jsx)(n.code,{children:"ItemTemplate"})," properties on ",(0,o.jsx)(n.code,{children:"ItemsPresenter"})," have been removed. The template bindings to these properties in control templates can simply be removed"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/10590",children:"#10590"}),", ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/10827",children:"#10827"})," for more information."]}),"\n",(0,o.jsx)(n.h2,{id:"classes",children:"Classes"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"StyledElement.Classes"})," is now a readonly property. When used in an object initializer, code which did the following:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'var c = new Control\n{\n    Classes = new Classes("foo", "bar"),\n};\n'})}),"\n",(0,o.jsx)(n.p,{children:"Should be changed to:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'var c = new Control\n{\n    Classes = { "foo", "bar" },\n};\n'})}),"\n",(0,o.jsxs)(n.p,{children:["To manipulate a ",(0,o.jsx)(n.code,{children:"Classes"})," collection outside of an object initializer use the standard ",(0,o.jsx)(n.code,{children:"IList<string>"})," methods."]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/11013",children:"#11013"})," for more information."]}),"\n",(0,o.jsx)(n.h2,{id:"windows",children:"Windows"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"TopLEvel.PlatformImpl"})," API is no longer available for controls such as ",(0,o.jsx)(n.code,{children:"Window"}),". The relevant methods have been moved to ",(0,o.jsx)(n.code,{children:"TopLevel"}),", ",(0,o.jsx)(n.code,{children:"WindowBase"})," or ",(0,o.jsx)(n.code,{children:"Window"})," itself:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"window.PlatformImpl.Handle"})," becomes ",(0,o.jsx)(n.code,{children:"window.TryGetPlatformHandle()"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"window.PlatformImpl.BeginMove(e)"})," becomes ",(0,o.jsx)(n.code,{children:"window.BeginMove()"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"window.PlatformImpl.Resized"})," becomes ",(0,o.jsx)(n.code,{children:"window.Resized"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"assetloader",children:"AssetLoader"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"IAssetLoader"})," interface is no longer available. Use the static ",(0,o.jsx)(n.code,{children:"AssetLoader"})," class:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var assets = AvaloniaLocator.Current.GetService<IAssetLoader>();\nvar bitmap = new Bitmap(assets.Open(new Uri(uri)));\n"})}),"\n",(0,o.jsx)(n.p,{children:"Becomes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var bitmap = new Bitmap(AssetLoader.Open(new Uri(uri)));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"onpropertychanged",children:"OnPropertyChanged"}),"\n",(0,o.jsxs)(n.p,{children:["The virtual ",(0,o.jsx)(n.code,{children:"AvaloniaObject.OnPropertyChanged"})," method is now non-generic. Replace"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"protected override void OnPropertyChanged<T>(AvaloniaPropertyChangedEventArgs<T> change)\n"})}),"\n",(0,o.jsx)(n.p,{children:"with"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"protected override void OnPropertyChanged(AvaloniaPropertyChangedEventArgs change)\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Also the technique for getting the old and new values from ",(0,o.jsx)(n.code,{children:"AvaloniaPropertyChangedEventArgs"})," without boxing has changed:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Replace ",(0,o.jsx)(n.code,{children:"change.NewValue.GetValueOrDefault<T>()"})," with ",(0,o.jsx)(n.code,{children:"change.GetNewValue<bool>()"})]}),"\n",(0,o.jsxs)(n.li,{children:["Replace ",(0,o.jsx)(n.code,{children:"change.OldValue.GetValueOrDefault<T>()"})," with ",(0,o.jsx)(n.code,{children:"change.GetOldValue<bool>()"})]}),"\n",(0,o.jsxs)(n.li,{children:["You can also use ",(0,o.jsx)(n.code,{children:"change.GetOldAndNewValue<T>()"})," to get both"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/7980",children:"#7980"})," for more information."]}),"\n",(0,o.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,o.jsx)(n.p,{children:"The following events have been renamed:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"PointerEnter"})," -> ",(0,o.jsx)(n.code,{children:"PointerEntered"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"PointerLeave"})," -> ",(0,o.jsx)(n.code,{children:"PointerExited"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ContextMenu"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ContextMenuClosing"})," -> ",(0,o.jsx)(n.code,{children:"Closing"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ContextMenuOpening"})," -> ",(0,o.jsx)(n.code,{children:"Opening"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MenuBase"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MenuClosed"})," -> ",(0,o.jsx)(n.code,{children:"Closed"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"MenuOpened"})," -> ",(0,o.jsx)(n.code,{children:"Opened"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"RoutedEventArgs.Source"})," has changed from type ",(0,o.jsx)(n.code,{children:"IInteractive"})," to type ",(0,o.jsx)(n.code,{children:"object"}),": cast to a concrete type such as ",(0,o.jsx)(n.code,{children:"Control"})," to use it."]}),"\n",(0,o.jsx)(n.h2,{id:"layout",children:"Layout"}),"\n",(0,o.jsx)(n.p,{children:"Previously a full layout pass was achieved by getting the layout root and calling a method on the layout manager:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"((ILayoutRoot)control).LayoutManager.ExecuteLayout();\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"LayoutManager"})," is no longer exposed from the ",(0,o.jsx)(n.code,{children:"ILayoutRoot"}),", instead call the ",(0,o.jsx)(n.code,{children:"UpdateLayout"})," method on any control as in WPF/UWP:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"control.UpdateLayout();\n"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ILayoutable"})," was used in 0.10.x to get the previous measure constraints and arrange bounds. Because ",(0,o.jsx)(n.code,{children:"ILayoutable"})," is no longer available, these are now exposed from ",(0,o.jsx)(n.code,{children:"LayoutInformation"}),":"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"Size? LayoutInformation.GetPreviousMeasureConstraint(Layoutable control)"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"Rect? LayoutInformation.GetPreviousArrangeBounds(Layoutable control)"})}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"focus",children:"Focus"}),"\n",(0,o.jsxs)(n.p,{children:["The focus manager is no longer available via ",(0,o.jsx)(n.code,{children:"FocusManager.Instance"})," and has instead been moved to the ",(0,o.jsx)(n.code,{children:"TopLevel"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var focusManager = FocusManager.Instance;\n"})}),"\n",(0,o.jsx)(n.p,{children:"Becomes:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"var focusManager = TopLevel.GetTopLevel(control).FocusManager;\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In addition, the ",(0,o.jsx)(n.code,{children:"IFocusManager"})," API has been changed."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["To get the currently focused element, use ",(0,o.jsx)(n.code,{children:"IFocusManager.GetFocusedElement()"})]}),"\n",(0,o.jsxs)(n.li,{children:["To focus a control use ",(0,o.jsx)(n.code,{children:"control.Focus()"})]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["There is currently no event for listening to focus changes on ",(0,o.jsx)(n.code,{children:"IFocusManager"}),". To listen for focus changes, add a listener to the ",(0,o.jsx)(n.code,{children:"InputElement.GotFocusEvent"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"InputElement.GotFocusEvent.AddClassHandler<InputElement>((element, args) => { });\n"})}),"\n",(0,o.jsx)(n.p,{children:"The same applied to KeyboardDevice, which isn't accessible anymore. Use the same focus related APIs as a replacement."}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/11407",children:"#11407"})," for more information."]}),"\n",(0,o.jsx)(n.h2,{id:"visual-tree",children:"Visual Tree"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"IVisual"})," was used in 0.10.x to expose the visual parent and visual children of a control. Because ",(0,o.jsx)(n.code,{children:"IVisual"})," is no longer available, these are now exposed as extension methods in the ",(0,o.jsx)(n.code,{children:"Avalonia.VisualTree"})," namespace:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"using Avalonia.VisualTree;\n\nvar visualParent = control.GetVisualParent();\nvar visualChildren = control.GetVisualChildren();\n"})}),"\n",(0,o.jsx)(n.h2,{id:"rendering",children:"Rendering"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Render"})," method on certain controls is now sealed. This is because it is planned to make these controls use composition primitives instead of rendering via ",(0,o.jsx)(n.code,{children:"DrawingContext"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["If you have a control whose ",(0,o.jsx)(n.code,{children:"Render"})," method was being overloaded but it's now sealed, consider using a base class, for example instead of ",(0,o.jsx)(n.code,{children:"Border"})," use ",(0,o.jsx)(n.code,{children:"Decorator"}),". Note that you will now be responsible for drawing the background/border."]}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/pull/10299",children:"#10299"})," for more information."]}),"\n",(0,o.jsx)(n.h2,{id:"locator",children:"Locator"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"AvaloniaLocator"})," is no longer available. Most services that were available via the locator now have alternative methods of access:"]}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"AssetLoader"})," is a static class now with all of the old methods."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IPlatformSettings"})," was moved to ",(0,o.jsx)(n.code,{children:"TopLevel.PlatformSettings"})," and ",(0,o.jsx)(n.code,{children:"Application.PlatformSettings"}),". Note, it's always preferred to use settings of the specific top level (window) rather than global ones."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IClipboard"})," was moved to the ",(0,o.jsx)(n.code,{children:"TopLevel.Clipboard"}),". Note, that ",(0,o.jsx)(n.code,{children:"Application.Clipboard"})," was removed as well."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"PlatformHotkeyConfiguration"})," was moved to the ",(0,o.jsx)(n.code,{children:"PlatformSettings.HotkeyConfiguration"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Some applications were using the ",(0,o.jsx)(n.code,{children:"AvaloniaLocator"})," as a general-purpose service locator. This was never an intended usage of ",(0,o.jsx)(n.code,{children:"AvaloniaLocator"})," and those application should move to a service locator or DI container designed for the purpose, e.g. ",(0,o.jsx)(n.a,{href:"https://www.reactiveui.net/docs/handbook/dependency-inversion/",children:(0,o.jsx)(n.code,{children:"Splat"})})," or ",(0,o.jsx)(n.code,{children:"Microsoft.Extensions.DependencyInjection"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"miscellaneousadvanced-scenarios",children:"Miscellaneous/Advanced Scenarios"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IRenderer"}),"/",(0,o.jsx)(n.code,{children:"DeferredRenderer"}),"/",(0,o.jsx)(n.code,{children:"ImmediateRenderer"})," have now been removed. For performance reasons it is no longer possible to supply your own renderer, everything uses the new composition renderer."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"Renderer.Diagnostics"})," is now ",(0,o.jsx)(n.code,{children:"RendererDiagnostics"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"ICustomDrawOperation.Render"})," now takes an ",(0,o.jsx)(n.code,{children:"ImmediateDrawingContext"})," instead of a ",(0,o.jsx)(n.code,{children:"DrawingContext"})]}),"\n",(0,o.jsxs)(n.li,{children:["Add ",(0,o.jsx)(n.code,{children:".GetTask()"})," to the end of calls to ",(0,o.jsx)(n.code,{children:"Dispatcher.UIThread.InvokeAsync"})," if directly returning the value in a method which returns a ",(0,o.jsx)(n.code,{children:"Task"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"IRenderRoot.RenderScaling"})," has been moved to ",(0,o.jsx)(n.code,{children:"TopLevel.RenderScaling"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"LightweightObservableBase"})," and ",(0,o.jsx)(n.code,{children:"SingleSubscriberObservableBase"})," have been made internal. These were utility classes designed for a specific purpose in Avalonia and were not intended to be used by clients as they do not handle certain edge cases. Use the mechanisms provided by ",(0,o.jsx)(n.code,{children:"System.Reactive"})," to create observables, such as ",(0,o.jsx)(n.code,{children:"Observable.Create"})]}),"\n",(0,o.jsx)(n.li,{children:"When binding to methods, the method must either have no parameters or a single object parameter."}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"OpenFileDialog"})," and ",(0,o.jsx)(n.code,{children:"SaveFileDialog"})," have been removed. For file system storage service use ",(0,o.jsx)(n.code,{children:"IStorageProvider"})," on the Top Level."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},11151:(e,n,s)=>{s.d(n,{Z:()=>r,a:()=>a});var o=s(67294);const i={},l=o.createContext(i);function a(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);