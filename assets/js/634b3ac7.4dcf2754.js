"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[7583],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),p=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(r.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,r=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(r,".").concat(m)]||d[m]||u[m]||l;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,s=new Array(l);s[0]=m;var o={};for(var r in t)hasOwnProperty.call(t,r)&&(o[r]=t[r]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<l;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},94929:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const l={id:"headless-nunit",title:"Headless Testing with NUnit"},s=void 0,o={unversionedId:"concepts/headless/headless-nunit",id:"concepts/headless/headless-nunit",title:"Headless Testing with NUnit",description:"Preparation",source:"@site/docs/concepts/headless/headless-nunit.md",sourceDirName:"concepts/headless",slug:"/concepts/headless/headless-nunit",permalink:"/avalonia-docs/docs/next/concepts/headless/headless-nunit",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/headless/headless-nunit.md",tags:[],version:"current",frontMatter:{id:"headless-nunit",title:"Headless Testing with NUnit"},sidebar:"documentationSidebar",previous:{title:"Headless Testing with XUnit",permalink:"/avalonia-docs/docs/next/concepts/headless/headless-xunit"},next:{title:"Manual Setup of Headless Platform",permalink:"/avalonia-docs/docs/next/concepts/headless/headless-custom"}},r={},p=[{value:"Preparation",id:"preparation",level:2},{value:"Install packages",id:"install-packages",level:2},{value:"Setup Application",id:"setup-application",level:2},{value:"Initialize NUnit Tests",id:"initialize-nunit-tests",level:2},{value:"Test Example",id:"test-example",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"preparation"},"Preparation"),(0,i.kt)("p",null,'This page assumes that NUnit project was already created.\nIf not, please follow NUnit "Getting Started" and "Installation" here ',(0,i.kt)("a",{parentName:"p",href:"https://docs.nunit.org/articles/nunit/getting-started/installation.html"},"https://docs.nunit.org/articles/nunit/getting-started/installation.html"),"."),(0,i.kt)("h2",{id:"install-packages"},"Install packages"),(0,i.kt)("p",null,"Aside from NUnit packages, we need to install two more packages:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Avalonia.Headless.NUnit"},"Avalonia.Headless.NUnit")," which also includes Avalonia."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.nuget.org/packages/Avalonia.Themes.Fluent"},"Avalonia.Themes.Fluent")," as even headless controls need a theme")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Headless platform doesn't require any specific theme, and it is possible to swap FluentTheme with any other.")),(0,i.kt)("h2",{id:"setup-application"},"Setup Application"),(0,i.kt)("p",null,"As in any other Avalonia app, an ",(0,i.kt)("inlineCode",{parentName:"p"},"Application")," instance needs to be created, and themes need to be applied. When using the Headless platform, the setup is not much different from a regular Avalonia app and can mostly be reused."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml",metastring:"title=App.axaml",title:"App.axaml"},'<Application xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             x:Class="Tests.App">\n  <Application.Styles>\n    <FluentTheme />\n  </Application.Styles>\n</Application>\n')),(0,i.kt)("p",null,"And the code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title=App.axaml.cs",title:"App.axaml.cs"},"using Avalonia;\nusing Avalonia.Headless;\n\npublic class App : Application\n{\n    public override void Initialize()\n    {\n        AvaloniaXamlLoader.Load(this);\n    }\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Usually, the ",(0,i.kt)("inlineCode",{parentName:"p"},"BuildAvaloniaApp")," method is defined in the Program.cs file, but NUnit/XUnit tests don't have it, so it is defined in the ",(0,i.kt)("inlineCode",{parentName:"p"},"App")," file instead.")),(0,i.kt)("h2",{id:"initialize-nunit-tests"},"Initialize NUnit Tests"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"[AvaloniaTestApplication]")," attribute wires the tests in the current project with the specific application. It needs to be defined once per project in any file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"[assembly: AvaloniaTestApplication(typeof(TestAppBuilder))]\n\npublic class TestAppBuilder\n{\n    public static AppBuilder BuildAvaloniaApp() => AppBuilder.Configure<App>()\n        .UseHeadless(new AvaloniaHeadlessPlatformOptions());\n}\n")),(0,i.kt)("h2",{id:"test-example"},"Test Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'[AvaloniaTest]\npublic void Should_Type_Text_Into_TextBox()\n{\n    // Setup controls:\n    var textBox = new TextBox();\n    var window = new Window { Content = textBox };\n\n    // Open window:\n    window.Show();\n\n    // Focus text box:\n    textBox.Focus();\n\n    // Simulate text input:\n    window.KeyTextInput("Hello World");\n\n    // Assert:\n    Assert.AreEqual("Hello World", textBox.Text);\n}\n')),(0,i.kt)("p",null,"Instead of the typical ",(0,i.kt)("inlineCode",{parentName:"p"},"[Test]")," attribute, we need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"[AvaloniaTest]")," as it sets up the UI thread. Similarly, instead of ",(0,i.kt)("inlineCode",{parentName:"p"},"[Theory]"),", there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"[AvaloniaTheory]")," attribute."))}u.isMDXComponent=!0}}]);