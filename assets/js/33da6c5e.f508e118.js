"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[80804],{83063:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=i(85893),t=i(11151);const o={description:"CONCEPTS"},d="Compiled Bindings",l={id:"basics/data/data-binding/compiled-bindings",title:"Compiled Bindings",description:"CONCEPTS",source:"@site/docs/basics/data/data-binding/compiled-bindings.md",sourceDirName:"basics/data/data-binding",slug:"/basics/data/data-binding/compiled-bindings",permalink:"/avalonia-docs/docs/basics/data/data-binding/compiled-bindings",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/basics/data/data-binding/compiled-bindings.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS"},sidebar:"documentationSidebar",previous:{title:"Data Binding Syntax",permalink:"/avalonia-docs/docs/basics/data/data-binding/data-binding-syntax"},next:{title:"Data Templates",permalink:"/avalonia-docs/docs/basics/data/data-templates"}},s={},c=[{value:"Enable and disable compiled bindings",id:"enable-and-disable-compiled-bindings",level:2},{value:"Enable and disable globally",id:"enable-and-disable-globally",level:3},{value:"Enable and disable per UserControl or Window",id:"enable-and-disable-per-usercontrol-or-window",level:3},{value:"CompiledBinding-Markup",id:"compiledbinding-markup",level:2},{value:"ReflectionBinding-Markup",id:"reflectionbinding-markup",level:2},{value:"Type casting",id:"type-casting",level:2}];function r(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"compiled-bindings",children:"Compiled Bindings"}),"\n",(0,a.jsxs)(n.p,{children:["Bindings defined in the XAML are using reflection in order to find and access the requested property in your ",(0,a.jsx)(n.code,{children:"ViewModel"}),". In Avalonia you can also use compiled bindings, which has some benefits:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"If you use compiled bindings and the property you bind to is not found, you will get a compile-time error. Hence you get a much better debugging experience."}),"\n",(0,a.jsxs)(n.li,{children:["Reflection is known to be slow (",(0,a.jsx)(n.a,{href:"https://www.codeproject.com/Articles/1161127/Why-is-reflection-slow",children:"see this article on codeproject.com"}),"). Using compiled bindings can therefore improve the performance of your application."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"enable-and-disable-compiled-bindings",children:"Enable and disable compiled bindings"}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"Depending on the template that was used to create the Avalonia project, compiled bindings may or may not be enabled by default. You can check this in the project file."})}),"\n",(0,a.jsx)(n.h3,{id:"enable-and-disable-globally",children:"Enable and disable globally"}),"\n",(0,a.jsx)(n.p,{children:"If you want your application to use compiled bindings globally by default, you can add"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:"<AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>\n"})}),"\n",(0,a.jsxs)(n.p,{children:["to your project file. You will still need to provide ",(0,a.jsx)(n.code,{children:"x:DataType"})," for the objects you want to bind but you don't need to to set ",(0,a.jsx)(n.code,{children:'x:CompileBindings="[True|False]"'})," for each ",(0,a.jsx)(n.code,{children:"UserControl"})," or ",(0,a.jsx)(n.code,{children:"Window"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"enable-and-disable-per-usercontrol-or-window",children:"Enable and disable per UserControl or Window"}),"\n",(0,a.jsxs)(n.p,{children:["To enable compiled bindings, you will need to define the ",(0,a.jsx)(n.code,{children:"DataType"})," of the object you want to bind to first. In ",(0,a.jsx)(n.a,{href:"../data-templates",children:(0,a.jsx)(n.code,{children:"DataTemplates"})})," there is a property ",(0,a.jsx)(n.code,{children:"DataType"}),", for all other elements you can set it via ",(0,a.jsx)(n.code,{children:"x:DataType"}),". Most likely you will set ",(0,a.jsx)(n.code,{children:"x:DataType"})," in your root node, for example in a ",(0,a.jsx)(n.code,{children:"Window"})," or an ",(0,a.jsx)(n.code,{children:"UserControl"}),". You can also specify the ",(0,a.jsx)(n.code,{children:"DataType"})," in the ",(0,a.jsx)(n.code,{children:"Binding"})," directly."]}),"\n",(0,a.jsxs)(n.p,{children:["You can now enable or disable compiled bindings by setting ",(0,a.jsx)(n.code,{children:'x:CompileBindings="[True|False]"'}),". All child nodes will inherit this property, so you can enable it in your root node and disable it for a specific child, if needed."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'\x3c!-- Set DataType and enable compiled bindings --\x3e\n<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:vm="using:MyApp.ViewModels"\n             x:DataType="vm:MyViewModel"\n             x:CompileBindings="True">\n    <StackPanel>\n        <TextBlock Text="Last name:" />\n        <TextBox Text="{Binding LastName}" />\n        <TextBlock Text="Given name:" />\n        <TextBox Text="{Binding GivenName}" />\n        <TextBlock Text="E-Mail:" />\n        \x3c!-- Set DataType inside the Binding-markup --\x3e\n        <TextBox Text="{Binding MailAddress, DataType={x:Type vm:MyViewModel}}" />\n\n        <Button Content="Send an E-Mail"\n                Command="{Binding SendEmailCommand}" />\n    </StackPanel>\n</UserControl>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"compiledbinding-markup",children:"CompiledBinding-Markup"}),"\n",(0,a.jsxs)(n.p,{children:["If you don't want to enable compiled bindings for all child nodes, you can also use the ",(0,a.jsx)(n.code,{children:"CompiledBinding"}),"-markup. You still need to define the ",(0,a.jsx)(n.code,{children:"DataType"}),", but you can omit ",(0,a.jsx)(n.code,{children:'x:CompileBindings="True"'}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'\x3c!-- Set DataType --\x3e\n<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:vm="using:MyApp.ViewModels"\n             x:DataType="vm:MyViewModel">\n    <StackPanel>\n        <TextBlock Text="Last name:" />\n        \x3c!-- use CompiledBinding markup for your binding --\x3e\n        <TextBox Text="{CompiledBinding LastName}" />\n        <TextBlock Text="Given name:" />\n        <TextBox Text="{CompiledBinding GivenName}" />\n        <TextBlock Text="E-Mail:" />\n        <TextBox Text="{CompiledBinding MailAddress}" />\n\n        \x3c!-- This command will use ReflectionBinding, as it\'s default --\x3e\n        <Button Content="Send an E-Mail"\n                Command="{Binding SendEmailCommand}" />\n    </StackPanel>\n</UserControl>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"reflectionbinding-markup",children:"ReflectionBinding-Markup"}),"\n",(0,a.jsxs)(n.p,{children:["If you have compiled bindings enabled in the root node (via ",(0,a.jsx)(n.code,{children:'x:CompileBindings="True"'}),") and you either don't want to use compiled binding at a certain position or you hit one of the ",(0,a.jsx)(n.a,{href:"#known-limitations",children:"known limitations"}),", you can use the ",(0,a.jsx)(n.code,{children:"ReflectionBinding"}),"-markup."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'\x3c!-- Set DataType --\x3e\n<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:vm="using:MyApp.ViewModels"\n             x:DataType="vm:MyViewModel"\n             x:CompileBindings="True">\n    <StackPanel>\n        <TextBlock Text="Last name:" />\n        <TextBox Text="{Binding LastName}" />\n        <TextBlock Text="Given name:" />\n        <TextBox Text="{Binding GivenName}" />\n        <TextBlock Text="E-Mail:" />\n        <TextBox Text="{Binding MailAddress}" />\n\n        \x3c!-- We use ReflectionBinding instead --\x3e\n        <Button Content="Send an E-Mail"\n                Command="{ReflectionBinding SendEmailCommand}" />\n    </StackPanel>\n</UserControl>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"type-casting",children:"Type casting"}),"\n",(0,a.jsx)(n.p,{children:"In some cases the target type of the binding expression cannot be automatically evaluated. In such cases you must provide an explicite type cast in the binding expression."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<ItemsRepeater ItemsSource="{Binding MyItems}">\n<ItemsRepeater.ItemTemplate>\n    <DataTemplate>\n    <StackPanel Orientation="Horizontal">\n        <TextBlock Text="{Binding DisplayName}"/>\n        <Grid>\n        <Button Command="{Binding $parent[ItemsRepeater].((vm:MyUserControlViewModel)DataContext).DoItCommand}"\n                CommandParameter="{Binding ItemId}"/>\n        </Grid>\n    </StackPanel>\n    </DataTemplate>\n</ItemsRepeater.ItemTemplate>\n</ItemsRepeater>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["In this case, the button command shall not be bound to the item's ",(0,a.jsx)(n.code,{children:"DataContext"})," but to a command that is defined in the ",(0,a.jsx)(n.code,{children:"DataContext"}),"of the ",(0,a.jsx)(n.code,{children:"ItemsRepeater"}),". The single item will be identified using a ",(0,a.jsx)(n.code,{children:"CommandParameter"})," bound to the item's ",(0,a.jsx)(n.code,{children:"DataContext"}),'. Therefore, you must specify the type of the "parent" ',(0,a.jsx)(n.code,{children:"DataContext"})," via cast expression ",(0,a.jsx)(n.code,{children:"((vm:MyUserControlViewModel)DataContext)"}),"."]})]})}function m(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(r,{...e})}):r(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>d});var a=i(67294);const t={},o=a.createContext(t);function d(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);