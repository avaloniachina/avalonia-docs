"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[84538],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=a.createContext({}),m=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},l=function(e){var t=m(e.components);return a.createElement(d.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,d=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=m(n),p=o,h=u["".concat(d,".").concat(p)]||u[p]||s[p]||i;return n?a.createElement(h,r(r({ref:t},l),{},{components:n})):a.createElement(h,r({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=p;var c={};for(var d in t)hasOwnProperty.call(t,d)&&(c[d]=t[d]);c.originalType=e,c[u]="string"==typeof e?e:o,r[1]=c;for(var m=2;m<i;m++)r[m]=n[m];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},13901:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>m,toc:()=>u});var a=n(87462),o=(n(67294),n(3905));const i=n.p+"assets/images/command2-0233991fda4964f5ef62ba1b3bf5dc1e.gif",r=n.p+"assets/images/command3-ecc2618acd65efa6781870afa298d771.gif",c={id:"how-to-bind-to-a-command-without-reactiveui",title:"How to Bind to a Command without ReactiveUI"},d="How to Bind to a Command without ReactiveUI",m={unversionedId:"guides/data-binding/how-to-bind-to-a-command-without-reactiveui",id:"guides/data-binding/how-to-bind-to-a-command-without-reactiveui",title:"How to Bind to a Command without ReactiveUI",description:"Sometimes you just want to call a method when a button is clicked without the full ceremony of creating a reactive command, using the ReactiveUI framework.&#x20;",source:"@site/docs/guides/data-binding/how-to-bind-to-a-command-without-reactiveui.md",sourceDirName:"guides/data-binding",slug:"/guides/data-binding/how-to-bind-to-a-command-without-reactiveui",permalink:"/avalonia-docs/docs/next/guides/data-binding/how-to-bind-to-a-command-without-reactiveui",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/data-binding/how-to-bind-to-a-command-without-reactiveui.md",tags:[],version:"current",frontMatter:{id:"how-to-bind-to-a-command-without-reactiveui",title:"How to Bind to a Command without ReactiveUI"},sidebar:"documentationSidebar",previous:{title:"How to Bind to a Command with ReactiveUI",permalink:"/avalonia-docs/docs/next/guides/data-binding/how-to-bind-to-a-command-with-reactiveui"},next:{title:"How to Bind to a Task Result",permalink:"/avalonia-docs/docs/next/guides/data-binding/how-to-bind-to-a-task-result"}},l={},u=[{value:"Can Execute?",id:"can-execute",level:2},{value:"<strong>Trigger Can Execute</strong>",id:"trigger-can-execute",level:2}],s={toc:u},p="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-bind-to-a-command-without-reactiveui"},"How to Bind to a Command without ReactiveUI"),(0,o.kt)("p",null,"Sometimes you just want to call a method when a button is clicked without the full ceremony of creating a reactive command, using the ",(0,o.kt)("em",{parentName:"p"},"ReactiveUI")," framework."," "),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"To see how to how to bind to a command ",(0,o.kt)("strong",{parentName:"p"},"with")," ",(0,o.kt)("em",{parentName:"p"},"ReactiveUI"),", see ",(0,o.kt)("a",{parentName:"p",href:"/avalonia-docs/docs/next/guides/data-binding/how-to-bind-to-a-command-with-reactiveui"},"here"),".")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Avalonia UI")," data binding allows you to implement directly both a view model method that performs an action, and a property that can control whether the method can execute."," "),(0,o.kt)("p",null,"For example, using the XAML as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<Window xmlns="https://github.com/avaloniaui">\n   ...\n   <StackPanel Margin="20">\n      <Button Command="{Binding PerformAction}"\n              CommandParameter="From the button, without ReactiveUI">\n              Run the example</Button>\n   </StackPanel>\n</Window>\n')),(0,o.kt)("p",null,"You can write a view model capable of running the action, like this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace AvaloniaGuides.ViewModels\n{\n    public class MainWindowViewModel \n    {\n        public void PerformAction(object msg)\n        {\n            Debug.WriteLine($"The action was called. {msg}");\n        }\n    }\n}\n')),(0,o.kt)("img",{src:i,alt:""}),(0,o.kt)("h2",{id:"can-execute"},"Can Execute?"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Avalonia UI")," data binding provides a simple way of implementing a 'can execute?' feature using a naming convention."),(0,o.kt)("p",null,"If you need to have execution dependent on the value of a command parameter or a view model property, then you can write a second Boolean method to check if the action m,ethod can execute."," "),(0,o.kt)("p",null,"To make this work, ",(0,o.kt)("em",{parentName:"p"},"Avalonia UI")," uses the naming convention that the Boolean method has the same root name as the action method, but with the added prefix 'Can'."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace AvaloniaGuides.ViewModels\n{\n    public class MainWindowViewModel \n    {\n        public void PerformAction(object msg)\n        {\n            Debug.WriteLine($"The action was called. {msg}");\n        }\n\n        public bool CanPerformAction(object msg)\n        {\n            if (msg!=null) return !string.IsNullOrWhiteSpace( msg.ToString() );\n            return false;\n        }\n    }\n}\n')),(0,o.kt)("p",null,"So, extending the example XAML to supply the parameter (string) from a text box:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},'<StackPanel Margin="20">\n  <TextBox Margin="0 5" x:Name="message" \n           Watermark="Add a message to enable the button"/>\n  <Button Command="{Binding PerformAction}"\n          CommandParameter="{Binding #message.Text}">\n    Run the example\n  </Button>\n</StackPanel>\n')),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This example uses the technique of binding directly to another control. You can see how to do this, ",(0,o.kt)("a",{parentName:"p",href:"/avalonia-docs/docs/next/guides/data-binding/binding-to-controls"},"here"),".")),(0,o.kt)("p",null,"You will see that the button becomes enables only when the text box contains a string. "," "),(0,o.kt)("img",{src:r,alt:""}),(0,o.kt)("h2",{id:"trigger-can-execute"},(0,o.kt)("strong",{parentName:"h2"},"Trigger Can Execute")),(0,o.kt)("p",null,"If you want to trigger the 'can execute?' method from another property in your view model, then you will have to decorate the property with one or more ",(0,o.kt)("inlineCode",{parentName:"p"},"DependsOn")," attributes, and write the code to invoke property changed events yourself."," "),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This technique applies to a view model that is not using the ",(0,o.kt)("em",{parentName:"p"},"ReactiveUI")," framework.")))}h.isMDXComponent=!0}}]);