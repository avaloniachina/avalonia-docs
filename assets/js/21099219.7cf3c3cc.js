"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[53102],{3905:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>f});var a=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,o=function(n,e){if(null==n)return{};var t,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=a.createContext({}),c=function(n){var e=a.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},u=function(n){var e=c(n.components);return a.createElement(l.Provider,{value:e},n.children)},m="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,l=n.parentName,u=s(n,["components","mdxType","originalType","parentName"]),m=c(t),d=o,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return t?a.createElement(f,i(i({ref:e},u),{},{components:t})):a.createElement(f,i({ref:e},u))}));function f(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,i=new Array(r);i[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=n,s[m]="string"==typeof n?n:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},390:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const r={id:"how-to-create-a-custom-page-transition",title:"How To Create a Custom Page Transition"},i="How To Create a Custom Page Transition",s={unversionedId:"guides/graphics-and-animation/how-to-create-a-custom-page-transition",id:"guides/graphics-and-animation/how-to-create-a-custom-page-transition",title:"How To Create a Custom Page Transition",description:"This guide will show you how to create your own custom page transition by implementing the IPageTransition interface.",source:"@site/docs/guides/graphics-and-animation/how-to-create-a-custom-page-transition.md",sourceDirName:"guides/graphics-and-animation",slug:"/guides/graphics-and-animation/how-to-create-a-custom-page-transition",permalink:"/avalonia-docs/docs/next/guides/graphics-and-animation/how-to-create-a-custom-page-transition",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/graphics-and-animation/how-to-create-a-custom-page-transition.md",tags:[],version:"current",frontMatter:{id:"how-to-create-a-custom-page-transition",title:"How To Create a Custom Page Transition"},sidebar:"documentationSidebar",previous:{title:"How To Add Menu Icons",permalink:"/avalonia-docs/docs/next/guides/graphics-and-animation/how-to-add-menu-icons"},next:{title:"How To Use Icons",permalink:"/avalonia-docs/docs/next/guides/graphics-and-animation/how-to-use-icons"}},l={},c=[{value:"Example",id:"example",level:2},{value:"More Information",id:"more-information",level:2}],u={toc:c},m="wrapper";function p(n){let{components:e,...t}=n;return(0,o.kt)(m,(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"how-to-create-a-custom-page-transition"},"How To Create a Custom Page Transition"),(0,o.kt)("p",null,"This guide will show you how to create your own custom page transition by implementing the ",(0,o.kt)("inlineCode",{parentName:"p"},"IPageTransition")," interface."),(0,o.kt)("p",null,"The interface has a single method that you need to implement:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public Task Start(Visual? from, Visual? to, bool forward, \n                                CancellationToken cancellationToken)\n{\n    // Setup the transition here.\n}\n")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"This example will shrink the old view and then open up the new view vertically."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},'using Avalonia.VisualTree;\n\npublic class CustomTransition : IPageTransition\n{\n    /// <summary>\n    /// Initializes a new instance of the <see cref="CustomTransition"/> class.\n    /// </summary>\n    public CustomTransition()\n    {\n    }\n\n    /// <summary>\n    /// Initializes a new instance of the <see cref="CustomTransition"/> class.\n    /// </summary>\n    /// <param name="duration">The duration of the animation.</param>\n    public CustomTransition(TimeSpan duration)\n    {\n        Duration = duration;\n    }\n\n    /// <summary>\n    /// Gets the duration of the animation.\n    /// </summary>\n    public TimeSpan Duration { get; set; }\n\n    public async Task Start(Visual from, Visual to, bool forward, \n                                            CancellationToken cancellationToken)\n    {\n        if (cancellationToken.IsCancellationRequested)\n        {\n            return;\n        }\n\n        var tasks = new List<Task>();\n        var parent = GetVisualParent(from, to);\n        var scaleYProperty = ScaleTransform.ScaleYProperty;\n\n        if (from != null)\n        {\n            var animation = new Animation\n            {\n                FillMode = FillMode.Forward,\n                Children =\n                {\n                    new KeyFrame\n                    {\n                        Setters = { new Setter \n                        { Property = scaleYProperty, Value = 1d } },\n                        Cue = new Cue(0d)\n                    },\n                    new KeyFrame\n                    {\n                        Setters =\n                        {\n                            new Setter\n                            {\n                                Property = scaleYProperty,\n                                Value = 0d\n                            }\n                        },\n                        Cue = new Cue(1d)\n                    }\n                },\n                Duration = Duration\n            };\n            tasks.Add(animation.RunAsync(from, cancellationToken));\n        }\n\n        if (to != null)\n        {\n            to.IsVisible = true;\n            var animation = new Animation\n            {\n                FillMode = FillMode.Forward,\n                Children =\n                {\n                    new KeyFrame\n                    {\n                        Setters =\n                        {\n                            new Setter\n                            {\n                                Property = scaleYProperty,\n                                Value = 0d\n                            }\n                        },\n                        Cue = new Cue(0d)\n                    },\n                    new KeyFrame\n                    {\n                        Setters = { new Setter \n                        { \n                            Property = scaleYProperty, Value = 1d \n                        }},\n                        Cue = new Cue(1d)\n                    }\n                },\n                Duration = Duration\n            };\n            tasks.Add(animation.RunAsync(to, cancellationToken));\n        }\n\n        await Task.WhenAll(tasks);\n\n        if (from != null && !cancellationToken.IsCancellationRequested)\n        {\n            from.IsVisible = false;\n        }\n    }\n\n    /// <summary>\n    /// Gets the common visual parent of the two control.\n    /// </summary>\n    /// <param name="from">The from control.</param>\n    /// <param name="to">The to control.</param>\n    /// <returns>The common parent.</returns>\n    /// <exception cref="ArgumentException">\n    /// The two controls do not share a common parent.\n    /// </exception>\n    /// <remarks>\n    /// Any one of the parameters may be null, but not both.\n    /// </remarks>\n    private static Visual GetVisualParent(Visual? from, Visual? to)\n    {\n        var p1 = (from ?? to)!.GetVisualParent();\n        var p2 = (to ?? from)!.GetVisualParent();\n\n        if (p1 != null && p2 != null && p1 != p2)\n        {\n            throw new ArgumentException(\n                                "Controls for PageSlide must have same parent.");\n        }\n\n        return p1 ?? throw new InvalidOperationException(\n                                                "Cannot determine visual parent.");\n    }\n}\n')),(0,o.kt)("img",{src:"/img/gitbook-import/assets/TransitioningContentControl\\_03.webp",alt:""}),(0,o.kt)("h2",{id:"more-information"},"More Information"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"For the complete API documentation about this interface see ",(0,o.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia.Animation/IPageTransition/"},"here"),".")),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"View the source code on ",(0,o.kt)("em",{parentName:"p"},"GitHub")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Animation/IPageTransition.cs"},(0,o.kt)("inlineCode",{parentName:"a"},"IPageTransition.cs")))))}p.isMDXComponent=!0}}]);