"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[2087],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(h,r(r({ref:t},p),{},{components:n})):o.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},16167:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(87462),i=(n(67294),n(3905));const a=n.p+"assets/images/image (1) (1)-ed7f8d0133e525b4c4b045660ab96364.png",r={description:"TUTORIALS - To Do List App"},l="Create a New View",s={unversionedId:"tutorials/todo-list-app/creating-a-view",id:"tutorials/todo-list-app/creating-a-view",title:"Create a New View",description:"TUTORIALS - To Do List App",source:"@site/docs/tutorials/todo-list-app/creating-a-view.md",sourceDirName:"tutorials/todo-list-app",slug:"/tutorials/todo-list-app/creating-a-view",permalink:"/avalonia-docs/docs/next/tutorials/todo-list-app/creating-a-view",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/tutorials/todo-list-app/creating-a-view.md",tags:[],version:"current",frontMatter:{description:"TUTORIALS - To Do List App"},sidebar:"documentationSidebar",previous:{title:"Create a New Project",permalink:"/avalonia-docs/docs/next/tutorials/todo-list-app/creating-a-new-project"},next:{title:"Inspect the XAML",permalink:"/avalonia-docs/docs/next/tutorials/todo-list-app/inspect-the-xaml"}},c={},p=[{value:"Visual Studio",id:"visual-studio",level:3},{value:".NET Core CLI",id:"net-core-cli",level:3},{value:"The User Control",id:"the-user-control",level:3},{value:"Resize the Preview Pane",id:"resize-the-preview-pane",level:3},{value:"Edit the User Control",id:"edit-the-user-control",level:3}],d={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"create-a-new-view"},"Create a New View"),(0,i.kt)("p",null,"On this page, you will add a view to display the list of to do items, with a button to add a new item."),(0,i.kt)("p",null,"To get the tutorial started, you will use hard-coded data for the list items. Later you will connect the view to some data in the view model."),(0,i.kt)("p",null,"In ",(0,i.kt)("em",{parentName:"p"},"Avalonia UI"),", the UI element corresponding to a MVVM view can be either a window or a user control. This new view will be user control, and later you will use the main window to display it."),(0,i.kt)("h3",{id:"visual-studio"},"Visual Studio"),(0,i.kt)("p",null,"Follow these instructions to add a new user control:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In the ",(0,i.kt)("strong",{parentName:"li"},"Solution Explorer")," locate and right-click the ",(0,i.kt)("strong",{parentName:"li"},"Views")," folder."," "),(0,i.kt)("li",{parentName:"ul"},"Click ",(0,i.kt)("strong",{parentName:"li"},"Add")," and then ",(0,i.kt)("strong",{parentName:"li"},"New Item")),(0,i.kt)("li",{parentName:"ul"},"Click ",(0,i.kt)("strong",{parentName:"li"},"Avalonia")," under ",(0,i.kt)("strong",{parentName:"li"},"C# Items")," and then click ",(0,i.kt)("strong",{parentName:"li"},"User Control (Avalonia)")),(0,i.kt)("li",{parentName:"ul"},"In ",(0,i.kt)("strong",{parentName:"li"},"Name")," enter 'ToDoListView'"," "),(0,i.kt)("li",{parentName:"ul"},"Click ",(0,i.kt)("strong",{parentName:"li"},"Add"))),(0,i.kt)("h3",{id:"net-core-cli"},".NET Core CLI"),(0,i.kt)("p",null,"Run the following command from the root folder of your project, that is the folder that contains the ",(0,i.kt)("inlineCode",{parentName:"p"},"Program.cs")," file and the ",(0,i.kt)("inlineCode",{parentName:"p"},"/Views")," folder:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dotnet new avalonia.usercontrol -o Views -n ToDoListView  --namespace ToDoList.Views\n")),(0,i.kt)("h3",{id:"the-user-control"},"The User Control"),(0,i.kt)("p",null,"You will see the new AXAML file created in the ",(0,i.kt)("inlineCode",{parentName:"p"},"/Views")," folder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"\n             x:Class="ToDoList.Views.ToDoListView">\n  Welcome to Avalonia!\n</UserControl>\n')),(0,i.kt)("p",null,"You will also find a ",(0,i.kt)("inlineCode",{parentName:"p"},"ToDoListView.axaml.cs")," file containing the code-behind for the view (in Visual Studio this is nested under the AXAML file. The code-behind looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"using Avalonia.Controls;\n\nnamespace ToDoList.Views\n{\n    public partial class ToDoListView : UserControl\n    {\n        public ToDoListView()\n        {\n            InitializeComponent();\n        }\n    }\n}\n")),(0,i.kt)("p",null,"You are not going to change the code-behind file in this tutorial, but notice that the user control class is called ",(0,i.kt)("inlineCode",{parentName:"p"},"ToDoListView")," and it is located in the ",(0,i.kt)("inlineCode",{parentName:"p"},"ToDoList.Views")," namespace."),(0,i.kt)("h3",{id:"resize-the-preview-pane"},"Resize the Preview Pane"),(0,i.kt)("p",null,"To make the design-time preview look more like a mobile phone in portrait orientation, locate the design-time width and height properties for the user control and set them as shown:"),(0,i.kt)("pre",{class:"language-markup"},(0,i.kt)("code",{class:"lang-markup"},(0,i.kt)("strong",null,"<UserControl"),(0,i.kt)("strong",null,"..."),(0,i.kt)("strong",null,'d:DesignWidth="250" d:DesignHeight="450"'),(0,i.kt)("strong",null,"... >"),(0,i.kt)("strong",null))),(0,i.kt)("p",null,"Repeat the process with the main window."," "),(0,i.kt)("h3",{id:"edit-the-user-control"},"Edit the User Control"),(0,i.kt)("p",null,"Edit the contents of ",(0,i.kt)("inlineCode",{parentName:"p"},"Views/TodoListView.axaml")," to contain the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-markup"},'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             mc:Ignorable="d" d:DesignWidth="250" d:DesignHeight="450"\n             x:Class="ToDoList.Views.ToDoListView">\n  <DockPanel>\n    <Button DockPanel.Dock="Bottom"\n            HorizontalAlignment="Stretch"\n            HorizontalContentAlignment="Center">\n        Add Item\n    </Button>\n    <StackPanel>\n      <CheckBox Margin="4">Walk the dog</CheckBox>\n      <CheckBox Margin="4">Buy some milk</CheckBox>\n    </StackPanel>\n  </DockPanel>\n</UserControl>\n')),(0,i.kt)("p",null,"If you are using the Visual Studio extension you should see the contents of the control displayed in the previewer after completing a build:"),(0,i.kt)("img",{className:"center",src:a,alt:""}))}m.isMDXComponent=!0}}]);