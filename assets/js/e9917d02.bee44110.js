"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[82010],{1320:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(85893),a=t(11151);const r={id:"create-a-custom-panel",title:"How To Create a Custom Panel"},s="How To Create a Custom Panel",i={id:"guides/custom-controls/create-a-custom-panel",title:"How To Create a Custom Panel",description:"This example shows how to override the default layout behavior of the Panel element and create custom layout elements that are derived from Panel.",source:"@site/docs/guides/custom-controls/create-a-custom-panel.md",sourceDirName:"guides/custom-controls",slug:"/guides/custom-controls/create-a-custom-panel",permalink:"/avalonia-docs/docs/guides/custom-controls/create-a-custom-panel",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/custom-controls/create-a-custom-panel.md",tags:[],version:"current",frontMatter:{id:"create-a-custom-panel",title:"How To Create a Custom Panel"},sidebar:"documentationSidebar",previous:{title:"Types of Control",permalink:"/avalonia-docs/docs/guides/custom-controls/types-of-control"},next:{title:"Defining Properties",permalink:"/avalonia-docs/docs/guides/custom-controls/defining-properties"}},c={},l=[];function d(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"how-to-create-a-custom-panel",children:"How To Create a Custom Panel"}),"\n",(0,o.jsxs)(n.p,{children:["This example shows how to override the default layout behavior of the ",(0,o.jsx)(n.code,{children:"Panel"})," element and create custom layout elements that are derived from ",(0,o.jsx)(n.code,{children:"Panel"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["The example defines a simple custom ",(0,o.jsx)(n.code,{children:"Panel"})," element called ",(0,o.jsx)(n.code,{children:"PlotPanel"}),", which positions child elements according to two hard-coded x- and y-coordinates. In this example, ",(0,o.jsx)(n.code,{children:"x"})," and ",(0,o.jsx)(n.code,{children:"y"})," are both set to ",(0,o.jsx)(n.code,{children:"50"}),"; therefore, all child elements are positioned at that location on the x and y axes."]}),"\n",(0,o.jsxs)(n.p,{children:["To implement custom ",(0,o.jsx)(n.code,{children:"Panel"})," behaviors, the example uses the ",(0,o.jsx)(n.code,{children:"MeasureOverride"})," and ",(0,o.jsx)(n.code,{children:"ArrangeOverride"})," methods. Each method returns the ",(0,o.jsx)(n.code,{children:"Size"})," data that is necessary to position and render child elements."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public class PlotPanel : Panel\n{\n    // Override the default Measure method of Panel\n    protected override Size MeasureOverride(Size availableSize)\n    {\n        var panelDesiredSize = new Size();\n\n        // In our example, we just have one child. \n        // Report that our panel requires just the size of its only child.\n        foreach (var child in Children)\n        {\n            child.Measure(availableSize);\n            panelDesiredSize = child.DesiredSize;\n        }\n\n        return panelDesiredSize;\n    }\n\n    protected override Size ArrangeOverride(Size finalSize)\n    {\n        foreach (var child in Children)\n        {\n            double x = 50;\n            double y = 50;\n\n            child.Arrange(new Rect(new Point(x, y), child.DesiredSize));\n        }\n        \n        return finalSize; // Returns the final Arranged size\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>s});var o=t(67294);const a={},r=o.createContext(a);function s(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);