"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[53857],{28150:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>d,toc:()=>p});var a=t(85893),o=t(11151);const i=t.p+"assets/images/image (61)-0a176b81a5eb960a93889af22c5579ca.png",s=t.p+"assets/images/image (15) (2)-c3bc783ecd44f6a5f30ff3657a5db3af.png",r=t.p+"assets/images/image (1) (1) (2)-ce755720af9cd6bd36e8b8991bdd9206.png",c={description:"CONCEPTS"},l="Control Trees",d={id:"concepts/control-trees",title:"Control Trees",description:"CONCEPTS",source:"@site/docs/concepts/control-trees.md",sourceDirName:"concepts",slug:"/concepts/control-trees",permalink:"/avalonia-docs/docs/concepts/control-trees",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/control-trees.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS"},sidebar:"documentationSidebar",previous:{title:"Attached Properties",permalink:"/avalonia-docs/docs/concepts/attached-property"},next:{title:"Data Templates",permalink:"/avalonia-docs/docs/concepts/templates/"}},h={},p=[{value:"Logical Tree",id:"logical-tree",level:2},{value:"Visual Tree",id:"visual-tree",level:2},{value:"Events",id:"events",level:2}];function u(e){const n={em:"em",h1:"h1",h2:"h2",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"control-trees",children:"Control Trees"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Avalonia UI"})," creates control trees from the XAML files in an application so that it can render the UI presentation and manage the application functionality."]}),"\n",(0,a.jsx)(n.h2,{id:"logical-tree",children:"Logical Tree"}),"\n",(0,a.jsx)(n.p,{children:"The logical control tree represents the application controls (including the main window) in the hierarchy in which they are defined in the XAML. For example: and control (button) inside another control (stack panel) in a window will have the 3-layer logical tree shown here:"}),"\n",(0,a.jsx)("img",{src:i,alt:""}),"\n",(0,a.jsxs)(n.p,{children:["While your application is running, you can show the ",(0,a.jsx)(n.em,{children:"Avalonia Dev Tools"})," window (hit F12). This displays the logical tree on its ",(0,a.jsx)(n.strong,{children:"Logical Tree"})," tab."]}),"\n",(0,a.jsx)(n.h2,{id:"visual-tree",children:"Visual Tree"}),"\n",(0,a.jsxs)(n.p,{children:["The visual control tree contains everything that is actually being run by ",(0,a.jsx)(n.em,{children:"Avalonia UI"}),". It shows all the properties set on the controls, and all the additional parts that have been added by ",(0,a.jsx)(n.em,{children:"Avalonia UI"})," in order to present the UI and manage the application functionality."]}),"\n",(0,a.jsx)("img",{src:s,alt:""}),"\n",(0,a.jsxs)(n.p,{children:["You can see the visual control tree on the ",(0,a.jsx)(n.strong,{children:"Visual Tree"})," tab of the ",(0,a.jsx)(n.em,{children:"Avalonia Dev Tools"})," window."]}),"\n",(0,a.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,a.jsxs)(n.p,{children:["An essential part of application functionality management performed by ",(0,a.jsx)(n.em,{children:"Avalonia UI"}),", is the generation and propagation of events. The ",(0,a.jsx)(n.strong,{children:"Events"})," tab logs the source and propagation of events as you move around, and otherwise interact with the running application."]}),"\n",(0,a.jsx)("img",{src:r,alt:""})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>r,a:()=>s});var a=t(67294);const o={},i=a.createContext(o);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);