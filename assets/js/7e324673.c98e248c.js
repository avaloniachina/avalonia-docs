"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[11359],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=a,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51598:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const i=n.p+"assets/images/image (6)-6efe0b4c5591b829358ae17be4c8cb8a.png",o=n.p+"assets/images/image (13)-74a31a02636b7a314a5c5f39cef43f27.png",s={id:"maintaining-stable-branch-pr-merge-process",title:"Maintaining Stable Branch"},l=void 0,c={unversionedId:"guides/developer-guides/maintaining-stable-branch-pr-merge-process",id:"version-0.10.x/guides/developer-guides/maintaining-stable-branch-pr-merge-process",title:"Maintaining Stable Branch",description:"This Process MUST be followed during any period that master branch is allowing breaking changes.",source:"@site/versioned_docs/version-0.10.x/guides/developer-guides/maintaining-stable-branch-pr-merge-process.md",sourceDirName:"guides/developer-guides",slug:"/guides/developer-guides/maintaining-stable-branch-pr-merge-process",permalink:"/avalonia-docs/docs/guides/developer-guides/maintaining-stable-branch-pr-merge-process",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/guides/developer-guides/maintaining-stable-branch-pr-merge-process.md",tags:[],version:"0.10.x",frontMatter:{id:"maintaining-stable-branch-pr-merge-process",title:"Maintaining Stable Branch"},sidebar:"documentationSidebar",previous:{title:"Release Process",permalink:"/avalonia-docs/docs/guides/developer-guides/release-process"},next:{title:"Testing with NCrunch",permalink:"/avalonia-docs/docs/guides/developer-guides/testing-with-ncrunch"}},p={},d=[],m={toc:d},u="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"This Process MUST be followed during any period that ",(0,a.kt)("inlineCode",{parentName:"p"},"master")," branch is allowing breaking changes.")),(0,a.kt)("p",null,"In order to maintain a stable branch it is required to follow a process on every PR that gets merged to ensure they are back ported."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"For a PR to be back ported it MUST reach the following criteria"),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"Contain no breaking API changes, (changing signatures, removing a method, etc)\\\nAdditional overloads, methods, classes and extension methods are allowable."),(0,a.kt)("li",{parentName:"ul"},"Be suitable for the stable release, by default most changes and features should be considered."))),(0,a.kt)("p",null,"Provided the criteria are met:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Merge the PR to master generating a merge commit."," "),(0,a.kt)("li",{parentName:"ol"},'i.e. "Merge pull request #5797 from AvaloniaUI/double-tapped-event-args"')),(0,a.kt)("p",null,"At this point the git tree should look similar to this."),(0,a.kt)("img",{className:"center",src:i,alt:""}),(0,a.kt)("p",null,"Now we need to get the new PR merged into the stable branch."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"Pay careful attention here, we don't just merge into the stable branch!")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Checkout the ",(0,a.kt)("inlineCode",{parentName:"li"},"stable/0.10.x")," branch."),(0,a.kt)("li",{parentName:"ul"},"Cherrypick the merge commit from master.")),(0,a.kt)("p",null,"The git tree should look like this now."),(0,a.kt)("img",{className:"center",src:o,alt:""}),(0,a.kt)("p",null,"Please also use the ",(0,a.kt)("inlineCode",{parentName:"p"},"backport-candidate")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"backported 0.10.x")," labels on the PRs themselves."))}g.isMDXComponent=!0}}]);