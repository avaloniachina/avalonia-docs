"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[55827],{71902:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>d,toc:()=>i});var o=n(85893),t=n(11151);const c={description:"REFERENCE - Styles"},r="Pseudo Classes",d={id:"reference/styles/pseudo-classes",title:"Pseudo Classes",description:"REFERENCE - Styles",source:"@site/docs/reference/styles/pseudo-classes.md",sourceDirName:"reference/styles",slug:"/reference/styles/pseudo-classes",permalink:"/avalonia-docs/docs/reference/styles/pseudo-classes",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/reference/styles/pseudo-classes.md",tags:[],version:"current",frontMatter:{description:"REFERENCE - Styles"},sidebar:"documentationSidebar",previous:{title:"Styles",permalink:"/avalonia-docs/docs/reference/styles/"},next:{title:"Style Selector Syntax",permalink:"/avalonia-docs/docs/reference/styles/style-selector-syntax"}},l={},i=[{value:"Custom Pseudo Classes",id:"custom-pseudo-classes",level:3}];function a(e){const s={code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.h1,{id:"pseudo-classes",children:"Pseudo Classes"}),"\n",(0,o.jsx)(s.p,{children:"Pseudo classes are generated by a control, usually as a response to some sort of state."}),"\n",(0,o.jsxs)(s.p,{children:["For example ",(0,o.jsx)(s.code,{children:":pointerover"})," pseudo class indicates that the pointer input is currently over (inside the bounds of) a control."]}),"\n",(0,o.jsxs)(s.p,{children:["Pseudo classes are not set in the ",(0,o.jsx)(s.code,{children:"Classes"})," attributes of a control (unlike style classes)."]}),"\n",(0,o.jsx)(s.p,{children:"Common pseudo classes include:"}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:":focus"}),", ",(0,o.jsx)(s.code,{children:":disabled"}),", ",(0,o.jsx)(s.code,{children:":pressed"})," for buttons, and ",(0,o.jsx)(s.code,{children:":checked"})," for checkboxes."]}),"\n",(0,o.jsx)(s.p,{children:"A control can have more than one pseudo class active at a time."}),"\n",(0,o.jsx)(s.p,{children:"You can target one or more pseudo classes in a style selector.  For example:"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{children:'<Style Selector="Button.red:focus:pointover">\n'})}),"\n",(0,o.jsxs)(s.p,{children:["This selector targets button controls with the red class set, and that are in the ",(0,o.jsx)(s.code,{children:":focus"})," and the ",(0,o.jsx)(s.code,{children:":pointover"})," pseudo class state."]}),"\n",(0,o.jsx)(s.p,{children:"Some common pseudo classes:"}),"\n",(0,o.jsxs)("table",{children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{children:[(0,o.jsx)("th",{width:"187",children:"Pseudo Class"}),(0,o.jsx)("th",{children:"Description"})]})}),(0,o.jsxs)("tbody",{children:[(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("code",{children:":pointerover"})}),(0,o.jsx)("td",{children:"The pointer input is currently over (inside the bounds of) a control"})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("code",{children:":focus"})}),(0,o.jsx)("td",{children:"A control has the input focus."})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("code",{children:":disabled"})}),(0,o.jsx)("td",{children:"A control is unable to respond to user interaction."})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("code",{children:":pressed"})}),(0,o.jsx)("td",{children:"A button control is in the down position."})]}),(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{children:(0,o.jsx)("code",{children:":checked"})}),(0,o.jsx)("td",{children:"A checkbox control is selected (check mark is showing)."})]})]})]}),"\n",(0,o.jsx)(s.h3,{id:"custom-pseudo-classes",children:"Custom Pseudo Classes"}),"\n",(0,o.jsxs)(s.p,{children:["You can create your own pseudo classes for custom controls based on ",(0,o.jsx)(s.code,{children:"CustomControl"})," or ",(0,o.jsx)(s.code,{children:"TemplatedControl"}),". The function below adds or remove a pseudo class depending on a Boolean value on a ",(0,o.jsx)(s.code,{children:"StyledElement"}),"."]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-csharp",children:'PseudoClasses.Set(":className", bool);\n'})})]})}function h(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,o.jsx)(s,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>d,a:()=>r});var o=n(67294);const t={},c=o.createContext(t);function r(e){const s=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(c.Provider,{value:s},e.children)}}}]);