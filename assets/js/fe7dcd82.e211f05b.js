"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[76209],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>m});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=n.createContext({}),s=function(e){var a=n.useContext(c),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},d=function(e){var a=s(e.components);return n.createElement(c.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},h=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(t),h=r,m=p["".concat(c,".").concat(h)]||p[h]||u[h]||i;return t?n.createElement(m,o(o({ref:a},d),{},{components:t})):n.createElement(m,o({ref:a},d))}));function m(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=h;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},65661:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=t(87462),r=(t(67294),t(3905));const i=t.p+"assets/images/get-started-hierarchical-1-94dd68850d3250a90ff7e87e0a67864c.png",o={id:"creating-a-hierarchical-treedatagrid",title:"Creating a Hierarchical TreeDataGrid"},l=void 0,c={unversionedId:"controls/treedatagrid/creating-a-hierarchical-treedatagrid",id:"version-0.10.x/controls/treedatagrid/creating-a-hierarchical-treedatagrid",title:"Creating a Hierarchical TreeDataGrid",description:"There are two parts to any TreeDataGrid:",source:"@site/versioned_docs/version-0.10.x/controls/treedatagrid/creating-a-hierarchical-treedatagrid.md",sourceDirName:"controls/treedatagrid",slug:"/controls/treedatagrid/creating-a-hierarchical-treedatagrid",permalink:"/avalonia-docs/docs/controls/treedatagrid/creating-a-hierarchical-treedatagrid",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/controls/treedatagrid/creating-a-hierarchical-treedatagrid.md",tags:[],version:"0.10.x",frontMatter:{id:"creating-a-hierarchical-treedatagrid",title:"Creating a Hierarchical TreeDataGrid"},sidebar:"documentationSidebar",previous:{title:"TreeDataGrid",permalink:"/avalonia-docs/docs/controls/treedatagrid/"},next:{title:"Creating a Flat TreeDataGrid",permalink:"/avalonia-docs/docs/controls/treedatagrid/creating-a-flat-treedatagrid"}},s={},d=[{value:"Installation",id:"installation",level:3},{value:"The Data Model",id:"the-data-model",level:3},{value:"The <code>TreeDataGrid</code> source",id:"the-treedatagrid-source",level:3},{value:"The <code>TreeDataGrid</code> control",id:"the-treedatagrid-control",level:3},{value:"Run the Application",id:"run-the-application",level:3}],p={toc:d},u="wrapper";function h(e){let{components:a,...t}=e;return(0,r.kt)(u,(0,n.Z)({},p,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There are two parts to any ",(0,r.kt)("inlineCode",{parentName:"p"},"TreeDataGrid"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'The "Source" which is defined in code and describes how your data model will map to the rows and columns of the ',(0,r.kt)("inlineCode",{parentName:"li"},"TreeDataGrid")),(0,r.kt)("li",{parentName:"ul"},"The control which can be instantiated from XAML or from code and describes how the ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeDataGrid")," will appear")),(0,r.kt)("p",null,"The source is usually defined at the view model layer if you're using the MVVM pattern but can also be defined in code-behind. This introduction will assume that you're using the MVVM pattern."),(0,r.kt)("p",null,"This article assumes that you are using C# 10 and have ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references"},"nullable reference types")," enabled."),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"First follow the installation instructions, ensuring that you add the theme to your ",(0,r.kt)("inlineCode",{parentName:"p"},"App.axaml")," file."),(0,r.kt)("h3",{id:"the-data-model"},"The Data Model"),(0,r.kt)("p",null,'The data model is your "source" data that will be displayed in the ',(0,r.kt)("inlineCode",{parentName:"p"},"TreeDataGrid")," and will be specific to your application. For this introduction we will be using a very simple ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Person\n{\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n    public int Age { get; set; }\n    public ObservableCollection<Person> Children { get; } = new();\n}\n")),(0,r.kt)("p",null,"First we create a ",(0,r.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel")," containing our simple dataset:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.ObjectModel;\nusing Avalonia.Controls;\nusing Avalonia.Controls.Models.TreeDataGrid;\n\npublic class MainWindowViewModel\n{\n    private ObservableCollection<Person> _people = new()\n    {\n        new Person \n        { \n            FirstName = "Eleanor", \n            LastName = "Pope", \n            Age = 32,\n            Children =\n            {\n                new Person { FirstName = "Marcel", LastName = "Gutierrez", Age = 4 },\n            }\n        },\n        new Person \n        { \n            FirstName = "Jeremy",\n            LastName = "Navarro",\n            Age = 74,\n            Children =\n            {\n                new Person \n                { \n                    FirstName = "Jane",\n                    LastName = "Navarro",\n                    Age = 42 ,\n                    Children =\n                    {\n                        new Person { FirstName = "Lailah ", LastName = "Velazquez", Age = 16 }\n                    }\n                },\n            }\n        },\n        new Person { FirstName = "Jazmine", LastName = "Schroeder", Age = 52 },\n    };\n}\n')),(0,r.kt)("p",null,"We store the data in an ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.observablecollection-1?view=net-6.0"},(0,r.kt)("inlineCode",{parentName:"a"},"ObservableCollection<T>"))," which will allow the ",(0,r.kt)("inlineCode",{parentName:"p"},"TreeDataGrid")," to listen for changes in the data and automatically update the UI."),(0,r.kt)("h3",{id:"the-treedatagrid-source"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"TreeDataGrid")," source"),(0,r.kt)("p",null,"The source defines how to map the data model to rows and columns. Because we're displaying hierarchical data, we'll use a ",(0,r.kt)("inlineCode",{parentName:"p"},"HierarchicalTreeDataGridSource<Person>"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"HierarchicalTreeDataGridSource")," is a generic class where the type parameter represents the data model type, in this case ",(0,r.kt)("inlineCode",{parentName:"p"},"Person"),"."),(0,r.kt)("p",null,"The constructor to ",(0,r.kt)("inlineCode",{parentName:"p"},"HierarchicalTreeDataGridSource")," accepts a collection of type ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<T>")," to which we'll pass our data set."),(0,r.kt)("p",null,"We'll create the source in the ",(0,r.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel")," constructor, add three columns, and expose the source in a property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class MainWindowViewModel\n{\n    private ObservableCollection<Person> _people = /* defined earlier */\n\n    public MainWindowViewModel()\n    {\n        Source = new HierarchicalTreeDataGridSource<Person>(_people)\n        {\n            Columns =\n            {\n                new HierarchicalExpanderColumn<Person>(\n                    new TextColumn<Person, string>("First Name", x => x.FirstName),\n                    x => x.Children),\n                new TextColumn<Person, string>("Last Name", x => x.LastName),\n                new TextColumn<Person, int>("Age", x => x.Age),\n            },\n        };\n    }\n\n    public HierarchicalTreeDataGridSource<Person> Source { get; }\n}\n')),(0,r.kt)("p",null,"The first column above is defined as a ",(0,r.kt)("inlineCode",{parentName:"p"},"HierarchicalExpanderColumn"),". Its first constructor parameter defines how the data in the column will be displayed. For this we're using a ",(0,r.kt)("inlineCode",{parentName:"p"},"TextColumn")," - see below for details of its constructor parameters. The second parameter to the ",(0,r.kt)("inlineCode",{parentName:"p"},"HierarchicalExpanderColumn")," constructor is a lambda which selects the property which will contain the children of each row."),(0,r.kt)("p",null,"The remaining columns are also defined as ",(0,r.kt)("inlineCode",{parentName:"p"},"TextColumn"),"s - again, ",(0,r.kt)("inlineCode",{parentName:"p"},"TextColumn")," is a generic class that accepts the data model type and a value type. The first parameter to ",(0,r.kt)("inlineCode",{parentName:"p"},"TextColumn")," is the header to display in the column and the second parameter is a lambda expression which selects the value to display from the data model."),(0,r.kt)("h3",{id:"the-treedatagrid-control"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"TreeDataGrid")," control"),(0,r.kt)("p",null,"It's now time to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"TreeDataGrid")," control to a window and bind it to the source."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        x:Class="AvaloniaApplication.MainWindow">\n  <TreeDataGrid Source="{Binding Source}"/>\n</Window>\n')),(0,r.kt)("h3",{id:"run-the-application"},"Run the Application"),(0,r.kt)("p",null,"Run the application and you should see the data appear:"),(0,r.kt)("img",{className:"center",src:i,alt:""}))}h.isMDXComponent=!0}}]);