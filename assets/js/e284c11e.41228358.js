"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[38634],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>b});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(n),m=a,b=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return n?r.createElement(b,o(o({ref:t},s),{},{components:n})):r.createElement(b,o({ref:t},s))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,o[1]=c;for(var d=2;d<i;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1809:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=n(87462),a=(n(67294),n(3905));const i={description:"CONCEPTS - ReactiveUI"},o="Binding to Sorted/Filtered Data",c={unversionedId:"concepts/reactiveui/binding-to-sorted-filtered-list",id:"concepts/reactiveui/binding-to-sorted-filtered-list",title:"Binding to Sorted/Filtered Data",description:"CONCEPTS - ReactiveUI",source:"@site/docs/concepts/reactiveui/binding-to-sorted-filtered-list.md",sourceDirName:"concepts/reactiveui",slug:"/concepts/reactiveui/binding-to-sorted-filtered-list",permalink:"/avalonia-docs/docs/next/concepts/reactiveui/binding-to-sorted-filtered-list",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/reactiveui/binding-to-sorted-filtered-list.md",tags:[],version:"current",frontMatter:{description:"CONCEPTS - ReactiveUI"},sidebar:"documentationSidebar",previous:{title:"Data Persistence",permalink:"/avalonia-docs/docs/next/concepts/reactiveui/data-persistence"},next:{title:"Pseudo Classes",permalink:"/avalonia-docs/docs/next/concepts/pseudo-classes"}},l={},d=[{value:"Creating a Source Cache",id:"creating-a-source-cache",level:2},{value:"Creating Sorted Or Filtered Views",id:"creating-sorted-or-filtered-views",level:2},{value:"Binding",id:"binding",level:2}],s={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"binding-to-sortedfiltered-data"},"Binding to Sorted/Filtered Data"),(0,a.kt)("p",null,"A common UI task that applications need to do is display sorted and/or filtered 'views' of data. In Avalonia this can be accomplished by connecting a ",(0,a.kt)("inlineCode",{parentName:"p"},"SourceCache<TObject, TKey>")," or a ",(0,a.kt)("inlineCode",{parentName:"p"},"SourceList<T>")," to a ",(0,a.kt)("inlineCode",{parentName:"p"},"ReadOnlyObservableCollection<T>")," and binding to that collection"),(0,a.kt)("h2",{id:"creating-a-source-cache"},"Creating a Source Cache"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"SourceCache<TObject, TKey>")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"SourceList<T>")," come from ",(0,a.kt)("a",{parentName:"p",href:"https://www.reactiveui.net/docs/handbook/collections/"},"Dynamic Data in ReactiveUI")," Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"// (x => x.Id) property that serves as the unique key for the cache\nprivate SourceCache<TestViewModel, Guid> _sourceCache = new (x => x.Id);\n")),(0,a.kt)("p",null,"Then the ",(0,a.kt)("inlineCode",{parentName:"p"},"_sourceCache")," can be populated through the ",(0,a.kt)("inlineCode",{parentName:"p"},"AddOrUpdate")," method"),(0,a.kt)("h2",{id:"creating-sorted-or-filtered-views"},"Creating Sorted Or Filtered Views"),(0,a.kt)("p",null,"Next the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReadOnlyObservableCollection<T>")," can be bound to the filtered or sorted ",(0,a.kt)("inlineCode",{parentName:"p"},"_sourceCache"),". The sorting/filtering is done similarly to linq."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp"},"private readonly ReadOnlyObservableCollection<TestViewModel> _testViewModels;\npublic ReadOnlyObservableCollection<TestViewModel> TestViewModels => _testViewModels;\n...\npublic MainWindowViewModel(){\n    // Populate the source cache via _sourceCache.AddOrUpdate\n    ...\n    _sourceCache.Connect()\n        // Sort Ascending on the OrderIndex property\n        .Sort(SortExpressionComparer<TestViewModel>.Ascending(t => t.OrderIndex))\n        .Filter(x => x.Id.ToString().EndsWith('1'))\n        // Bind to our ReadOnlyObservableCollection<T>\n        .Bind(out _testViewModels)\n        // Subscribe for changes\n        .Subscribe();\n}\n")),(0,a.kt)("h2",{id:"binding"},"Binding"),(0,a.kt)("p",null,"Now that the ",(0,a.kt)("inlineCode",{parentName:"p"},"_sourceCache")," is created and populated and the ",(0,a.kt)("inlineCode",{parentName:"p"},"ReadOnlyObservableCollection<T>")," is created and bound we can go into our view and bind exactly the way we normally would with an ",(0,a.kt)("inlineCode",{parentName:"p"},"ObservableCollection<T>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-markup"},'    <Design.DataContext>\n        <vm:MainWindowViewModel/>\n    </Design.DataContext>\n\n    <TreeView ItemsSource="{Binding TestViewModels}">\n        <TreeView.DataTemplates>\n            !-- DataTemplate Definitions --\x3e\n        </TreeView.DataTemplates> \n    </TreeView>\n')))}u.isMDXComponent=!0}}]);