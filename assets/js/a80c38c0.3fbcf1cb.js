"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[3694],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(a),m=r,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return a?n.createElement(h,o(o({ref:t},c),{},{components:a})):n.createElement(h,o({ref:t},c))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},55019:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const i=a.p+"assets/images/get-started-flat-1-fb0b713c8531330e947d2d7c58000173.png",o={id:"creating-a-flat-treedatagrid",title:"Creating a Flat TreeDataGrid"},l=void 0,s={unversionedId:"controls/treedatagrid/creating-a-flat-treedatagrid",id:"version-0.10.x/controls/treedatagrid/creating-a-flat-treedatagrid",title:"Creating a Flat TreeDataGrid",description:"There are two parts to any TreeDataGrid:",source:"@site/versioned_docs/version-0.10.x/controls/treedatagrid/creating-a-flat-treedatagrid.md.md",sourceDirName:"controls/treedatagrid",slug:"/controls/treedatagrid/creating-a-flat-treedatagrid",permalink:"/avalonia-docs/docs/controls/treedatagrid/creating-a-flat-treedatagrid",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/controls/treedatagrid/creating-a-flat-treedatagrid.md.md",tags:[],version:"0.10.x",frontMatter:{id:"creating-a-flat-treedatagrid",title:"Creating a Flat TreeDataGrid"},sidebar:"documentationSidebar",previous:{title:"Creating a Hierarchical TreeDataGrid",permalink:"/avalonia-docs/docs/controls/treedatagrid/creating-a-hierarchical-treedatagrid"},next:{title:"TreeDataGrid column types",permalink:"/avalonia-docs/docs/controls/treedatagrid/treedatagrid-column-types"}},d={},c=[{value:"Installation",id:"installation",level:3},{value:"The Data Model",id:"the-data-model",level:3},{value:"The <code>TreeDataGrid</code> source",id:"the-treedatagrid-source",level:3},{value:"The <code>TreeDataGrid</code> control",id:"the-treedatagrid-control",level:3},{value:"Run the Application",id:"run-the-application",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"There are two parts to any ",(0,r.kt)("inlineCode",{parentName:"p"},"TreeDataGrid"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'The "Source" which is defined in code and describes how your data model will map to the rows and columns of the ',(0,r.kt)("inlineCode",{parentName:"li"},"TreeDataGrid")),(0,r.kt)("li",{parentName:"ul"},"The control which can be instantiated from XAML or from code and describes how the ",(0,r.kt)("inlineCode",{parentName:"li"},"TreeDataGrid")," will appear")),(0,r.kt)("p",null,"The source is usually defined at the view model layer if you're using the MVVM pattern but can also be defined in code-behind. This introduction will assume that you're using the MVVM pattern."),(0,r.kt)("p",null,"This article assumes that you are using C# 10 and have ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/csharp/nullable-references"},"nullable reference types")," enabled."),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"First follow the installation instructions, ensuring that you add the theme to your ",(0,r.kt)("inlineCode",{parentName:"p"},"App.axaml")," file."),(0,r.kt)("h3",{id:"the-data-model"},"The Data Model"),(0,r.kt)("p",null,'The data model is your "source" data that will be displayed in the ',(0,r.kt)("inlineCode",{parentName:"p"},"TreeDataGrid")," and will be specific to your application. For this introduction we will be using a very simple ",(0,r.kt)("inlineCode",{parentName:"p"},"Person")," class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"public class Person\n{\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n    public int Age { get; set; }\n}\n")),(0,r.kt)("p",null,"First we create a ",(0,r.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel")," containing our simple dataset:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using System.Collections.ObjectModel;\nusing Avalonia.Controls;\nusing Avalonia.Controls.Models.TreeDataGrid;\n\npublic class MainWindowViewModel\n{\n    private ObservableCollection<Person> _people = new()\n    {\n        new Person { FirstName = "Eleanor", LastName = "Pope", Age = 32 },\n        new Person { FirstName = "Jeremy", LastName = "Navarro", Age = 74 },\n        new Person { FirstName = "Lailah ", LastName = "Velazquez", Age = 16 },\n        new Person { FirstName = "Jazmine", LastName = "Schroeder", Age = 52 },\n    };\n}\n')),(0,r.kt)("p",null,"We store the data in an ",(0,r.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.objectmodel.observablecollection-1?view=net-6.0"},(0,r.kt)("inlineCode",{parentName:"a"},"ObservableCollection<T>"))," which will allow the ",(0,r.kt)("inlineCode",{parentName:"p"},"TreeDataGrid")," to listen for changes in the data and automatically update the UI."),(0,r.kt)("h3",{id:"the-treedatagrid-source"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"TreeDataGrid")," source"),(0,r.kt)("p",null,"The source defines how to map the data model to rows and columns. Because we're displaying non-hierarchical data, we'll use a ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatTreeDataGridSource<Person>"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatTreeDataGridSource")," is a generic class where the type parameter represents the data model type, in this case ",(0,r.kt)("inlineCode",{parentName:"p"},"Person"),"."),(0,r.kt)("p",null,"The constructor to ",(0,r.kt)("inlineCode",{parentName:"p"},"FlatTreeDataGridSource")," accepts a collection of type ",(0,r.kt)("inlineCode",{parentName:"p"},"IEnumerable<T>")," to which we'll pass our data set."),(0,r.kt)("p",null,"We'll create the source in the ",(0,r.kt)("inlineCode",{parentName:"p"},"MainWindowViewModel")," constructor, add three columns, and expose the source in a property:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class MainWindowViewModel\n{\n    private ObservableCollection<Person> _people = /* defined earlier */\n\n    public MainWindowViewModel()\n    {\n        Source = new FlatTreeDataGridSource<Person>(_people)\n        {\n            Columns =\n            {\n                new TextColumn<Person, string>("First Name", x => x.FirstName),\n                new TextColumn<Person, string>("Last Name", x => x.LastName),\n                new TextColumn<Person, int>("Age", x => x.Age),\n            },\n        };\n    }\n\n    public FlatTreeDataGridSource<Person> Source { get; }\n}\n')),(0,r.kt)("p",null,"The columns above are defined as ",(0,r.kt)("inlineCode",{parentName:"p"},"TextColumn"),"s - again, ",(0,r.kt)("inlineCode",{parentName:"p"},"TextColumn")," is a generic class that accepts the data model type and a value type. The first parameter is the header to display in the column and the second parameter is a lambda expression which selects the value to display from the data model."),(0,r.kt)("h3",{id:"the-treedatagrid-control"},"The ",(0,r.kt)("inlineCode",{parentName:"h3"},"TreeDataGrid")," control"),(0,r.kt)("p",null,"It's now time to add the ",(0,r.kt)("inlineCode",{parentName:"p"},"TreeDataGrid")," control to a window and bind it to the source."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-markup"},'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        x:Class="AvaloniaApplication.MainWindow">\n  <TreeDataGrid Source="{Binding Source}"/>\n</Window>\n')),(0,r.kt)("h3",{id:"run-the-application"},"Run the Application"),(0,r.kt)("p",null,"Run the application and you should see the data appear:"),(0,r.kt)("img",{className:"center",src:i,alt:""}))}m.isMDXComponent=!0}}]);