"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[52353],{96040:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>p,default:()=>m,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var a=i(85893),s=i(11151);const r=i.p+"assets/images/avalonia-raspbian-lite-drm-kmscube-a0f330d09b27aa4497a2b324c7644322.gif",t=i.p+"assets/images/avalonia-raspbian-lite-drm-desktop-c76c51e445fece347fb52774df2bda8d.jpg",o=i.p+"assets/images/avalonia-raspbian-lite-drm-run-on-raspberry-95dfa4d7dabb2228d3de1b80e1e01635.jpg",l={id:"running-on-raspbian-lite-via-drm",title:"Running your Avalonia app on a Raspberry Pi with Raspbian Lite"},p="Running your Avalonia app on a Raspberry Pi with Raspbian Lite",d={id:"guides/deep-dives/running-on-raspbian-lite-via-drm",title:"Running your Avalonia app on a Raspberry Pi with Raspbian Lite",description:"This tutorial shows you how to run your Avalonia app on a Raspberry Pi with Raspbian Lite",source:"@site/versioned_docs/version-0.10.x/guides/deep-dives/running-on-raspbian-lite-via-drm.md",sourceDirName:"guides/deep-dives",slug:"/guides/deep-dives/running-on-raspbian-lite-via-drm",permalink:"/avalonia-docs/docs/0.10.x/guides/deep-dives/running-on-raspbian-lite-via-drm",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/versioned_docs/version-0.10.x/guides/deep-dives/running-on-raspbian-lite-via-drm.md",tags:[],version:"0.10.x",frontMatter:{id:"running-on-raspbian-lite-via-drm",title:"Running your Avalonia app on a Raspberry Pi with Raspbian Lite"},sidebar:"documentationSidebar",previous:{title:"Running your app on a Raspberry Pi",permalink:"/avalonia-docs/docs/0.10.x/guides/deep-dives/running-your-app-on-a-raspberry-pi"},next:{title:"ReactiveUI",permalink:"/avalonia-docs/docs/0.10.x/guides/deep-dives/reactiveui/"}},c={},h=[{value:"Step 1 - Setup the Raspberry Pi",id:"step-1---setup-the-raspberry-pi",level:3},{value:"1.1 Download the Raspbian lite operation system image.",id:"11-download-the-raspbian-lite-operation-system-image",level:4},{value:"1.1 Prepare Raspberry for flashing",id:"11-prepare-raspberry-for-flashing",level:4},{value:"1.2 Flashing the operating system",id:"12-flashing-the-operating-system",level:4},{value:"1.3 Install missing libraries",id:"13-install-missing-libraries",level:4},{value:"1.4 Verify DRM (optional)",id:"14-verify-drm-optional",level:4},{value:"Step 2 - Prepare Avalonia App",id:"step-2---prepare-avalonia-app",level:3},{value:"Step 3 - Deploy and run on Raspberry",id:"step-3---deploy-and-run-on-raspberry",level:3}];function u(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"running-your-avalonia-app-on-a-raspberry-pi-with-raspbian-lite",children:"Running your Avalonia app on a Raspberry Pi with Raspbian Lite"}),"\n",(0,a.jsxs)(n.p,{children:["This tutorial shows you how to run your Avalonia app on a Raspberry Pi with Raspbian Lite\nvia ",(0,a.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Direct_Rendering_Manager",children:"DRM"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"step-1---setup-the-raspberry-pi",children:"Step 1 - Setup the Raspberry Pi"}),"\n",(0,a.jsx)(n.p,{children:"First step is to setup your Raspberry Pi."}),"\n",(0,a.jsx)(n.h4,{id:"11-download-the-raspbian-lite-operation-system-image",children:"1.1 Download the Raspbian lite operation system image."}),"\n",(0,a.jsxs)(n.p,{children:["You can download the Raspbian lite operating system image from the official Raspberry Pi website.",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.a,{href:"https://www.raspberrypi.com/software/operating-systems/",children:"Link to Raspberry Pi Operating system images"})]}),"\n",(0,a.jsx)(n.h4,{id:"11-prepare-raspberry-for-flashing",children:"1.1 Prepare Raspberry for flashing"}),"\n",(0,a.jsx)(n.p,{children:"The installation of Raspberry Lite is a bit different depending on the model."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"https://www.raspberrypi.com/products/raspberry-pi-4-model-b/",children:"Raspberry Pi 4 b"})}),(0,a.jsx)(n.br,{}),"\n","For the Pi 4 b you need a SD Card on which the operating system will be installed.",(0,a.jsx)(n.br,{}),"\n","Insert the SD card into your computer.",(0,a.jsx)(n.br,{}),"\n","You can now go directly to step 1.2."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:(0,a.jsx)(n.a,{href:"https://www.raspberrypi.com/products/compute-module-4/?variant=raspberry-pi-cm4001000",children:"Raspberry CM4"})}),(0,a.jsx)(n.br,{}),"\n","Since the CM4 is designed for embedded applications you still need an IO board. For this there is the\nofficial ",(0,a.jsx)(n.a,{href:"https://www.raspberrypi.com/products/compute-module-4-io-board/",children:"Compute Module 4 IO board"})," or alternatively\nmany other boards like the ",(0,a.jsx)(n.a,{href:"https://sourcekit.cc/#/?id=sourcekit%C2%AE-pitray-mini",children:"SourceKit PiTray mini"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["To prepare the EMMC memory for mounting follow\nthese ",(0,a.jsx)(n.a,{href:"https://www.raspberrypi.com/documentation/computers/compute-module.html#flashing-the-compute-module-emmc",children:"steps"}),"."]}),"\n",(0,a.jsx)(n.h4,{id:"12-flashing-the-operating-system",children:"1.2 Flashing the operating system"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://etcher.io/",children:"Download"})," the Etcher image writing utility and install it."]}),"\n",(0,a.jsx)(n.li,{children:"Open Etcher and select from your hard drive the .zip file you downloaded in step 1.1."}),"\n",(0,a.jsx)(n.li,{children:"Select the mass storage (SD card or CM4 EMMC) you wish to write your image to."}),"\n",(0,a.jsxs)(n.li,{children:["Review your selections and click 'Flash!' to begin writing data. Once flashing is complete, create a new empty file\nnamed ",(0,a.jsx)(n.strong,{children:"ssh"})," (with no extension, e.q with ",(0,a.jsx)(n.code,{children:"touch ssh"}),") in the boot drive of the Raspberry. This will ensure that the SSH daemon is enabled\nonce the Raspberry Pi has started and you can logon over the network."]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsxs)(n.em,{children:[(0,a.jsx)(n.strong,{children:"Only for Cm4"})," add the following to ",(0,a.jsx)(n.code,{children:"/boot/config.txt"})," to enable the Usb 2.0 ports"]})}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"dtoverlay=dwc2,dr_mode=host\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Start up your Raspberry and login.",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.strong,{children:"Raspberry Pi 4 b"}),": Put the SD card into the Raspberry and plug in power supply",(0,a.jsx)(n.br,{}),"\n",(0,a.jsx)(n.strong,{children:"CM 4"}),": On CM4 IO Board unplug the power supply, remove J2 jumper, plug in power supply again"]}),"\n"]}),"\n",(0,a.jsx)(n.h4,{id:"13-install-missing-libraries",children:"1.3 Install missing libraries"}),"\n",(0,a.jsx)(n.p,{children:"Some libraries required to run a Avalonia app via DRM on raspbian lite:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo apt update\nsudo apt upgrade\nsudo reboot\nsudo apt-get install libgbm1 libgl1-mesa-dri libegl1-mesa libinput10\n"})}),"\n",(0,a.jsx)(n.h4,{id:"14-verify-drm-optional",children:"1.4 Verify DRM (optional)"}),"\n",(0,a.jsxs)(n.p,{children:["You can test your installation with a simple but useful tool called ",(0,a.jsx)(n.a,{href:"https://gitlab.freedesktop.org/mesa/kmscube",children:"kmscube"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo apt-get install kmscube\nsudo kmscube\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should see the spinning cube on your Raspberry pi screen now:"}),"\n",(0,a.jsx)("img",{className:"center",src:r,alt:""}),"\n",(0,a.jsx)(n.h3,{id:"step-2---prepare-avalonia-app",children:"Step 2 - Prepare Avalonia App"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"2.1 Create new Avalonia App (Core or MVVM App)"}),(0,a.jsx)(n.br,{}),"\n","We called it ",(0,a.jsx)(n.em,{children:"AvaloniaRaspbianLiteDrm"})," in this tutorial."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.strong,{children:["2.2 Add package ",(0,a.jsx)(n.a,{href:"https://www.nuget.org/packages/Avalonia.LinuxFramebuffer",children:"Avalonia.LinuxFrameBuffer"})]})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"dotnet add package Avalonia.LinuxFramebuffer\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"2.3 Create MainView"}),(0,a.jsx)(n.br,{}),"\n","When we work via FrameBuffer there are no windows, so we need a separate view (UserControl) which will be our toplevel control. This view is the\ncounterpart to the normal window."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"MainView"})," will be our app base in which we develop our UI:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             mc:Ignorable="d"\n             d:DesignWidth="800"\n             d:DesignHeight="450"\n             x:Class="AvaloniaRaspbianLiteDrm.MainView">\n    <StackPanel HorizontalAlignment="Center"\n                VerticalAlignment="Center"\n                Margin="30"\n                Spacing="30">\n        <TextBlock FontSize="25">\n            Welcome to Avalonia! The best XAML framework ever \u2665\n        </TextBlock>\n        <Slider />\n    </StackPanel>\n</UserControl>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Now create a new UserControl with name ",(0,a.jsx)(n.code,{children:"MainSingleView"})," and host the ",(0,a.jsx)(n.code,{children:"MainView"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             xmlns:avaloniaRaspbianLiteDrm="clr-namespace:AvaloniaRaspbianLiteDrm"\n             mc:Ignorable="d"\n             d:DesignWidth="800"\n             d:DesignHeight="450"\n             x:Class="AvaloniaRaspbianLiteDrm.MainSingleView">\n    <avaloniaRaspbianLiteDrm:MainView />\n</UserControl>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Also change the ",(0,a.jsx)(n.code,{children:"MainWindow.axaml"})," to host the ",(0,a.jsx)(n.code,{children:"MainView"})," inside:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n        xmlns:avaloniaRaspbianLiteDrm="clr-namespace:AvaloniaRaspbianLiteDrm"\n        mc:Ignorable="d"\n        d:DesignWidth="800"\n        d:DesignHeight="450"\n        x:Class="AvaloniaRaspbianLiteDrm.MainWindow"\n        Title="AvaloniaRaspbianLiteDrm">\n    <avaloniaRaspbianLiteDrm:MainView />\n</Window>\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:["So as you see the MainView is hosted in booth ",(0,a.jsx)(n.code,{children:"MainSingleView"})," and ",(0,a.jsx)(n.code,{children:"MainWindow"}),".\nThis makes it easier for development to run the app also on desktop and on the Raspberry"]})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"2.3 Prepare Program.cs"}),(0,a.jsx)(n.br,{}),"\n","Next we need to prepare the ",(0,a.jsx)(n.code,{children:"Program.cs"})," to enable the DRM usage.",(0,a.jsx)(n.br,{}),"\n","Change the Main void to the following:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public static int Main(string[] args)\n{\n    var builder = BuildAvaloniaApp();\n    if (args.Contains("--drm"))\n    {\n        SilenceConsole();\n        return builder.StartLinuxDrm(args);\n    }\n\n    return builder.StartWithClassicDesktopLifetime(args);\n}\n\nprivate static void SilenceConsole()\n{\n    new Thread(() =>\n        {\n            Console.CursorVisible = false;\n            while (true)\n                Console.ReadKey(true);\n        })\n        { IsBackground = true }.Start();\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsxs)(n.em,{children:[(0,a.jsx)(n.code,{children:"SilenceConsole()"})," captures the console input and hide it. Otherwise you will see the console cursor blinking on the screen."]})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"2.4 Prepare App.axaml.cs"}),(0,a.jsx)(n.br,{}),"\n","Next we need to set the MainView for the ",(0,a.jsx)(n.code,{children:"ISingleViewApplicationLifetime"})," for the DRM usage."]}),"\n",(0,a.jsxs)(n.p,{children:["Change the ",(0,a.jsx)(n.code,{children:"OnFrameworkInitializationCompleted()"})," in ",(0,a.jsx)(n.code,{children:"App.axaml.cs"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"public override void OnFrameworkInitializationCompleted()\n{\n    if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)\n        desktop.MainWindow = new MainWindow();\n    else if (ApplicationLifetime is ISingleViewApplicationLifetime singleView)\n        singleView.MainView = new MainSingleView();\n\n    base.OnFrameworkInitializationCompleted();\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"2.5 Run and test on desktop"}),(0,a.jsx)(n.br,{}),"\n","Now you can run/debug your app on desktop as usual.",(0,a.jsx)(n.br,{}),"\n","When you start your app you should see this:"]}),"\n",(0,a.jsx)("img",{className:"center",src:t,alt:""}),"\n",(0,a.jsx)(n.h3,{id:"step-3---deploy-and-run-on-raspberry",children:"Step 3 - Deploy and run on Raspberry"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"3.1 Publish app"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"dotnet publish -c Release -o publish -r linux-arm -p:PublishReadyToRun=true -p:PublishSingleFile=true -p:PublishTrimmed=true --self-contained true -p:IncludeNativeLibrariesForSelfExtract=true\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"3.2 Copy app to Raspberry"}),(0,a.jsx)(n.br,{}),"\n","Copy the files from ",(0,a.jsx)(n.code,{children:"/publish"})," directory of your project to your Raspberry.",(0,a.jsx)(n.br,{}),"\n","You can do this via ",(0,a.jsx)(n.code,{children:"scp <source> <destination>"})," or use a app like ",(0,a.jsx)(n.a,{href:"https://cyberduck.io",children:"CyberDuck"})," or via Usb stick."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"3.3 Run app on Raspberry"}),(0,a.jsx)(n.br,{}),"\n","First we need to change the permission to executable."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo chmod +x /path/to/app/AvaloniaRaspbianLiteDrm\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now you can run the app with the following:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"sudo ./path/to/app/AvaloniaRaspbianLiteDrm --drm\n"})}),"\n",(0,a.jsx)(n.p,{children:"You should see the app running on your Raspberry Pi now:"}),"\n",(0,a.jsx)("img",{className:"center",src:o,alt:""}),"\n",(0,a.jsx)(n.p,{children:"If you have a touch display installed, try to slide the slider control :)"})]})}function m(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>t});var a=i(67294);const s={},r=a.createContext(s);function t(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);