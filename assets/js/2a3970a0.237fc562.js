"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[46698],{70464:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var n=t(85893),s=t(11151);const l={id:"file-picker-options",title:"File Picker Options"},r="File Picker Options",d={id:"concepts/services/storage-provider/file-picker-options",title:"File Picker Options",description:"Common PickerOptions",source:"@site/docs/concepts/services/storage-provider/file-picker-options.md",sourceDirName:"concepts/services/storage-provider",slug:"/concepts/services/storage-provider/file-picker-options",permalink:"/avalonia-docs/docs/concepts/services/storage-provider/file-picker-options",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/services/storage-provider/file-picker-options.md",tags:[],version:"current",frontMatter:{id:"file-picker-options",title:"File Picker Options"},sidebar:"documentationSidebar",previous:{title:"Bookmarks",permalink:"/avalonia-docs/docs/concepts/services/storage-provider/bookmarks"},next:{title:"Templated Controls",permalink:"/avalonia-docs/docs/concepts/templated-controls"}},o={},c=[{value:"Common PickerOptions",id:"common-pickeroptions",level:2},{value:"Title",id:"title",level:3},{value:"SuggestedStartLocation",id:"suggestedstartlocation",level:3},{value:"FilePickerOpenOptions",id:"filepickeropenoptions",level:2},{value:"AllowMultiple",id:"allowmultiple",level:3},{value:"FileTypeFilter",id:"filetypefilter",level:3},{value:"FilePickerSaveOptions",id:"filepickersaveoptions",level:2},{value:"SuggestedFileName",id:"suggestedfilename",level:3},{value:"DefaultExtension",id:"defaultextension",level:3},{value:"FileTypeChoices",id:"filetypechoices",level:3},{value:"ShowOverwritePrompt",id:"showoverwriteprompt",level:3},{value:"FolderPickerOpenOptions",id:"folderpickeropenoptions",level:2},{value:"AllowMultiple",id:"allowmultiple-1",level:3},{value:"Platform compatibility:",id:"platform-compatibility",level:2}];function a(e){const i={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"file-picker-options",children:"File Picker Options"}),"\n",(0,n.jsx)(i.h2,{id:"common-pickeroptions",children:"Common PickerOptions"}),"\n",(0,n.jsx)(i.h3,{id:"title",children:"Title"}),"\n",(0,n.jsx)(i.p,{children:"Gets or sets the text that appears in the title bar of a picker."}),"\n",(0,n.jsx)(i.h3,{id:"suggestedstartlocation",children:"SuggestedStartLocation"}),"\n",(0,n.jsxs)(i.p,{children:["Gets or sets the initial location where the file open picker looks for files to present to the user.\nCan be obtained from previously picked folder or using ",(0,n.jsx)(i.code,{children:"StorageProvider.TryGetFolderFromPathAsync"})," or ",(0,n.jsx)(i.code,{children:"StorageProvider.TryGetWellKnownFolderAsync"}),"."]}),"\n",(0,n.jsx)(i.admonition,{type:"note",children:(0,n.jsx)(i.p,{children:"This is a suggestion for the system, that can ignore this parameter, if application doesn't have access to the folder or it doesn't exist."})}),"\n",(0,n.jsx)(i.admonition,{type:"note",children:(0,n.jsxs)(i.p,{children:["On Linux some DBus file picker don't support start location. For using GTK Free Desktop disable ",(0,n.jsx)(i.code,{children:"UseDBusFilePicker"})," in ",(0,n.jsx)(i.code,{children:"X11PlatformOptions"})]})}),"\n",(0,n.jsx)(i.h2,{id:"filepickeropenoptions",children:"FilePickerOpenOptions"}),"\n",(0,n.jsx)(i.h3,{id:"allowmultiple",children:"AllowMultiple"}),"\n",(0,n.jsx)(i.p,{children:"Gets or sets an option indicating whether open picker allows users to select multiple files."}),"\n",(0,n.jsx)(i.h3,{id:"filetypefilter",children:"FileTypeFilter"}),"\n",(0,n.jsx)(i.p,{children:"Gets or sets the collection of file types that the file open picker displays."}),"\n",(0,n.jsx)(i.p,{children:"To create a list of file types for the file picker:"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-cs",children:'//This can also be applied for SaveFilePicker.\nvar files = await _target.StorageProvider.OpenFilePickerAsync(new FilePickerOpenOptions()\n{\n Title = title,\n//You can add either custom or from the built-in file types. See "Defining custom file types" on how to create a custom one.\n FileTypeFilter = new[] { ImageAll, FilePickerFileTypes.TextPlain }\n});\n'})}),"\n",(0,n.jsx)(i.h2,{id:"filepickersaveoptions",children:"FilePickerSaveOptions"}),"\n",(0,n.jsx)(i.h3,{id:"suggestedfilename",children:"SuggestedFileName"}),"\n",(0,n.jsx)(i.p,{children:"Gets or sets the file name that the file save picker suggests to the user."}),"\n",(0,n.jsx)(i.h3,{id:"defaultextension",children:"DefaultExtension"}),"\n",(0,n.jsx)(i.p,{children:"Gets or sets the default extension to be used to save the file."}),"\n",(0,n.jsx)(i.h3,{id:"filetypechoices",children:"FileTypeChoices"}),"\n",(0,n.jsx)(i.p,{children:"Gets or sets the collection of valid file types that the user can choose to assign to a file."}),"\n",(0,n.jsx)(i.h3,{id:"showoverwriteprompt",children:"ShowOverwritePrompt"}),"\n",(0,n.jsx)(i.p,{children:"Gets or sets a value indicating whether file open picker displays a warning if the user specifies the name of a file that already exists."}),"\n",(0,n.jsx)(i.h2,{id:"folderpickeropenoptions",children:"FolderPickerOpenOptions"}),"\n",(0,n.jsx)(i.h3,{id:"allowmultiple-1",children:"AllowMultiple"}),"\n",(0,n.jsx)(i.p,{children:"Gets or sets an option indicating whether open picker allows users to select multiple folders."}),"\n",(0,n.jsx)(i.h2,{id:"platform-compatibility",children:"Platform compatibility:"}),"\n",(0,n.jsxs)(i.table,{children:[(0,n.jsx)(i.thead,{children:(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.th,{children:"Feature"}),(0,n.jsx)(i.th,{children:"Managed"}),(0,n.jsx)(i.th,{children:"Windows"}),(0,n.jsx)(i.th,{children:"macOS"}),(0,n.jsx)(i.th,{children:"Linux"}),(0,n.jsx)(i.th,{children:"Browser"}),(0,n.jsx)(i.th,{children:"Android"}),(0,n.jsx)(i.th,{children:"iOS"})]})}),(0,n.jsxs)(i.tbody,{children:[(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"Title"})}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2716"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"SuggestedStartLocation"})}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"AllowMultiple"})}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"FileTypeFilter"})}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"SuggestedFileName"})}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2716"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"DefaultExtension"})}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2716"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"FileTypeChoices"})}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2716"})]}),(0,n.jsxs)(i.tr,{children:[(0,n.jsx)(i.td,{children:(0,n.jsx)(i.code,{children:"ShowOverwritePrompt"})}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2716"}),(0,n.jsx)(i.td,{children:"\u2714"}),(0,n.jsx)(i.td,{children:"\u2716"}),(0,n.jsx)(i.td,{children:"\u2716"}),(0,n.jsx)(i.td,{children:"\u2716"})]})]})]}),"\n",(0,n.jsx)(i.h1,{id:"defining-custom-file-types",children:"Defining custom file types"}),"\n",(0,n.jsx)(i.p,{children:"Avalonia has set of build in file types:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsx)(i.li,{children:"FilePickerFileTypes.All - all files"}),"\n",(0,n.jsx)(i.li,{children:"FilePickerFileTypes.TextPlain - txt files"}),"\n",(0,n.jsx)(i.li,{children:"FilePickerFileTypes.ImageAll - all images"}),"\n",(0,n.jsx)(i.li,{children:"FilePickerFileTypes.ImageJpg - jpg images"}),"\n",(0,n.jsx)(i.li,{children:"FilePickerFileTypes.ImagePng - png images"}),"\n",(0,n.jsx)(i.li,{children:"FilePickerFileTypes.Pdf - pdf images"}),"\n"]}),"\n",(0,n.jsx)(i.p,{children:"However it is possible to define custom file types that can be used by the picker:"}),"\n",(0,n.jsx)(i.p,{children:"For instance, build-in ImageAll type is defined as"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-cs",children:'public static FilePickerFileType ImageAll { get; } = new("All Images")\n{\n    Patterns = new[] { "*.png", "*.jpg", "*.jpeg", "*.gif", "*.bmp" },\n    AppleUniformTypeIdentifiers = new[] { "public.image" },\n    MimeTypes = new[] { "image/*" }\n};\n'})}),"\n",(0,n.jsx)(i.p,{children:"Where each file type has following hints that are used by the different platforms:"}),"\n",(0,n.jsxs)(i.ul,{children:["\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"Patterns"})," are used by most Windows, Linux and Browser platforms, and is a basic GLOB patten that can be matched on types."]}),"\n",(0,n.jsxs)(i.li,{children:[(0,n.jsx)(i.code,{children:"AppleUniformTypeIdentifiers"})," is a standard identifier defined by Apple and is used on macOS and iOS platforms."]}),"\n",(0,n.jsxs)(i.li,{children:["And ",(0,n.jsx)(i.code,{children:"MimeTypes"})," is a web identfier for the files used on most of platforms, but Windows and iOS."]}),"\n"]}),"\n",(0,n.jsxs)(i.p,{children:["In general, it is recommended to define as much as possible information in each file type. But at least ",(0,n.jsx)(i.code,{children:"Patterns"})," and ",(0,n.jsx)(i.code,{children:"MimeTypes"})," have to defined."]}),"\n",(0,n.jsx)(i.admonition,{type:"note",children:(0,n.jsxs)(i.p,{children:["If specific hint is not known, don't set random values or \"",(0,n.jsx)(i.em,{children:"."}),'" wildcard, instead keep this collection null. It will tell the platform to ignore this collection and instead try to use another one.']})})]})}function h(e={}){const{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},11151:(e,i,t)=>{t.d(i,{Z:()=>d,a:()=>r});var n=t(67294);const s={},l=n.createContext(s);function r(e){const i=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function d(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(l.Provider,{value:i},e.children)}}}]);