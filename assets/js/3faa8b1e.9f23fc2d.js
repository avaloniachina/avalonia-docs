"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[66759],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,l=e.originalType,s=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),u=c(a),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=a.length,i=new Array(l);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:o,i[1]=r;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},22249:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(87462),o=(a(67294),a(3905));const l=a.p+"assets/images/text-list-f7b40caf6c7c4243ba580bcea9e693f6.png",i={description:"TUTORIALS - Music Store App"},r="Mock Search",s={unversionedId:"tutorials/music-store-app/mock-search",id:"tutorials/music-store-app/mock-search",title:"Mock Search",description:"TUTORIALS - Music Store App",source:"@site/docs/tutorials/music-store-app/mock-search.md",sourceDirName:"tutorials/music-store-app",slug:"/tutorials/music-store-app/mock-search",permalink:"/avalonia-docs/docs/next/tutorials/music-store-app/mock-search",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/tutorials/music-store-app/mock-search.md",tags:[],version:"current",frontMatter:{description:"TUTORIALS - Music Store App"},sidebar:"documentationSidebar",previous:{title:"Add Dialog Content",permalink:"/avalonia-docs/docs/next/tutorials/music-store-app/add-content-to-dialog"},next:{title:"Album View",permalink:"/avalonia-docs/docs/next/tutorials/music-store-app/album-view"}},c={},p=[{value:"Reactive View Model   ",id:"reactive-view-model---",level:2},{value:"Data Binding",id:"data-binding",level:2},{value:"Album Search and Selection",id:"album-search-and-selection",level:2},{value:"Mock Data",id:"mock-data",level:2}],u={toc:p},d="wrapper";function m(e){let{components:t,...a}=e;return(0,o.kt)(d,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mock-search"},"Mock Search"),(0,o.kt)("p",null,"On this page you will create the view model for the album search feature, and then bind it to the controls on the new user control. At this stage you will use a mock of the search itself, so that you can concentrate on the view model."),(0,o.kt)("h2",{id:"reactive-view-model---"},"Reactive View Model  "," "),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"ReactiveUI")," framework provides ",(0,o.kt)("em",{parentName:"p"},"Avalonia UI")," with support for its data binding system. You add this support by deriving your view model from the ",(0,o.kt)("inlineCode",{parentName:"p"},"ReactiveObject")," class, via the ",(0,o.kt)("inlineCode",{parentName:"p"},"ViewModelBase")," class that was added to your project at the start, by the solution template."," "),(0,o.kt)("p",null,"Follow this procedure to derive from the ",(0,o.kt)("inlineCode",{parentName:"p"},"ReactiveObject")," class:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Locate and open the ",(0,o.kt)("strong",{parentName:"li"},"MusicStoreViewModel.cs")," file."),(0,o.kt)("li",{parentName:"ul"},"Add the code to derive the class from ",(0,o.kt)("inlineCode",{parentName:"li"},"ViewModelBase"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace Avalonia.MusicStore.ViewModels\n{\n    public class MusicStoreViewModel : ViewModelBase\n    {\n    }\n}\n")),(0,o.kt)("p",null,"This adds the important extension method ",(0,o.kt)("inlineCode",{parentName:"p"},"RaiseAndSetIfChanged")," to your view model, and will allow you to give the properties there the ability to notify changes to the view.  "," "),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"To review the concepts behind the MVVM pattern and notification, see ",(0,o.kt)("a",{parentName:"p",href:"../../concepts/the-mvvm-pattern/"},"here"),"."," ")),(0,o.kt)("p",null,"At this stage, you will create two properties for the search application logic:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A text string that is the search criteria,"," "),(0,o.kt)("li",{parentName:"ul"},"A Boolean that indicates whether the search is busy."," ")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add the following code to implement the above properties:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"using ReactiveUI;\n\nnamespace AvaloniaApplication11.ViewModels\n{\n    public class MusicStoreViewModel : ViewModelBase\n    {\n        private string? _searchText;\n        private bool _isBusy;\n\n        public string? SearchText\n        {\n            get => _searchText;\n            set => this.RaiseAndSetIfChanged(ref _searchText, value);\n        }\n\n        public bool IsBusy\n        {\n            get => _isBusy;\n            set => this.RaiseAndSetIfChanged(ref _isBusy, value);\n        }\n\n    }\n}\n")),(0,o.kt)("p",null,"You can see that the properties have a normal public getter which returns the private value field; but the setter calls the ",(0,o.kt)("inlineCode",{parentName:"p"},"RaiseAndSetIfChanged")," method - in order to implement the notification."),(0,o.kt)("h2",{id:"data-binding"},"Data Binding"),(0,o.kt)("p",null,"Next you will add a data binding to link the view to the view model. The text box will be bound to the search text, and whether the progress bar is visible to the user will  be bound to the Boolean."," "),(0,o.kt)("p",null,"Follow this procedure to add data binding to the view:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Locate and open the ",(0,o.kt)("strong",{parentName:"li"},"MusicStoreView.axaml")," file."),(0,o.kt)("li",{parentName:"ul"},"Add the binding expressions shown:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-markup"},'<DockPanel>\n  <StackPanel DockPanel.Dock="Top">\n    <TextBox Text="{Binding SearchText}" Watermark="Search for Albums...." />\n    <ProgressBar IsIndeterminate="True" IsVisible="{Binding IsBusy}" />\n  </StackPanel>\n  <Button Content="Buy Album"\n          DockPanel.Dock="Bottom"\n          HorizontalAlignment="Center" />\n  <ListBox/>\n</DockPanel>\n')),(0,o.kt)("h2",{id:"album-search-and-selection"},"Album Search and Selection"),(0,o.kt)("p",null,"Your next step is to create the music store view model properties needed to process albums. These are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a collection of album view models to represent the albums that the search might find,"," "),(0,o.kt)("li",{parentName:"ul"},"and a property to hold an album if the user selects one."," ")),(0,o.kt)("p",null,"Here you will use the ",(0,o.kt)("inlineCode",{parentName:"p"},"ObservableCollection")," - this is a collection is capable of notification, and it is provided by the .NET framework."),(0,o.kt)("p",null,"Follow this procedure to add the above properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Locate and open the ",(0,o.kt)("strong",{parentName:"li"},"MusicStoreViewModel.cs")," file."),(0,o.kt)("li",{parentName:"ul"},"Add the following code to the class:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"private AlbumViewModel? _selectedAlbum;\n\npublic ObservableCollection<AlbumViewModel> SearchResults { get; } = new();\n\npublic AlbumViewModel? SelectedAlbum\n{\n    get => _selectedAlbum;\n    set => this.RaiseAndSetIfChanged(ref _selectedAlbum, value);\n}\n")),(0,o.kt)("p",null,"Next to bind these properties to the list box in the view, follow this procedure:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Locate and open the ",(0,o.kt)("strong",{parentName:"li"},"MusicStoreView.axaml")," file."),(0,o.kt)("li",{parentName:"ul"},"Add the binding expressions shown to the ",(0,o.kt)("inlineCode",{parentName:"li"},"<ListBox>")," element:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'<ListBox ItemsSource="{Binding SearchResults}" SelectedItem="{Binding SelectedAlbum}" />\n')),(0,o.kt)("h2",{id:"mock-data"},"Mock Data"),(0,o.kt)("p",null,"Now, to test the app at this stage, you will add some mock data directly to the view model."," "),(0,o.kt)("p",null,"Follow this procedure:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Locate and open the ",(0,o.kt)("strong",{parentName:"li"},"MusicStoreViewModel.cs")," file again."),(0,o.kt)("li",{parentName:"ul"},"Add a constructor to the class, as shown:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-csharp"},"public MusicStoreViewModel()\n{\n    SearchResults.Add(new AlbumViewModel());\n    SearchResults.Add(new AlbumViewModel());\n    SearchResults.Add(new AlbumViewModel());\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Click ",(0,o.kt)("strong",{parentName:"li"},"Debug")," to compile and run the project.")),(0,o.kt)("p",null,(0,o.kt)("img",{className:"image-medium-zoom",src:l,alt:""})),(0,o.kt)("p",null,"This shows that the data binding from the list to the album collection in the view model is working, but the view is not graphical yet. On the next page you will develop the app further by replacing the text with graphical album tiles. "," "))}m.isMDXComponent=!0}}]);