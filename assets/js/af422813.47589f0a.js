"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[93085],{56353:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var t=a(85893),o=a(11151),i=a(95664);const r={id:"how-to-create-a-custom-page-transition",title:"How To Create a Custom Page Transition"},s="How To Create a Custom Page Transition",l={id:"guides/graphics-and-animation/page-transitions/how-to-create-a-custom-page-transition",title:"How To Create a Custom Page Transition",description:"This guide will show you how to create your own custom page transition by implementing the IPageTransition interface.",source:"@site/docs/guides/graphics-and-animation/page-transitions/how-to-create-a-custom-page-transition.md",sourceDirName:"guides/graphics-and-animation/page-transitions",slug:"/guides/graphics-and-animation/page-transitions/how-to-create-a-custom-page-transition",permalink:"/avalonia-docs/docs/guides/graphics-and-animation/page-transitions/how-to-create-a-custom-page-transition",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/graphics-and-animation/page-transitions/how-to-create-a-custom-page-transition.md",tags:[],version:"current",frontMatter:{id:"how-to-create-a-custom-page-transition",title:"How To Create a Custom Page Transition"},sidebar:"documentationSidebar",previous:{title:"Page Transition Combinations",permalink:"/avalonia-docs/docs/guides/graphics-and-animation/page-transitions/page-transition-combinations"},next:{title:"Types of Control",permalink:"/avalonia-docs/docs/guides/custom-controls/types-of-control"}},c={},m=[{value:"Example",id:"example",level:2},{value:"More Information",id:"more-information",level:2}];function u(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"how-to-create-a-custom-page-transition",children:"How To Create a Custom Page Transition"}),"\n",(0,t.jsxs)(e.p,{children:["This guide will show you how to create your own custom page transition by implementing the ",(0,t.jsx)(e.code,{children:"IPageTransition"})," interface."]}),"\n",(0,t.jsx)(e.p,{children:"The interface has a single method that you need to implement:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:"public Task Start(Visual? from, Visual? to, bool forward, \n                                CancellationToken cancellationToken)\n{\n    // Setup the transition here.\n}\n"})}),"\n",(0,t.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(e.p,{children:"This example will shrink the old view and then open up the new view vertically."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-csharp",children:'using Avalonia.VisualTree;\n\npublic class CustomTransition : IPageTransition\n{\n    /// <summary>\n    /// Initializes a new instance of the <see cref="CustomTransition"/> class.\n    /// </summary>\n    public CustomTransition()\n    {\n    }\n\n    /// <summary>\n    /// Initializes a new instance of the <see cref="CustomTransition"/> class.\n    /// </summary>\n    /// <param name="duration">The duration of the animation.</param>\n    public CustomTransition(TimeSpan duration)\n    {\n        Duration = duration;\n    }\n\n    /// <summary>\n    /// Gets the duration of the animation.\n    /// </summary>\n    public TimeSpan Duration { get; set; }\n\n    public async Task Start(Visual from, Visual to, bool forward, \n                                            CancellationToken cancellationToken)\n    {\n        if (cancellationToken.IsCancellationRequested)\n        {\n            return;\n        }\n\n        var tasks = new List<Task>();\n        var parent = GetVisualParent(from, to);\n        var scaleYProperty = ScaleTransform.ScaleYProperty;\n\n        if (from != null)\n        {\n            var animation = new Animation\n            {\n                FillMode = FillMode.Forward,\n                Children =\n                {\n                    new KeyFrame\n                    {\n                        Setters = { new Setter \n                        { Property = scaleYProperty, Value = 1d } },\n                        Cue = new Cue(0d)\n                    },\n                    new KeyFrame\n                    {\n                        Setters =\n                        {\n                            new Setter\n                            {\n                                Property = scaleYProperty,\n                                Value = 0d\n                            }\n                        },\n                        Cue = new Cue(1d)\n                    }\n                },\n                Duration = Duration\n            };\n            tasks.Add(animation.RunAsync(from, cancellationToken));\n        }\n\n        if (to != null)\n        {\n            to.IsVisible = true;\n            var animation = new Animation\n            {\n                FillMode = FillMode.Forward,\n                Children =\n                {\n                    new KeyFrame\n                    {\n                        Setters =\n                        {\n                            new Setter\n                            {\n                                Property = scaleYProperty,\n                                Value = 0d\n                            }\n                        },\n                        Cue = new Cue(0d)\n                    },\n                    new KeyFrame\n                    {\n                        Setters = { new Setter \n                        { \n                            Property = scaleYProperty, Value = 1d \n                        }},\n                        Cue = new Cue(1d)\n                    }\n                },\n                Duration = Duration\n            };\n            tasks.Add(animation.RunAsync(to, cancellationToken));\n        }\n\n        await Task.WhenAll(tasks);\n\n        if (from != null && !cancellationToken.IsCancellationRequested)\n        {\n            from.IsVisible = false;\n        }\n    }\n\n    /// <summary>\n    /// Gets the common visual parent of the two control.\n    /// </summary>\n    /// <param name="from">The from control.</param>\n    /// <param name="to">The to control.</param>\n    /// <returns>The common parent.</returns>\n    /// <exception cref="ArgumentException">\n    /// The two controls do not share a common parent.\n    /// </exception>\n    /// <remarks>\n    /// Any one of the parameters may be null, but not both.\n    /// </remarks>\n    private static Visual GetVisualParent(Visual? from, Visual? to)\n    {\n        var p1 = (from ?? to)!.GetVisualParent();\n        var p2 = (to ?? from)!.GetVisualParent();\n\n        if (p1 != null && p2 != null && p1 != p2)\n        {\n            throw new ArgumentException(\n                                "Controls for PageSlide must have same parent.");\n        }\n\n        return p1 ?? throw new InvalidOperationException(\n                                                "Cannot determine visual parent.");\n    }\n}\n'})}),"\n",(0,t.jsx)("img",{src:i.Z,alt:""}),"\n",(0,t.jsx)(e.h2,{id:"more-information",children:"More Information"}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsxs)(e.p,{children:["For the complete API documentation about this interface see ",(0,t.jsx)(e.a,{href:"http://reference.avaloniaui.net/api/Avalonia.Animation/IPageTransition/",children:"here"}),"."]})}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsxs)(e.p,{children:["View the source code on ",(0,t.jsx)(e.em,{children:"GitHub"})," ",(0,t.jsx)(e.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Animation/IPageTransition.cs",children:(0,t.jsx)(e.code,{children:"IPageTransition.cs"})})]})})]})}function d(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(u,{...n})}):u(n)}},95664:(n,e,a)=>{a.d(e,{Z:()=>t});const t=a.p+"assets/images/TransitioningContentControl_03-07b8db42817a78df94e9c229b07b3557.webp"},11151:(n,e,a)=>{a.d(e,{Z:()=>s,a:()=>r});var t=a(67294);const o={},i=t.createContext(o);function r(n){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),t.createElement(i.Provider,{value:e},n.children)}}}]);