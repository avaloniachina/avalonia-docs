"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[78095],{56443:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var n=r(85893),s=r(11151);const a=r.p+"assets/images/masked-3e7264c602dcdb2aafda8b142a897e33.gif",i={description:"REFERENCE - Built-in Controls"},c="Masked Text Box",l={id:"reference/controls/maskedtextbox",title:"Masked Text Box",description:"REFERENCE - Built-in Controls",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/reference/controls/maskedtextbox.md",sourceDirName:"reference/controls",slug:"/reference/controls/maskedtextbox",permalink:"/avalonia-docs/zh-Hans/docs/reference/controls/maskedtextbox",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/current/reference/controls/maskedtextbox.md",tags:[],version:"current",frontMatter:{description:"REFERENCE - Built-in Controls"},sidebar:"documentationSidebar",previous:{title:"List Box",permalink:"/avalonia-docs/zh-Hans/docs/reference/controls/listbox"},next:{title:"Menu Controls",permalink:"/avalonia-docs/zh-Hans/docs/reference/controls/menu-controls"}},o={},d=[{value:"Useful Properties",id:"useful-properties",level:2},{value:"Mask Characters",id:"mask-characters",level:2},{value:"Example",id:"example",level:2},{value:"More Information",id:"more-information",level:2}];function h(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"masked-text-box",children:"Masked Text Box"}),"\n",(0,n.jsx)(t.p,{children:"The masked text box presents an area for typed (keyboard) input, but where the format and characters permitted can be constrained by a mask pattern formed from special characters."}),"\n",(0,n.jsx)(t.p,{children:"The mask pattern can also contain literal characters that appear in the input, and cannot be typed over."}),"\n",(0,n.jsx)(t.h2,{id:"useful-properties",children:"Useful Properties"}),"\n",(0,n.jsx)(t.p,{children:"You will probably use these properties most often:"}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{width:"235",children:"Property"}),(0,n.jsx)("th",{children:"Description"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"Mask"})}),(0,n.jsx)("td",{children:"The mask pattern to use. See the special mask characters in the table below."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"AsciiOnly"})}),(0,n.jsx)("td",{children:"Restricts input to the ASCII letters a-z and A-Z."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{children:(0,n.jsx)("code",{children:"Text"})}),(0,n.jsx)("td",{children:"The resulting text input including any literal characters."})]})]})]}),"\n",(0,n.jsx)(t.h2,{id:"mask-characters",children:"Mask Characters"}),"\n",(0,n.jsx)(t.p,{children:"The mask property accepts a string that can contain a combination of  fixed characters, and the following special characters:"}),"\n",(0,n.jsxs)("table",{children:[(0,n.jsx)("thead",{children:(0,n.jsxs)("tr",{children:[(0,n.jsx)("th",{width:"287",align:"center",children:"Mask Character"}),(0,n.jsx)("th",{children:"Description"})]})}),(0,n.jsxs)("tbody",{children:[(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"0"}),(0,n.jsx)("td",{children:"Digit, required. This element will accept any single digit between 0 and 9."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"9"}),(0,n.jsx)("td",{children:"Digit or space, optional."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"#"}),(0,n.jsx)("td",{children:"Digit or space, optional. If this position is blank in the mask, it will be rendered as a space in the Text property. Plus (+) and minus (-) signs are allowed."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"L"}),(0,n.jsx)("td",{children:"Letter, required. Restricts input to the ASCII letters a-z and A-Z"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"?"}),(0,n.jsx)("td",{children:"Letter, optional. Restricts input to the ASCII letters a-z and A-Z"})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"&"}),(0,n.jsxs)("td",{children:["Character, required. If the ",(0,n.jsx)("code",{children:"AsciiOnly"}),' property is true, this element behaves like the "L" element.']})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"C"}),(0,n.jsx)("td",{children:'Character, optional. Any non-control character. If the AsciiOnly property is set to true, this element behaves like the "?" element.'})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"A"}),(0,n.jsx)("td",{children:'Alphanumeric, required. If the AsciiOnly property is true, the only characters it will accept are the ASCII letters a-z and A-Z. This mask element behaves like the "a" element.'})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"a"}),(0,n.jsx)("td",{children:'Alphanumeric, optional. If the AsciiOnly property is set to true, the only characters it will accept are the ASCII letters a-z and A-Z. This mask element behaves like the "A" element.'})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"."}),(0,n.jsx)("td",{children:"Decimal placeholder. The actual display character used will be the decimal symbol appropriate to the format provider, as determined by the control's FormatProvider property."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:","}),(0,n.jsx)("td",{children:"Thousands placeholder. The actual display character used will be the thousands placeholder appropriate to the format provider, as determined by the control's FormatProvider property."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:":"}),(0,n.jsx)("td",{children:"Time separator. The actual display character used will be the time symbol appropriate to the format provider, as determined by the control's FormatProvider property."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"/"}),(0,n.jsx)("td",{children:"Date separator. The actual display character used will be the date symbol appropriate to the format provider, as determined by the control's FormatProvider property."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"$"}),(0,n.jsx)("td",{children:"Currency symbol. The actual character displayed will be the currency symbol appropriate to the format provider, as determined by the control's FormatProvider property."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"<"}),(0,n.jsx)("td",{children:"Shift down. Converts all characters that follow to lowercase."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:">"}),(0,n.jsx)("td",{children:"Shift up. Converts all characters that follow to uppercase."})]}),(0,n.jsxs)("tr",{children:[(0,n.jsx)("td",{align:"center",children:"|"}),(0,n.jsx)("td",{children:"Disable a previous shift up or shift down."})]}),(0,n.jsx)("tr",{children:(0,n.jsx)("td",{align:"center",children:'<td>Escape. Escapes a mask character, turning it into a literal. ""'})})]})]}),"\n",(0,n.jsx)(t.p,{children:"The escape character (backslash) can be used to include a special character as a literal. For example, to include the dollar sign:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:'Mask="\\$999,000.00"'})}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.p,{children:"This is a basic example:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-markup",children:'<StackPanel Margin="20">\n  <TextBlock Margin="0 5">International phone number:</TextBlock>\n  <MaskedTextBox Mask="(+09) 000 000 0000" />\n  <TextBlock Margin="0 15 0 5">UK VAT number:</TextBlock>\n  <MaskedTextBox Mask="GB 000 000 000" />\n</StackPanel>\n'})}),"\n",(0,n.jsx)("img",{src:a,alt:""}),"\n",(0,n.jsx)(t.h2,{id:"more-information",children:"More Information"}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsx)(t.p,{children:"For the complete API documentation about this control, see here."})}),"\n",(0,n.jsx)(t.admonition,{type:"info",children:(0,n.jsxs)(t.p,{children:["View the source code on ",(0,n.jsx)(t.em,{children:"GitHub"})," ",(0,n.jsx)(t.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls/MaskedTextBox.cs",children:(0,n.jsx)(t.code,{children:"MaskedTextBox.cs"})})]})})]})}function p(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,t,r)=>{r.d(t,{Z:()=>c,a:()=>i});var n=r(67294);const s={},a=n.createContext(s);function i(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);