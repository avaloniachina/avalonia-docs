"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[27890],{29022:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var t=a(85893),o=a(11151);const i={id:"create-a-custom-panel",title:"Create a Custom Panel"},r=void 0,s={id:"layout/create-a-custom-panel",title:"Create a Custom Panel",description:"This example shows how to override the default layout behavior of the Panel element and create custom layout elements that are derived from Panel.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/layout/create-a-custom-panel.md",sourceDirName:"layout",slug:"/layout/create-a-custom-panel",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/layout/create-a-custom-panel",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/layout/create-a-custom-panel.md",tags:[],version:"0.10.x",frontMatter:{id:"create-a-custom-panel",title:"Create a Custom Panel"},sidebar:"documentationSidebar",previous:{title:"Alignment, Margins and Padding",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/layout/alignment-margins-and-padding"},next:{title:"Distribution / Publishing",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/distribution-publishing/"}},l={},d=[];function c(e){const n={code:"code",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["This example shows how to override the default layout behavior of the ",(0,t.jsx)(n.code,{children:"Panel"})," element and create custom layout elements that are derived from ",(0,t.jsx)(n.code,{children:"Panel"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The example defines a simple custom ",(0,t.jsx)(n.code,{children:"Panel"})," element called ",(0,t.jsx)(n.code,{children:"PlotPanel"}),", which positions child elements according to two hard-coded x- and y-coordinates. In this example, ",(0,t.jsx)(n.code,{children:"x"})," and ",(0,t.jsx)(n.code,{children:"y"})," are both set to ",(0,t.jsx)(n.code,{children:"50"}),"; therefore, all child elements are positioned at that location on the x and y axes."]}),"\n",(0,t.jsxs)(n.p,{children:["To implement custom ",(0,t.jsx)(n.code,{children:"Panel"})," behaviors, the example uses the ",(0,t.jsx)(n.code,{children:"MeasureOverride"})," and ",(0,t.jsx)(n.code,{children:"ArrangeOverride"})," methods. Each method returns the ",(0,t.jsx)(n.code,{children:"Size"})," data that is necessary to position and render child elements."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class PlotPanel : Panel\n{\n    // Override the default Measure method of Panel\n    protected override Size MeasureOverride(Size availableSize)\n    {\n        var panelDesiredSize = new Size();\n\n        // In our example, we just have one child. \n        // Report that our panel requires just the size of its only child.\n        foreach (var child in Children)\n        {\n            child.Measure(availableSize);\n            panelDesiredSize = child.DesiredSize;\n        }\n\n        return panelDesiredSize;\n    }\n\n    protected override Size ArrangeOverride(Size finalSize)\n    {\n        foreach (var child in Children)\n        {\n            double x = 50;\n            double y = 50;\n\n            child.Arrange(new Rect(new Point(x, y), child.DesiredSize));\n        }\n        \n        return finalSize; // Returns the final Arranged size\n    }\n}\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>r});var t=a(67294);const o={},i=t.createContext(o);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);