"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[636],{32042:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var l=s(85893),n=s(11151);const o={id:"styles",title:"Styles"},c=void 0,r={id:"styling/styles",title:"Styles",description:"Styles in Avalonia are used to share property settings between controls. The Avalonia styling system can be thought of as a mix of CSS styling and WPF/UWP styling. At its most basic, a style consists of a selector and a collection of setters.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/styling/styles.md",sourceDirName:"styling",slug:"/styling/styles",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/styles",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/styling/styles.md",tags:[],version:"0.10.x",frontMatter:{id:"styles",title:"Styles"},sidebar:"documentationSidebar",previous:{title:"Styling",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/"},next:{title:"Selectors",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/selectors"}},i={},a=[{value:"Style Classes",id:"style-classes",level:3},{value:"Pseudoclasses",id:"pseudoclasses",level:3},{value:"Custom PseudoClasses",id:"custom-pseudoclasses",level:3},{value:"Selectors",id:"selectors",level:3},{value:"Setters",id:"setters",level:3},{value:"Templates in Setters",id:"templates-in-setters",level:3},{value:"Style Precedence",id:"style-precedence",level:3}];function d(e){const t={a:"a",code:"code",em:"em",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,n.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(t.p,{children:["Styles in Avalonia are used to share property settings between controls. The Avalonia styling system can be thought of as a mix of CSS styling and WPF/UWP styling. At its most basic, a style consists of a ",(0,l.jsx)(t.em,{children:"selector"})," and a collection of ",(0,l.jsx)(t.em,{children:"setters"}),"."]}),"\n",(0,l.jsx)(t.p,{children:"A style applies to the control that it is defined on and all descendent controls."}),"\n",(0,l.jsxs)(t.p,{children:["The following style selects any ",(0,l.jsx)(t.code,{children:"TextBlock"})," with a ",(0,l.jsx)(t.code,{children:"h1"})," ",(0,l.jsx)(t.em,{children:"style class"})," and sets its font size to 24 point and font weight to bold:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Style Selector="TextBlock.h1">\n    <Setter Property="FontSize" Value="24"/>\n    <Setter Property="FontWeight" Value="Bold"/>\n</Style>\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Styles can be defined on any control or on the ",(0,l.jsx)(t.code,{children:"Application"})," object by adding them to the ",(0,l.jsx)(t.a,{href:"http://reference.avaloniaui.net/api/Avalonia/StyledElement/0A46A84A",children:(0,l.jsx)(t.code,{children:"Control.Styles"})})," or ",(0,l.jsx)(t.a,{href:"http://reference.avaloniaui.net/api/Avalonia/Application/04017CAF",children:(0,l.jsx)(t.code,{children:"Application.Styles"})})," collections."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <Window.Styles>\n        <Style Selector="TextBlock.h1">\n            <Setter Property="FontSize" Value="24"/>\n            <Setter Property="FontWeight" Value="Bold"/>\n        </Style>\n    </Window.Styles>\n\n    <TextBlock Classes="h1">I\'m a Heading!</TextBlock>\n</Window>\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Styles can also be included from other files using the ",(0,l.jsx)(t.code,{children:"StyleInclude"})," class, e.g.:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <Window.Styles>\n        <StyleInclude Source="/CustomStyles.xaml" />\n    </Window.Styles>\n\n    <TextBlock Classes="h1">I\'m a Heading!</TextBlock>\n</Window>\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Where ",(0,l.jsx)(t.code,{children:"CustomStyles.xaml"})," is a XAML file with a root of either ",(0,l.jsx)(t.code,{children:"Style"})," or ",(0,l.jsx)(t.code,{children:"Styles"})," and is included as an ",(0,l.jsx)(t.a,{href:"/avalonia-docs/zh-Hans/docs/0.10.x/getting-started/assets",children:"asset"})," in the application, e.g.:"]}),"\n",(0,l.jsx)(t.p,{children:"CustomStyles.xaml"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Styles xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <Style Selector="TextBlock.h1">\n        ...\n    </Style>\n</Styles>\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Note that unlike WPF/UWP, styles will have no effect if they're added to a control or application ",(0,l.jsx)(t.code,{children:"ResourceDictionary"}),". This is because the order that styles are defined in Avalonia is important and ",(0,l.jsx)(t.code,{children:"ResourceDictionary"})," is an unsorted dictionary."]}),"\n",(0,l.jsx)(t.h3,{id:"style-classes",children:"Style Classes"}),"\n",(0,l.jsxs)(t.p,{children:["As in CSS, controls can be given ",(0,l.jsx)(t.em,{children:"style classes"})," which can be used in selectors. Style classes can be assigned in XAML by setting the ",(0,l.jsx)(t.code,{children:"Classes"})," property to a space-separated list of strings. The following example applies the ",(0,l.jsx)(t.code,{children:"h1"})," and ",(0,l.jsx)(t.code,{children:"blue"})," style classes to a ",(0,l.jsx)(t.code,{children:"Button"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Button Classes="h1 blue"/>\n'})}),"\n",(0,l.jsx)(t.p,{children:"If you need to add or remove class by condition, you can use the following special syntax:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Button Classes.blue="{Binding IsSpecial}" />\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Style classes can also be manipulated in code using the ",(0,l.jsx)(t.code,{children:"Classes"})," collection:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-csharp",children:'control.Classes.Add("blue");\ncontrol.Classes.Remove("red");\n'})}),"\n",(0,l.jsx)(t.h3,{id:"pseudoclasses",children:"Pseudoclasses"}),"\n",(0,l.jsxs)(t.p,{children:["Also as in CSS, controls can have pseudoclasses; these are classes that are defined by the control itself rather than by the user. Pseudoclasses start with a ",(0,l.jsx)(t.code,{children:":"})," character."]}),"\n",(0,l.jsxs)(t.p,{children:["One example of a pseudoclass is the ",(0,l.jsx)(t.code,{children:":pointerover"})," (similar to ",(0,l.jsx)(t.code,{children:":hover"})," in CSS)."]}),"\n",(0,l.jsxs)(t.p,{children:["Pseudoclasses provide the functionality of ",(0,l.jsx)(t.code,{children:"Triggers"})," in WPF and ",(0,l.jsx)(t.code,{children:"VisualStateManager"})," in UWP:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<StackPanel>\n  <StackPanel.Styles>\n    <Style Selector="Border:pointerover">\n      <Setter Property="Background" Value="Red"/>\n    </Style>\n  </StackPanel.Styles>\n  <Border>\n    <TextBlock>I will have red background when hovered.</TextBlock>\n  </Border>\n</StackPanel>\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Another example that involves changing properties inside of control ",(0,l.jsx)(t.a,{href:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/selectors#template",children:"template"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<StackPanel>\n  <StackPanel.Styles>\n    <Style Selector="Button:pressed /template/ ContentPresenter">\n        <Setter Property="TextBlock.Foreground" Value="Red"/>\n    </Style>\n  </StackPanel.Styles>\n  <Button>I will have red text when pressed.</Button>\n</StackPanel>\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Other pseudoclasses include ",(0,l.jsx)(t.code,{children:":focus"}),", ",(0,l.jsx)(t.code,{children:":disabled"}),", ",(0,l.jsx)(t.code,{children:":pressed"})," for buttons, ",(0,l.jsx)(t.code,{children:":checked"})," for checkboxes etc."]}),"\n",(0,l.jsx)(t.h3,{id:"custom-pseudoclasses",children:"Custom PseudoClasses"}),"\n",(0,l.jsxs)(t.p,{children:["You can create own pseudoclasses for your ",(0,l.jsx)(t.code,{children:"CustomControl"})," or ",(0,l.jsx)(t.code,{children:"TemplatedControl"}),".\nThe function below adds or remove a pseudoclass depending on a boolean value on a ",(0,l.jsx)(t.code,{children:"StyledElement"}),"."]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-csharp",children:'PseudoClasses.Set(":className", bool);\n'})}),"\n",(0,l.jsx)(t.p,{children:(0,l.jsxs)(t.em,{children:[(0,l.jsx)(t.strong,{children:"Remember:"})," PseudoClasses always starts with a ",(0,l.jsx)(t.code,{children:":"}),"!"]})}),"\n",(0,l.jsx)(t.h3,{id:"selectors",children:"Selectors"}),"\n",(0,l.jsxs)(t.p,{children:[(0,l.jsx)(t.em,{children:"Selectors"})," select a control using a custom selector syntax which is very similar to the syntax used for CSS selectors. An example of some selectors:"]}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Selector"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"Button"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Selects all ",(0,l.jsx)(t.code,{children:"Button"})," controls"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"Button.red"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Selects all ",(0,l.jsx)(t.code,{children:"Button"})," controls with the ",(0,l.jsx)(t.code,{children:"red"})," style class"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"Button.red.large"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Selects all ",(0,l.jsx)(t.code,{children:"Button"})," controls with the ",(0,l.jsx)(t.code,{children:"red"})," and ",(0,l.jsx)(t.code,{children:"large"})," style classes"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"Button:focus"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Selects all ",(0,l.jsx)(t.code,{children:"Button"})," controls with the ",(0,l.jsx)(t.code,{children:":focus"})," pseudoclass"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"Button.red:focus"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Selects all ",(0,l.jsx)(t.code,{children:"Button"})," controls with the ",(0,l.jsx)(t.code,{children:"red"})," style class and the ",(0,l.jsx)(t.code,{children:":focus"})," pseudoclass"]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"Button#myButton"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Selects a ",(0,l.jsx)(t.code,{children:"Button"})," control with a name of ",(0,l.jsx)(t.code,{children:"myButton"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"StackPanel Button.foo"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Selects all ",(0,l.jsx)(t.code,{children:"Button"}),"s with the ",(0,l.jsx)(t.code,{children:"foo"})," class that are descendants of a ",(0,l.jsx)(t.code,{children:"StackPanel"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"StackPanel > Button.foo"})}),(0,l.jsxs)(t.td,{style:{textAlign:"left"},children:["Selects all ",(0,l.jsx)(t.code,{children:"Button"}),"s with the ",(0,l.jsx)(t.code,{children:"foo"})," class that are children of a ",(0,l.jsx)(t.code,{children:"StackPanel"})]})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"Button /template/ ContentPresenter"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Selects all ContentPresenter controls inside of Button's template"})]})]})]}),"\n",(0,l.jsxs)(t.p,{children:["For more information see the ",(0,l.jsx)(t.a,{href:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/selectors",children:"selectors documentation"}),"."]}),"\n",(0,l.jsx)(t.h3,{id:"setters",children:"Setters"}),"\n",(0,l.jsx)(t.p,{children:"A style's setters describe what will happen when the selector matches a control. They are simple property/value pairs written in the format:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Setter Property="FontSize" Value="24"/>\n<Setter Property="Padding" Value="4 2 0 4"/>\n'})}),"\n",(0,l.jsx)(t.p,{children:"You can also use long-form syntax to declare more complex object values:"}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Setter Property="MyProperty">\n   <MyObject Property1="My Value"/>\n</Setter>\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Bindings can also be applied using setters and can bind to the target control's ",(0,l.jsx)(t.code,{children:"DataContext"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Setter Property="FontSize" Value="{Binding SelectedFontSize}"/>\n'})}),"\n",(0,l.jsx)(t.p,{children:"Whenever a style is matched with a control, all of the setters will be applied to the control. If a style selector causes the style to no longer match a control, the property value will revert to the its next highest priority value."}),"\n",(0,l.jsxs)(t.p,{children:["Note that the ",(0,l.jsx)(t.code,{children:"Setter"})," creates a single instance of ",(0,l.jsx)(t.code,{children:"Value"})," which will be applied to all controls that the style matches: if the object is mutable then changes will be reflected on all controls. Following on from this, any bindings on an ",(0,l.jsxs)(t.em,{children:["object within the setter ",(0,l.jsx)(t.code,{children:"Value"})]})," will not have access to the target control's ",(0,l.jsx)(t.code,{children:"DataContext"})," as there may be multiple target controls:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Style Selector="local|MyControl">\n  <Setter Property="MyProperty">\n     <MyObject Property1="{Binding MyViewModelProperty}"/>\n  </Setter>\n</Style>\n'})}),"\n",(0,l.jsxs)(t.p,{children:["In the above example, the binding source will be ",(0,l.jsx)(t.code,{children:"MyObject.DataContext"}),", not ",(0,l.jsx)(t.code,{children:"MyControl.DataContext"})," and if ",(0,l.jsx)(t.code,{children:"MyObject"})," has no data context then the binding will not be able to produce a value."]}),"\n",(0,l.jsxs)(t.p,{children:["Note: at present, if you are using compiled bindings, you need to explicitly set the data type of the binding source in the ",(0,l.jsx)(t.code,{children:"<Style>"})," element:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Style Selector="MyControl" x:DataType="MyViewModelClass">\n  <Setter Property="ControlProperty" Value="{Binding MyViewModelProperty}" />\n</Style>\n'})}),"\n",(0,l.jsx)(t.h3,{id:"templates-in-setters",children:"Templates in Setters"}),"\n",(0,l.jsxs)(t.p,{children:["As mentioned above, usually a single instance of a setter's ",(0,l.jsx)(t.code,{children:"Value"})," is created and shared across all matching controls. Due to this, to use a control as a setter value, the control must be wrapped in a ",(0,l.jsx)(t.code,{children:"<Template>"}),":"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Style Selector="Border.empty">\n  <Setter Property="Child">\n    <Template>\n      <TextBlock>No content available.</TextBlock>\n    </Template>\n  </Setter>\n</Style>\n'})}),"\n",(0,l.jsx)(t.h3,{id:"style-precedence",children:"Style Precedence"}),"\n",(0,l.jsxs)(t.p,{children:["If multiple styles match a control, and they both attempt to set the same property then the style ",(0,l.jsx)(t.em,{children:"closest to the control"})," will win. Consider the following example:"]}),"\n",(0,l.jsx)(t.pre,{children:(0,l.jsx)(t.code,{className:"language-markup",children:'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">\n    <Window.Styles>\n        <Style Selector="TextBlock.h1">\n            <Setter Property="FontSize" Value="24"/>\n            <Setter Property="FontWeight" Value="Bold"/>\n        </Style>\n    </Window.Styles>\n\n    <StackPanel>\n        <StackPanel.Styles>\n            <Style Selector="TextBlock.h1">\n                <Setter Property="FontSize" Value="48"/>\n                <Setter Property="Foreground" Value="Red"/>\n            </Style>\n        </StackPanel.Styles>\n\n        <TextBlock Classes="h1">\n            <TextBlock.Styles>\n                <Style Selector="TextBlock.h1">\n                    <Setter Property="Foreground" Value="Blue"/>\n                </Style>\n            </TextBlock.Styles>\n\n            I\'m a Heading!\n        </TextBlock>\n    </StackPanel>\n</Window>\n'})}),"\n",(0,l.jsxs)(t.p,{children:["Here the ",(0,l.jsx)(t.code,{children:"h1"})," style is defined in multiple places. The ",(0,l.jsx)(t.code,{children:"TextBlock"})," will end up with the following settings:"]}),"\n",(0,l.jsxs)(t.table,{children:[(0,l.jsx)(t.thead,{children:(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Property"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Value"}),(0,l.jsx)(t.th,{style:{textAlign:"left"},children:"Source"})]})}),(0,l.jsxs)(t.tbody,{children:[(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"FontSize"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"48"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"StackPanel"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"FontWeight"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Bold"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"Window"})})]}),(0,l.jsxs)(t.tr,{children:[(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"Foreground"})}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:"Blue"}),(0,l.jsx)(t.td,{style:{textAlign:"left"},children:(0,l.jsx)(t.code,{children:"TextBlock"})})]})]})]}),"\n",(0,l.jsx)(t.p,{children:"If more than one style setter applies to a property, the value that takes precedence will be:"}),"\n",(0,l.jsxs)(t.ul,{children:["\n",(0,l.jsx)(t.li,{children:"The value from the style defined in the ancestor closest to the control"}),"\n",(0,l.jsxs)(t.li,{children:["For two styles declared in the same ",(0,l.jsx)(t.code,{children:"Styles"})," collection, the style that appears later"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,l.jsx)(t,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>r,a:()=>c});var l=s(67294);const n={},o=l.createContext(n);function c(e){const t=l.useContext(o);return l.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),l.createElement(o.Provider,{value:t},e.children)}}}]);