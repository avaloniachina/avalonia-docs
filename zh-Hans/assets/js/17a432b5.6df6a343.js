"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[47675],{12296:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=o(85893),l=o(11151);const r={info:"uielement-frameworkelement-and-control",title:"UIElement, FrameworkElement and Control"},a=void 0,s={id:"wpf-developer-tips/uielement-frameworkelement-and-control",title:"UIElement, FrameworkElement and Control",description:"WPF's UIElement and FrameworkElement are non-templated control base classes, which roughly equate to the Avalonia Control class. WPF's Control class on the other hand is a templated control - Avalonia's equivalent of this is TemplatedControl.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/wpf-developer-tips/uielement-frameworkelement-and-control.md",sourceDirName:"wpf-developer-tips",slug:"/wpf-developer-tips/uielement-frameworkelement-and-control",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/wpf-developer-tips/uielement-frameworkelement-and-control",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/wpf-developer-tips/uielement-frameworkelement-and-control.md",tags:[],version:"0.10.x",frontMatter:{info:"uielement-frameworkelement-and-control",title:"UIElement, FrameworkElement and Control"},sidebar:"documentationSidebar",previous:{title:"HierachicalDataTemplate",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/wpf-developer-tips/hierachicaldatatemplate"},next:{title:"DependencyProperty",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/wpf-developer-tips/dependencyproperty"}},i={},c=[];function d(e){const n={code:"code",li:"li",p:"p",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["WPF's ",(0,t.jsx)(n.code,{children:"UIElement"})," and ",(0,t.jsx)(n.code,{children:"FrameworkElement"})," are non-templated control base classes, which roughly equate to the Avalonia ",(0,t.jsx)(n.code,{children:"Control"})," class. WPF's ",(0,t.jsx)(n.code,{children:"Control"})," class on the other hand is a templated control - Avalonia's equivalent of this is ",(0,t.jsx)(n.code,{children:"TemplatedControl"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"So to recap:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"UIElement"}),": ",(0,t.jsx)(n.code,{children:"Control"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"FrameworkElement"}),": ",(0,t.jsx)(n.code,{children:"Control"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Control"}),": ",(0,t.jsx)(n.code,{children:"TemplatedControl"})]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>s,a:()=>a});var t=o(67294);const l={},r=t.createContext(l);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);