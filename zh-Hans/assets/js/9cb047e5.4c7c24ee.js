"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[9613],{57833:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>t,contentTitle:()=>i,default:()=>u,frontMatter:()=>c,metadata:()=>l,toc:()=>a});var s=r(85893),o=r(11151);const c={id:"resources",title:"Resources"},i=void 0,l={id:"styling/resources",title:"Resources",description:"Often, styles and controls will need to share resources such as \\(but not limited to\\) brushes and colors. You can put such resources in the Resources dictionary which is available on every style and control and then refer to these resources elsewhere.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/styling/resources.md",sourceDirName:"styling",slug:"/styling/resources",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/resources",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/styling/resources.md",tags:[],version:"0.10.x",frontMatter:{id:"resources",title:"Resources"},sidebar:"documentationSidebar",previous:{title:"Selectors",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/selectors"},next:{title:"Troubleshooting",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/troubleshooting"}},t={},a=[{value:"Declaring resources",id:"declaring-resources",level:2},{value:"Referencing resources",id:"referencing-resources",level:2},{value:"Overriding resources",id:"overriding-resources",level:2},{value:"Merged resource dictionaries",id:"merged-resource-dictionaries",level:2},{value:"Resource resolution",id:"resource-resolution",level:2},{value:"Theme resources",id:"theme-resources",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Often, styles and controls will need to share resources such as (but not limited to) brushes and colors. You can put such resources in the ",(0,s.jsx)(n.code,{children:"Resources"})," dictionary which is available on every style and control and then refer to these resources elsewhere."]}),"\n",(0,s.jsx)(n.h2,{id:"declaring-resources",children:"Declaring resources"}),"\n",(0,s.jsxs)(n.p,{children:["If a resource is to be available to your entire application, you can define it in ",(0,s.jsx)(n.code,{children:"App.xaml"}),"/",(0,s.jsx)(n.code,{children:"App.axaml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup",children:'<Application xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             x:Class="MyApp.App">\n  <Application.Resources>\n    <SolidColorBrush x:Key="Warning">Yellow</SolidColorBrush>\n  </Application.Resources>\n</Application>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively you can declare resources on a ",(0,s.jsx)(n.code,{children:"Window"})," or ",(0,s.jsx)(n.code,{children:"UserControl"}),": the resource will be available to the ",(0,s.jsx)(n.code,{children:"Window"}),"/",(0,s.jsx)(n.code,{children:"UserControl"})," and its children:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup",children:'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             x:Class="MyApp.MyUserControl">\n  <UserControl.Resources>\n    <SolidColorBrush x:Key="Warning">Yellow</SolidColorBrush>\n  </UserControl.Resources>\n</UserControl>\n'})}),"\n",(0,s.jsx)(n.p,{children:"Or in fact any control at all:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup",children:'<Window xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             x:Class="MyApp.MainWindow">\n  <StackPanel>\n    <StackPanel.Resources>\n      <SolidColorBrush x:Key="Warning">Yellow</SolidColorBrush>\n    </StackPanel.Resources>\n  </StackPanel>\n</Window>\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can also declare resources on styles:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup",children:'<Style Selector="TextBlock.warn">\n  <Style.Resources>\n    <SolidColorBrush x:Key="Warning">Yellow</SolidColorBrush>\n  </Style.Resources>\n</Style>\n'})}),"\n",(0,s.jsx)(n.h2,{id:"referencing-resources",children:"Referencing resources"}),"\n",(0,s.jsxs)(n.p,{children:["You can references resources from controls using the ",(0,s.jsx)(n.code,{children:"{DynamicResource}"})," markup extensions, e.g.:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup",children:'<Border Background="{DynamicResource Warning}">\n  Look out!\n</Border>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively there is the ",(0,s.jsx)(n.code,{children:"StaticResource"})," markup extension which has a few limitations with respect to ",(0,s.jsx)(n.code,{children:"DynamicResource"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"It will not respond to changes in the resource"}),"\n",(0,s.jsx)(n.li,{children:"The resource needs to be declared in the same XAML file"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["In return, ",(0,s.jsx)(n.code,{children:"StaticResource"})," doesn't need to add an event handler to listen for changes in resources which means it uses slightly less memory."]}),"\n",(0,s.jsx)(n.h2,{id:"overriding-resources",children:"Overriding resources"}),"\n",(0,s.jsxs)(n.p,{children:["Resources are resolved by walking up the logical tree from the point of the ",(0,s.jsx)(n.code,{children:"DynamicResource"})," or ",(0,s.jsx)(n.code,{children:"StaticResource"}),' until a resource with the requested key is found. This means that resources can be "overridden" in sub-trees of the application, for example:']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup",children:'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             x:Class="MyApp.MyUserControl">\n  <UserControl.Resources>\n    <SolidColorBrush x:Key="Warning">Yellow</SolidColorBrush>\n  </UserControl.Resources>\n\n  <StackPanel>\n    <StackPanel.Resources>\n      <SolidColorBrush x:Key="Warning">Orange</SolidColorBrush>\n    </StackPanel.Resources>\n\n    <Border Background="{DynamicResource Warning}">\n      Look out!\n    </Border>\n  </StackPanel>\n</UserControl>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Here's the ",(0,s.jsx)(n.code,{children:"Border"}),"'s background will be ",(0,s.jsx)(n.code,{children:"Orange"})," because its parent ",(0,s.jsx)(n.code,{children:"StackPanel"}),' has "overridden" the ',(0,s.jsx)(n.code,{children:"Warning"})," resource from the ",(0,s.jsx)(n.code,{children:"Yellow"})," declared on the ",(0,s.jsx)(n.code,{children:"UserControl"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"merged-resource-dictionaries",children:"Merged resource dictionaries"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"Resources"})," property on each control and style is of type ",(0,s.jsx)(n.code,{children:"ResourceDictionary"}),". Resource dictionaries can also include other resource dictionaries by making use of the ",(0,s.jsx)(n.code,{children:"MergedDictionaries"})," property. To include a resource dictionary in another you can use the ",(0,s.jsx)(n.code,{children:"ResourceInclude"})," class, e.g.:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-markup",children:"<Window.Resources>\n  <ResourceDictionary>\n    <ResourceDictionary.MergedDictionaries>\n      <ResourceInclude Source='/AnotherResourceDictionary.xaml'/>\n    </ResourceDictionary.MergedDictionaries>\n    <SolidColorBrush x:Key=\"Warning\">Yellow</SolidColorBrush>\n  </ResourceDictionary>\n</Window.Resources>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Where ",(0,s.jsx)(n.code,{children:"AnotherResourceDictionary"})," is a XAML file with a root of ",(0,s.jsx)(n.code,{children:"ResourceDictionary"})," and is included as an ",(0,s.jsx)(n.a,{href:"/avalonia-docs/zh-Hans/docs/0.10.x/getting-started/assets",children:"asset"})," in the application."]}),"\n",(0,s.jsx)(n.h2,{id:"resource-resolution",children:"Resource resolution"}),"\n",(0,s.jsxs)(n.p,{children:["As mentioned above, resources are resolved by walking up the logical tree from the point of the ",(0,s.jsx)(n.code,{children:"DynamicResource"})," or ",(0,s.jsx)(n.code,{children:"StaticResource"})," until a resource with the requested key is found. However the presence of styles and merged dictionaries complicates this somewhat. The precedence is as follows:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Control resources","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Merged dictionaries"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Style resources","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Merged dictionaries"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For the example application below, resource lookup for a resource defined on the ",(0,s.jsx)(n.code,{children:"Border"})," control would follow the order indicated in ",(0,s.jsx)(n.code,{children:"[]"})," brackets:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"Application\n |- Resources [11]\n     |- Merged dictionary [12]\n     |- Merged dictionary [13]\n |- Styles\n     |- Resources [14]\n         |- Merged dictionary [15]\n         |- Merged dictionary [16]\n\nWindow\n |- Resources [6]\n     |- Merged dictionary [7]\n |- Styles\n     |- Resources [8]\n         |- Merged dictionary [9]\n         |- Merged dictionary [10]\n |- StackPanel\n     |- Resources [1]\n         |- Merged dictionary [2]\n         |- Merged dictionary [3]\n     |- Styles\n         |- Resources [4]\n             |- Merged dictionary [5]\n     |- Border\n"})}),"\n",(0,s.jsx)(n.h2,{id:"theme-resources",children:"Theme resources"}),"\n",(0,s.jsxs)(n.p,{children:["Themes will usually define brushes, colors and other settings as resources. By changing these resources one can e.g. switch from a dark to a light theme. The resources defined will usually be specific to the theme in use but you can see the resources defined by the default theme ",(0,s.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Themes.Fluent/Accents/BaseResources.xaml",children:"here"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>l,a:()=>i});var s=r(67294);const o={},c=s.createContext(o);function i(e){const n=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);