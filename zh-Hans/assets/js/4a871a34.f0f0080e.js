"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[85809],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(k,i(i({ref:t},p),{},{components:n})):r.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},21559:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={description:"REFERENCE - Built-in Controls"},i="Items Repeater",l={unversionedId:"reference/controls/itemsrepeater",id:"reference/controls/itemsrepeater",title:"Items Repeater",description:"REFERENCE - Built-in Controls",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/reference/controls/itemsrepeater.md",sourceDirName:"reference/controls",slug:"/reference/controls/itemsrepeater",permalink:"/avalonia-docs/zh-Hans/docs/next/reference/controls/itemsrepeater",draft:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/reference/controls/itemsrepeater.md",tags:[],version:"current",frontMatter:{description:"REFERENCE - Built-in Controls"},sidebar:"documentationSidebar",previous:{title:"Items Control",permalink:"/avalonia-docs/zh-Hans/docs/next/reference/controls/itemscontrol"},next:{title:"Layout Controls",permalink:"/avalonia-docs/zh-Hans/docs/next/reference/controls/layout-controls"}},s={},c=[{value:"Example",id:"example",level:2},{value:"More Information",id:"more-information",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"items-repeater"},"Items Repeater"),(0,a.kt)("p",null,"The items repeater can display repeating data from a bound data source. It has both a layout template and a data template."," "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The items repeater is a port of the UWP ",(0,a.kt)("inlineCode",{parentName:"p"},"ItemsRepeater")," control. For further information see ",(0,a.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/windows/uwp/design/controls-and-patterns/items-repeater"},"here"),".")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The items repeater was moved ",(0,a.kt)("a",{parentName:"p",href:"https://www.nuget.org/packages/Avalonia.Controls.ItemsRepeater"},"here"))),(0,a.kt)("p",null,"The default layout template is a vertical stack layout, so that items appear in a vertical list."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"This example binds an observable collection of crockery items to an items repeater control, where some custom layout and formatting for each item is provided by the data template:"," "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<StackPanel Margin="20">\n  <TextBlock Margin="0 5">List of crockery:</TextBlock>\n  <ItemsRepeater  ItemsSource="{Binding CrockeryList}" >\n    <ItemsRepeater.ItemTemplate>\n    <DataTemplate>\n      <Border Margin="0,10,0,0"\n          CornerRadius="5"\n          BorderBrush="Blue" BorderThickness="1"\n          Padding="5">\n        <StackPanel Orientation="Horizontal">\n          <TextBlock Text="{Binding Title}"/>\n          <TextBlock Margin="5 0" FontWeight="Bold" \n                      Text="{Binding Number}"/>\n        </StackPanel>\n      </Border>\n    </DataTemplate>\n    </ItemsRepeater.ItemTemplate>\n    </ItemsRepeater>\n</StackPanel>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='C# View Model'",title:"'C#",View:!0,"Model'":!0},'using AvaloniaControls.Models;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\nnamespace AvaloniaControls.ViewModels\n{\n    public class MainWindowViewModel : ViewModelBase\n    {\n        public ObservableCollection<Crockery> CrockeryList { get; set; }\n        \n        public MainWindowViewModel()\n        {\n            CrockeryList = new ObservableCollection<Crockery>(new List<Crockery>\n            {\n                new Crockery("dinner plate", 12),\n                new Crockery("side plate", 12),\n                new Crockery("breakfast bowl", 6),\n                new Crockery("cup", 10),\n                new Crockery("saucer", 10),\n                new Crockery("mug", 6),\n                new Crockery("milk jug", 1)\n            });    \n        }\n    }\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-csharp",metastring:"title='C# Item Class'",title:"'C#",Item:!0,"Class'":!0},"public class Crockery\n{\n    public string Title { get; set; }\n    public int Number{ get; set; }\n\n    public Crockery(string title, int number)\n    {\n        Title = title;\n        Number = number;\n    }\n}\n")),(0,a.kt)("img",{src:"/img/gitbook-import/assets/image (2) (6).png",alt:""}),(0,a.kt)("p",null,"By default an items repeater will render the items in a vertical stack layout. You can display the items horizontally by overriding this using a ",(0,a.kt)("inlineCode",{parentName:"p"},"<ItemsRepeater.Layout>")," element, which must contain a stack layout. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},'<StackPanel Margin="20">\n  <TextBlock Margin="0 5">List of crockery:</TextBlock>\n  <ScrollViewer HorizontalScrollBarVisibility="Auto">\n    <ItemsRepeater ItemsSource="{Binding CrockeryList}" Margin="0 20">\n      <ItemsRepeater.Layout>\n        <StackLayout Spacing="40"\n            Orientation="Horizontal" />\n      </ItemsRepeater.Layout>\n      <ItemsRepeater.ItemTemplate>\n        <DataTemplate>\n          <Border Margin="0,10,0,0"\n              CornerRadius="5"\n              BorderBrush="Blue" BorderThickness="1"\n              Padding="5">\n            <StackPanel Orientation="Horizontal">\n              <TextBlock Text="{Binding Title}"/>\n              <TextBlock Margin="5 0" FontWeight="Bold" \n                          Text="{Binding Number}"/>\n            </StackPanel>\n          </Border>\n        </DataTemplate>\n      </ItemsRepeater.ItemTemplate>\n    </ItemsRepeater>\n  </ScrollViewer>\n</StackPanel>\n')),(0,a.kt)("p",null,"The items display horizontally, and those too far to the right would be hidden if it were not for the scroll viewer element added around the items repeater.   "," "),(0,a.kt)("img",{src:"/img/gitbook-import/assets/repeater.gif",alt:""}),(0,a.kt)("h2",{id:"more-information"},"More Information"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For the complete API documentation about this control, see ",(0,a.kt)("a",{parentName:"p",href:"http://reference.avaloniaui.net/api/Avalonia.Controls/ItemsRepeater/"},"here"),".")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"View the source code on ",(0,a.kt)("em",{parentName:"p"},"GitHub")," ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls.ItemsRepeater/Controls/ItemsRepeater.cs"},(0,a.kt)("inlineCode",{parentName:"a"},"ItemsRepeater.cs")))))}u.isMDXComponent=!0}}]);