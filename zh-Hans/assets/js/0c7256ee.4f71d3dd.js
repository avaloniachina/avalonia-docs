"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[70973],{39645:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(85893),t=n(11151);const i={id:"assets",title:"Assets"},r=void 0,o={id:"getting-started/assets",title:"Assets",description:"Many applications need to include assets such as bitmaps and resource dictionaries within their executable and refer to these assets from XAML.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/getting-started/assets.md",sourceDirName:"getting-started",slug:"/getting-started/assets",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/getting-started/assets",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/getting-started/assets.md",tags:[],version:"0.10.x",frontMatter:{id:"assets",title:"Assets"},sidebar:"documentationSidebar",previous:{title:"UserControls",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/getting-started/usercontrols"},next:{title:"Developer Tools",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/getting-started/developer-tools"}},c={},l=[{value:"Including assets",id:"including-assets",level:3},{value:"Referencing assets",id:"referencing-assets",level:3},{value:"Referencing manifest resources",id:"referencing-manifest-resources",level:3},{value:"Loading assets from code",id:"loading-assets-from-code",level:3}];function d(e){const s={a:"a",code:"code",em:"em",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:["Many applications need to include assets such as bitmaps and ",(0,a.jsx)(s.a,{href:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/resources",children:"resource dictionaries"})," within their executable and refer to these assets from XAML."]}),"\n",(0,a.jsx)(s.h3,{id:"including-assets",children:"Including assets"}),"\n",(0,a.jsxs)(s.p,{children:["Assets can be included in an application by using the ",(0,a.jsx)(s.code,{children:"<AvaloniaResource>"})," item in your project file. The MVVM Application template by default includes all files in the ",(0,a.jsx)(s.code,{children:"Assets"})," directory as an ",(0,a.jsx)(s.code,{children:"<AvaloniaResource>"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-markup",children:'<ItemGroup>\n  <AvaloniaResource Include="Assets\\**"/>\n</ItemGroup>\n'})}),"\n",(0,a.jsxs)(s.p,{children:["You can include whatever files you want by adding additional ",(0,a.jsx)(s.code,{children:"<AvaloniaResource>"})," elements."]}),"\n",(0,a.jsxs)(s.p,{children:["You will notice that we're referring to ",(0,a.jsx)(s.em,{children:"assets"})," here whereas the MSBuild item is called an Avalonia ",(0,a.jsx)(s.em,{children:"resource"}),". Assets are internally stored as ",(0,a.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/visualstudio/ide/managing-application-resources-dotnet",children:".NET resources"}),' but because the term "resource" conflicts with ',(0,a.jsx)(s.a,{href:"/avalonia-docs/zh-Hans/docs/0.10.x/styling/resources",children:"XAML resources"}),' we\'ll refer to them as "assets" throughout.']}),"\n",(0,a.jsx)(s.h3,{id:"referencing-assets",children:"Referencing assets"}),"\n",(0,a.jsx)(s.p,{children:"Assets can be referenced in XAML by specifying their relative path:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-markup",children:'<Image Source="icon.png"/>\n<Image Source="images/icon.png"/>\n<Image Source="../icon.png"/>\n'})}),"\n",(0,a.jsx)(s.p,{children:"Or their rooted path:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-markup",children:'<Image Source="/Assets/icon.png"/>\n'})}),"\n",(0,a.jsxs)(s.p,{children:["If the asset is located in a different assembly from the XAML file, then use the ",(0,a.jsx)(s.code,{children:"avares:"})," URI scheme. For example, if the asset is contained in an assembly called ",(0,a.jsx)(s.code,{children:"MyAssembly.dll"}),", then you would use:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-markup",children:'<Image Source="avares://MyAssembly/Assets/icon.png"/>\n'})}),"\n",(0,a.jsx)(s.p,{children:"In case of fonts, you can provide a font name after a '#' sign:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-markup",children:'<TextBlock FontFamily="avares://MyAssembly/Assets/font.ttf#FontName">test</TextBlock>\n'})}),"\n",(0,a.jsxs)(s.p,{children:["Avalonia provides converters which can load assets for bitmaps, icons and fonts out of the box. So an assets Uri can be automatically converted to any of following types: ",(0,a.jsx)(s.a,{href:"http://reference.avaloniaui.net/api/Avalonia.Media/IImage",children:"IImage"}),", ",(0,a.jsx)(s.a,{href:"http://reference.avaloniaui.net/api/Avalonia.Media.Imaging/IBitmap",children:"IBitmap"}),", ",(0,a.jsx)(s.a,{href:"http://reference.avaloniaui.net/api/Avalonia.Controls/WindowIcon",children:"WindowIcon"})," and ",(0,a.jsx)(s.a,{href:"http://reference.avaloniaui.net/api/Avalonia.Media/FontFamily",children:"FontFamily"})]}),"\n",(0,a.jsx)(s.h3,{id:"referencing-manifest-resources",children:"Referencing manifest resources"}),"\n",(0,a.jsxs)(s.p,{children:["Assets can also be included in .NET applications by using the ",(0,a.jsx)(s.code,{children:"<EmbeddedResource>"})," MSBuild item which causes the file to be included in the assembly as a ",(0,a.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getmanifestresourcenames",children:"manifest resource"}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["You can reference manifest resources using the ",(0,a.jsx)(s.code,{children:"resm:"})," URL scheme:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-markup",children:'<Image Source="resm:MyApp.Assets.icon.png"/>\n'})}),"\n",(0,a.jsx)(s.p,{children:"Or if the resource is embedded in a different assembly to the XAML file:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-markup",children:'<Image Source="resm:MyApp.Assets.icon.png?assembly=MyAssembly"/>\n'})}),"\n",(0,a.jsxs)(s.p,{children:["The name of the asset is automatically generated by MSBuild from the assembly name, the file path and the filename - all separated with periods. If Avalonia is unable to find a manifest resource, check the resource name using ",(0,a.jsx)(s.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assembly.getmanifestresourcenames",children:(0,a.jsx)(s.code,{children:"Assembly.GetManifestResourceNames"})}),"."]}),"\n",(0,a.jsx)(s.p,{children:'Note: starting with 11.0 Avalonia doesn\'t support manifest "resm" resources anymore. Use Avalonia Resources instead (avares).'}),"\n",(0,a.jsx)(s.h3,{id:"loading-assets-from-code",children:"Loading assets from code"}),"\n",(0,a.jsxs)(s.p,{children:["Assets can be loaded from code using the ",(0,a.jsx)(s.code,{children:"IAssetLoader"})," interface:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-csharp",children:"var assets = AvaloniaLocator.Current.GetService<IAssetLoader>();\nvar bitmap = new Bitmap(assets.Open(new Uri(uri)));\n"})}),"\n",(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"uri"})," variable in the snippet can contain any valid URI, including ",(0,a.jsx)(s.code,{children:"avares:"})," and ",(0,a.jsx)(s.code,{children:"resm:"})," as described above. By default, Avalonia does not provide support for ",(0,a.jsx)(s.code,{children:"file://"}),", ",(0,a.jsx)(s.code,{children:"http://"}),", or ",(0,a.jsx)(s.code,{children:"https://"})," schemes. If you want to load files from disk or web, you can implement that functionality yourself or use community implementations like ",(0,a.jsx)(s.a,{href:"https://github.com/AvaloniaUtils/AsyncImageLoader.Avalonia",children:"https://github.com/AvaloniaUtils/AsyncImageLoader.Avalonia"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,s,n)=>{n.d(s,{Z:()=>o,a:()=>r});var a=n(67294);const t={},i=a.createContext(t);function r(e){const s=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:s},e.children)}}}]);