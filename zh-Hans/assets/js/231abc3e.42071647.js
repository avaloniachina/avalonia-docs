"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[52511],{55002:(n,e,a)=>{a.r(e),a.d(e,{assets:()=>r,contentTitle:()=>i,default:()=>b,frontMatter:()=>o,metadata:()=>d,toc:()=>l});var s=a(85893),t=a(11151);const o={id:"binding-to-tasks-and-observables",title:"Binding to Tasks and Observables"},i=void 0,d={id:"data-binding/binding-to-tasks-and-observables",title:"Binding to Tasks and Observables",description:"You can subscribe to the result of a task or an observable by using the ^ stream binding operator.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/data-binding/binding-to-tasks-and-observables.md",sourceDirName:"data-binding",slug:"/data-binding/binding-to-tasks-and-observables",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/data-binding/binding-to-tasks-and-observables",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/data-binding/binding-to-tasks-and-observables.md",tags:[],version:"0.10.x",frontMatter:{id:"binding-to-tasks-and-observables",title:"Binding to Tasks and Observables"},sidebar:"documentationSidebar",previous:{title:"Binding to Commands",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/data-binding/binding-to-commands"},next:{title:"Binding from Code",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/data-binding/binding-from-code"}},r={},l=[{value:"Example 1: Binding to an observable",id:"example-1-binding-to-an-observable",level:2},{value:"Example 2: Binding to a task",id:"example-2-binding-to-a-task",level:2}];function c(n){const e={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:["You can subscribe to the result of a task or an observable by using the ",(0,s.jsx)(e.code,{children:"^"})," stream binding operator."]}),"\n",(0,s.jsx)(e.h2,{id:"example-1-binding-to-an-observable",children:"Example 1: Binding to an observable"}),"\n",(0,s.jsxs)(e.p,{children:["For example if ",(0,s.jsx)(e.code,{children:"DataContext.Name"})," is an ",(0,s.jsx)(e.code,{children:"IObservable<string>"})," then the following example will bind to the length of each string produced by the observable as each value is produced"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-markup",children:'<TextBlock Text="{Binding Name^.Length}"/>\n'})}),"\n",(0,s.jsx)(e.h2,{id:"example-2-binding-to-a-task",children:"Example 2: Binding to a task"}),"\n",(0,s.jsxs)(e.p,{children:["If you need to do some heavy work to load the content of a property you can bind to the result of an ",(0,s.jsx)(e.code,{children:"async Task<TResult>"})]}),"\n",(0,s.jsx)(e.p,{children:"Consider you have the following view model which generates some text in a long running process:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'public Task<string> MyAsyncText => GetTextAsync();\n\nprivate async Task<string> GetTextAsync()\n{\n  await Task.Delay(1000); // The delay is just for demonstration purpose\n  return "Hello from async operation";\n}\n'})}),"\n",(0,s.jsx)(e.p,{children:"You can bind to the result in the following way:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-markup",children:"<TextBlock Text=\"{Binding MyAsyncText^, FallbackValue='Wait a second'}\" />\n"})}),"\n",(0,s.jsx)(e.admonition,{type:"info",children:(0,s.jsxs)(e.p,{children:["Note: You can use ",(0,s.jsx)(e.code,{children:"FallbackValue"})," to display some loading indicator."]})})]})}function b(n={}){const{wrapper:e}={...(0,t.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},11151:(n,e,a)=>{a.d(e,{Z:()=>d,a:()=>i});var s=a(67294);const t={},o=s.createContext(t);function i(n){const e=s.useContext(o);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:i(n.components),s.createElement(o.Provider,{value:e},n.children)}}}]);