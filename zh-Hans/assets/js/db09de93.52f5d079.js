"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[44359],{10550:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>l});var t=o(85893),i=o(11151);const a={id:"binding-to-controls",title:"Binding to Controls"},r=void 0,d={id:"data-binding/binding-to-controls",title:"Binding to Controls",description:"As well as binding to a control's DataContext you can also bind to other controls.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/data-binding/binding-to-controls.md",sourceDirName:"data-binding",slug:"/data-binding/binding-to-controls",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/data-binding/binding-to-controls",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/data-binding/binding-to-controls.md",tags:[],version:"0.10.x",frontMatter:{id:"binding-to-controls",title:"Binding to Controls"},sidebar:"documentationSidebar",previous:{title:"Compiled Bindings",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/data-binding/compiled-bindings"},next:{title:"Converting Binding Values",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/data-binding/converting-binding-values"}},s={},l=[{value:"Binding to a named control",id:"binding-to-a-named-control",level:2},{value:"Binding to an Ancestor",id:"binding-to-an-ancestor",level:2}];function c(n){const e={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:["As well as binding to a control's ",(0,t.jsx)(e.a,{href:"the-datacontext",children:(0,t.jsx)(e.code,{children:"DataContext"})})," you can also bind to other controls."]}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsxs)(e.p,{children:["Note that when you do this, the binding source is to the ",(0,t.jsx)(e.em,{children:"control itself"})," not the control's ",(0,t.jsx)(e.code,{children:"DataContext"}),". If you want to bind to the control's ",(0,t.jsx)(e.code,{children:"DataContext"})," then you'll need to specify that in the binding path."]})}),"\n",(0,t.jsx)(e.h2,{id:"binding-to-a-named-control",children:"Binding to a named control"}),"\n",(0,t.jsxs)(e.p,{children:["If you want to bind to a property on another named control, you can use the control name prefixed by a ",(0,t.jsx)(e.code,{children:"#"})," character."]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:'<TextBox Name="other">\n\n\x3c!-- Binds to the Text property of the "other" control --\x3e\n<TextBlock Text="{Binding #other.Text}"/>\n'})}),"\n",(0,t.jsx)(e.p,{children:"This is the equivalent to the long-form binding that will be familiar to WPF and UWP users:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:'<TextBox Name="other">\n<TextBlock Text="{Binding Text, ElementName=other}"/>\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Avalonia supports both syntaxes but the short-form ",(0,t.jsx)(e.code,{children:"#"})," syntax is less verbose."]}),"\n",(0,t.jsx)(e.h2,{id:"binding-to-an-ancestor",children:"Binding to an Ancestor"}),"\n",(0,t.jsxs)(e.p,{children:["You can bind to the logical parent of the target using the ",(0,t.jsx)(e.code,{children:"$parent"})," symbol:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:'<Border Tag="Hello World!">\n  <TextBlock Text="{Binding $parent.Tag}"/>\n</Border>\n'})}),"\n",(0,t.jsxs)(e.p,{children:["Or to an ancestor by adding an indexer to the ",(0,t.jsx)(e.code,{children:"$parent"})," symbol:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:'<Border Tag="Hello World!">\n  <Border>\n    <TextBlock Text="{Binding $parent[1].Tag}"/>\n  </Border>\n</Border>\n'})}),"\n",(0,t.jsxs)(e.p,{children:["The indexer is 0-based so ",(0,t.jsx)(e.code,{children:"$parent[0]"})," is equivalent to ",(0,t.jsx)(e.code,{children:"$parent"}),"."]}),"\n",(0,t.jsx)(e.p,{children:"You can also bind to an ancestor by type:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:'<Border Tag="Hello World!">\n  <Decorator>\n    <TextBlock Text="{Binding $parent[Border].Tag}"/>\n  </Decorator>\n</Border>\n'})}),"\n",(0,t.jsx)(e.p,{children:"Finally, you can combine the indexer and the type:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:'<Border Tag="Hello World!">\n  <Border>\n    <Decorator>\n    <TextBlock Text="{Binding $parent[Border;1].Tag}"/>\n    </Decorator>\n  </Border>\n</Border>\n'})}),"\n",(0,t.jsxs)(e.p,{children:["If you need to include a XAML namespace in the ancestor type, you can do that using the ",(0,t.jsx)(e.code,{children:":"})," character as normal:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-xml",children:'<local:MyControl Tag="Hello World!">\n  <Decorator>\n    <TextBlock Text="{Binding $parent[local:MyControl].Tag}"/>\n  </Decorator>\n</local:MyControl>\n'})}),"\n",(0,t.jsx)(e.admonition,{type:"warning",children:(0,t.jsxs)(e.p,{children:["Avalonia also supports WPF/UWP's ",(0,t.jsx)(e.code,{children:"RelativeSource"})," syntax which does something similar, but is ",(0,t.jsx)(e.em,{children:"not"})," the same. ",(0,t.jsx)(e.code,{children:"RelativeSource"})," works on the ",(0,t.jsx)(e.em,{children:"visual"})," tree whereas the syntax given here works on the ",(0,t.jsx)(e.em,{children:"logical"})," tree."]})})]})}function h(n={}){const{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},11151:(n,e,o)=>{o.d(e,{Z:()=>d,a:()=>r});var t=o(67294);const i={},a=t.createContext(i);function r(n){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);