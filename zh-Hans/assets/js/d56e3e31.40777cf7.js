"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[75862],{64901:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>r,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var i=t(85893),o=t(11151);const s=t.p+"assets/images/creating-a-view-todolistview-e99b807e0f8539d3c4c96416f6be8fc1.png",a={id:"creating-a-view",title:"Creating a View"},l=void 0,c={id:"tutorials/todo-list-app/creating-a-view",title:"Creating a View",description:"Let's first create a view to display a list of TODO items together with a button to add a new item.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/tutorials/todo-list-app/creating-a-view.md",sourceDirName:"tutorials/todo-list-app",slug:"/tutorials/todo-list-app/creating-a-view",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/tutorials/todo-list-app/creating-a-view",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/tutorials/todo-list-app/creating-a-view.md",tags:[],version:"0.10.x",frontMatter:{id:"creating-a-view",title:"Creating a View"},sidebar:"documentationSidebar",previous:{title:"Creating a new project",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/tutorials/todo-list-app/creating-a-new-project"},next:{title:"Creating a Model & ViewModel",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/tutorials/todo-list-app/creating-a-model-and-viewmodel"}},r={},d=[{value:"Create the UserControl",id:"create-the-usercontrol",level:3},{value:"Visual Studio",id:"visual-studio",level:4},{value:".NET Core CLI",id:"net-core-cli",level:4},{value:"The UserControl",id:"the-usercontrol",level:3},{value:"Edit the UserControl",id:"edit-the-usercontrol",level:3},{value:"What does it all mean?",id:"what-does-it-all-mean",level:3},{value:"Display the view in the Window",id:"display-the-view-in-the-window",level:3},{value:"Run the application",id:"run-the-application",level:3}];function h(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Let's first create a view to display a list of TODO items together with a button to add a new item."}),"\n",(0,i.jsx)(n.p,{children:"Because this is a first tutorial, we're going to first just populate the view with some hard-coded data. In later steps we'll use the MVVM pattern to populate this view."}),"\n",(0,i.jsxs)(n.p,{children:["Our view is going to be a ",(0,i.jsx)(n.code,{children:"UserControl"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"create-the-usercontrol",children:"Create the UserControl"}),"\n",(0,i.jsxs)(n.p,{children:["We're going to create the ",(0,i.jsx)(n.code,{children:"UserControl"})," from a template. Follow the instructions below:"]}),"\n",(0,i.jsx)(n.h4,{id:"visual-studio",children:"Visual Studio"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Right click your project's ",(0,i.jsx)(n.code,{children:"Views"})," folder in Solution Explorer"]}),"\n",(0,i.jsxs)(n.li,{children:["Select the ",(0,i.jsx)(n.code,{children:"Add -> New Item"})," menu item"]}),"\n",(0,i.jsx)(n.li,{children:'In the dialog that appears, navigate to the "Avalonia" section in the category tree'}),"\n",(0,i.jsx)(n.li,{children:'Select "User Control (Avalonia)"'}),"\n",(0,i.jsxs)(n.li,{children:["Enter ",(0,i.jsx)(n.code,{children:"TodoListView"}),' as the "Name"']}),"\n",(0,i.jsx)(n.li,{children:'Click the "Add" button'}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"net-core-cli",children:".NET Core CLI"}),"\n",(0,i.jsx)(n.p,{children:'Run this command from the root directory of your project (the directory that contains "Program.cs" and the "Views" directory):'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"dotnet new avalonia.usercontrol -o Views -n TodoListView  --namespace Todo.Views\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-usercontrol",children:"The UserControl"}),"\n",(0,i.jsxs)(n.p,{children:["The template should create a XAML file with the following contents in the ",(0,i.jsx)(n.code,{children:"Views"})," directory, alongside ",(0,i.jsx)(n.code,{children:"MainWindow.axaml"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"\n             x:Class="Todo.Views.TodoListView">\n    Welcome to Avalonia!\n</UserControl>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Alongside the XAML, you will also find a ",(0,i.jsx)(n.code,{children:"TodoListView.axaml.cs"})," file containing the code-behind for the view (in Visual Studio this is nested under the XAML file so click the expander next to the XAML file in Solution Explorer to see it):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"using Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Markup.Xaml;\n\nnamespace Todo.Views\n{\n    public partial class TodoListView : UserControl\n    {\n        public TodoListView()\n        {\n            InitializeComponent();\n        }\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We're not going to touch the code-behind file for a little while, but notice that the class is called ",(0,i.jsx)(n.code,{children:"TodoListView"})," and it's located in the ",(0,i.jsx)(n.code,{children:"Todo.Views"})," namespace."]}),"\n",(0,i.jsx)(n.h3,{id:"edit-the-usercontrol",children:"Edit the UserControl"}),"\n",(0,i.jsxs)(n.p,{children:["Edit the contents of ",(0,i.jsx)(n.code,{children:"Views/TodoListView.axaml"})," to contain the following:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             mc:Ignorable="d" d:DesignWidth="200" d:DesignHeight="300"\n             x:Class="Todo.Views.TodoListView">\n  <DockPanel>\n    <Button DockPanel.Dock="Bottom"\n            HorizontalAlignment="Center">\n        Add an item\n    </Button>\n    <StackPanel>\n      <CheckBox Margin="4">Walk the dog</CheckBox>\n      <CheckBox Margin="4">Buy some milk</CheckBox>\n    </StackPanel>\n  </DockPanel>\n</UserControl>\n'})}),"\n",(0,i.jsx)(n.p,{children:"If you're using the Visual Studio extension you should see the contents of the control displayed in the previewer after completing a build:"}),"\n",(0,i.jsx)("img",{className:"center",src:s,alt:"Designer view"}),"\n",(0,i.jsx)(n.h3,{id:"what-does-it-all-mean",children:"What does it all mean?"}),"\n",(0,i.jsx)(n.p,{children:"Lets take a look at the code we just entered line-by-line."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006">\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The root element in the XAML is ",(0,i.jsx)(n.code,{children:"UserControl"})," as could be expected. This is followed by a bunch of ",(0,i.jsx)(n.code,{children:"xmlns"})," declarations. Each of these declares an XML namespace but the most important one is the first one: ",(0,i.jsx)(n.code,{children:'xmlns="https://github.com/avaloniaui"'})," - this declares that the XAML in the file contains Avalonia XAML; without this entry nothing will work."]}),"\n",(0,i.jsxs)(n.p,{children:["The next XML namespace is ",(0,i.jsx)(n.code,{children:'xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"'}),". This is used to import XAML features that aren't specific to Avalonia. We'll be seeing this in use later."]}),"\n",(0,i.jsx)(n.p,{children:"The following two namespaces are used to communicate designer-specific information, which is specified next:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'mc:Ignorable="d" d:DesignWidth="200" d:DesignHeight="300"\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:'mc:Ignorable="d"'})," tells the XAML engine that entries beginning with ",(0,i.jsx)(n.code,{children:"d:"})," can be ignored and you can pretty much ignore it too!"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:'d:DesignWidth="200"'})," and ",(0,i.jsx)(n.code,{children:'d:DesignHeight="300"'})," attributes tell the XAML designer to display the content with a size of 200x300 pixels. They're ignored at runtime."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'x:Class="Todo.Views.TodoListView"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["This line tells the XAML engine where the class that accompanies the XAML can be found. It's the fully-qualified name of the class. Note that this attribute is prefixed with ",(0,i.jsx)(n.code,{children:"x:"})," - this relates to the ",(0,i.jsx)(n.code,{children:"xmlns:x"})," entry we saw earlier."]}),"\n",(0,i.jsx)(n.p,{children:"Ok, that's the boilerplate out of the way! Now onto the meat of the code:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:"<DockPanel>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["First we add a ",(0,i.jsx)(n.code,{children:"DockPanel"})," as the child of the ",(0,i.jsx)(n.code,{children:"UserControl"}),". A ",(0,i.jsx)(n.code,{children:"UserControl"})," can only contain a single child so often the child is one of Avalonia's panel controls. ",(0,i.jsx)(n.code,{children:"Panel"})," controls are special in that they can have multiple children."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"DockPanel"})," is a type of panel which lays out its controls at the top, bottom, left and right sides, with a single control filling the remaining space in the middle."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'<Button DockPanel.Dock="Bottom" HorizontalAlignment="Center">Add an item</Button>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Now we declare the ",(0,i.jsx)(n.code,{children:"Button"})," that appears at the bottom of the view. The ",(0,i.jsx)(n.code,{children:"DockPanel.Dock"})," attribute tells the containing ",(0,i.jsx)(n.code,{children:"DockPanel"})," that we want the button to appear at the bottom. ",(0,i.jsx)(n.code,{children:"HorizontalAlignment"})," centers button in the middle of the parent. As the element content we set the button text: ",(0,i.jsx)(n.code,{children:'"Add an item"'}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:"<StackPanel>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Next we add another panel: a ",(0,i.jsx)(n.code,{children:"StackPanel"}),". ",(0,i.jsx)(n.code,{children:"StackPanel"})," lays out its child controls - surprise - in a stack. By default it lays out the controls vertically, but you can also make it lay out controls horizontally by setting the ",(0,i.jsx)(n.code,{children:"Orientation"})," property, e.g. ",(0,i.jsx)(n.code,{children:'<StackPanel Orientation="Horizontal">'}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Because this is the last child in the ",(0,i.jsx)(n.code,{children:"DockPanel"})," it will fill the remaining space in the center of the control."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'<CheckBox Margin="4">Walk the dog</CheckBox>\n<CheckBox Margin="4">Buy some milk</CheckBox>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Last of all, we add two ",(0,i.jsx)(n.code,{children:"CheckBox"})," controls to represent the TODO items. We're also giving the controls a margin to separate them a little bit visually."]}),"\n",(0,i.jsx)(n.h3,{id:"display-the-view-in-the-window",children:"Display the view in the Window"}),"\n",(0,i.jsxs)(n.p,{children:["To see the view we've just created, we need to add it to the application's main window. Open the ",(0,i.jsx)(n.code,{children:"Views/MainWindow.axaml"})," file and edit it to have the following content:"]}),"\n",(0,i.jsx)(n.p,{children:"Views/MainWindow.axaml"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:views="clr-namespace:Todo.Views"\n        x:Class="Todo.Views.MainWindow"\n        Icon="/Assets/avalonia-logo.ico"\n        Width="200" Height="300"\n        Title="Avalonia Todo">\n  <views:TodoListView/>\n</Window>\n'})}),"\n",(0,i.jsx)(n.p,{children:"A lot of this is similar to the markup we've already seen, so lets just look at the interesting parts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:'xmlns:views="clr-namespace:Todo.Views"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We want to display the ",(0,i.jsx)(n.code,{children:"TodoListView"})," control we just created, which is in the ",(0,i.jsx)(n.code,{children:"Todo.Views"})," C# namespace. Here we're mapping the ",(0,i.jsx)(n.code,{children:"Todo.Views"})," namespace to the ",(0,i.jsx)(n.code,{children:"views"})," XML namespace. Any control that is not a core Avalonia control will generally need this type of mapping in order for the XAML engine to find the control."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markup",children:"<views:TodoListView/>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Using the XML namespace we've just declared we now place the ",(0,i.jsx)(n.code,{children:"TodoListView"})," control as the content of our ",(0,i.jsx)(n.code,{children:"Window"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"run-the-application",children:"Run the application"}),"\n",(0,i.jsxs)(n.p,{children:["If you now run the application (by pressing ",(0,i.jsx)(n.code,{children:"F5"})," in Visual Studio or executing ",(0,i.jsx)(n.code,{children:"dotnet run"})," in .NET Core) you should see the application running in all its glory:"]}),"\n",(0,i.jsx)("div",{style:{textAlign:"center"},children:(0,i.jsx)("img",{src:"/img/tutorials/todo-list-app/creating-a-view/creating-a-view-run.png",alt:"The running application"})})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var i=t(67294);const o={},s=i.createContext(o);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);