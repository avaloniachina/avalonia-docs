"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[38577],{68700:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=t(85893),r=t(11151);const s={id:"image",title:"Image"},o=void 0,i={id:"controls/image",title:"Image",description:"The Image control is a control for displaying raster images.",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/controls/image.md",sourceDirName:"controls",slug:"/controls/image",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/controls/image",draft:!1,unlisted:!1,editUrl:"https://github.com/AvaloniaUI/avalonia-docs/tree/main/i18n/zh-Hans/docusaurus-plugin-content-docs/version-0.10.x/controls/image.md",tags:[],version:"0.10.x",frontMatter:{id:"image",title:"Image"},sidebar:"documentationSidebar",previous:{title:"GridSplitter",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/controls/gridsplitter"},next:{title:"ItemsControl",permalink:"/avalonia-docs/zh-Hans/docs/0.10.x/controls/itemscontrol"}},c={},l=[{value:"Binding",id:"binding",level:3},{value:"Examples",id:"examples",level:3},{value:"Swappable Image Button",id:"swappable-image-button",level:4},{value:"Reference",id:"reference",level:3},{value:"Source code",id:"source-code",level:3}];function d(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"Image"})," control is a control for displaying raster images."]}),"\n",(0,a.jsx)(n.h3,{id:"binding",children:"Binding"}),"\n",(0,a.jsxs)(n.p,{children:["Binding onto an ",(0,a.jsx)(n.code,{children:"Image"})," control's ",(0,a.jsx)(n.code,{children:"Source"})," property with a ",(0,a.jsx)(n.code,{children:"string"})," must be done using a ",(0,a.jsx)(n.a,{href:"../data-binding/converting-binding-values",children:"binding converter"})," that will convert the ",(0,a.jsx)(n.code,{children:"string"})," to an ",(0,a.jsx)(n.code,{children:"IBitmap"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.h4,{id:"swappable-image-button",children:"Swappable Image Button"}),"\n",(0,a.jsxs)(n.p,{children:["An image button that changes images based on state is an example where binding to the ",(0,a.jsx)(n.code,{children:"Image"})," control's ",(0,a.jsx)(n.code,{children:"Source"})," property might seem necessary."]}),"\n",(0,a.jsxs)(n.p,{children:["To have a button that swaps the image it's showing based on its state, you could either use a ",(0,a.jsx)(n.a,{href:"../data-binding/converting-binding-values",children:"binding converter"})," that converts a ",(0,a.jsx)(n.code,{children:"string"})," into a ",(0,a.jsx)(n.code,{children:"IBitmap"}),", or you could use the declarative approaches below, which don't use binding."]}),"\n",(0,a.jsx)(n.p,{children:"The declarative approaches keep images in memory and won't have to load them in on-demand, which will net you greater performance than a binding approach. You must declare every image you will use inside your XAML with the declarative approach."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Binding Converter Approach"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<UserControl.Resources>\n    <ext:BitmapAssetValueConverter x:Key="variableImage"/>\n</UserControl.Resources>\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-markup",children:'<Image Width="75"\n       Height="73"\n       Source="{Binding PlaySource, Converter={StaticResource variableImage}}">\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'/// <summary>\n/// <para>\n/// Converts a string path to a bitmap asset.\n/// </para>\n/// <para>\n/// The asset must be in the same assembly as the program. If it isn\'t,\n/// specify "avares://<assemblynamehere>/" in front of the path to the asset.\n/// </para>\n/// </summary>\npublic class BitmapAssetValueConverter : IValueConverter\n{\n    public static BitmapAssetValueConverter Instance = new BitmapAssetValueConverter();\n\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        if (value == null)\n            return null;\n\n        if (value is string rawUri && targetType.IsAssignableFrom(typeof(Bitmap)))\n        {\n            Uri uri;\n\n            // Allow for assembly overrides\n            if (rawUri.StartsWith("avares://"))\n            {\n                uri = new Uri(rawUri);\n            }\n            else\n            {\n                string assemblyName = Assembly.GetEntryAssembly().GetName().Name;\n                uri = new Uri($"avares://{assemblyName}/{rawUri}");\n            }\n\n            var assets = AvaloniaLocator.Current.GetService<IAssetLoader>();\n            var asset = assets.Open(uri);\n\n            return new Bitmap(asset);\n        }\n\n        throw new NotSupportedException();\n    }\n\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        throw new NotSupportedException();\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Declarative Approaches"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Using a Button"})}),"\n",(0,a.jsxs)(n.p,{children:["View the ",(0,a.jsx)(n.a,{href:"buttons/button#play-button",children:'"Play Button" example'})," in the ",(0,a.jsx)(n.code,{children:"Button"})," documentation."]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Using a ToggleButton"})}),"\n",(0,a.jsxs)(n.p,{children:["View the ",(0,a.jsx)(n.a,{href:"buttons/togglebutton#speaker-mute-button",children:'"Speaker Mute Button" example'})," in the ToggleButton documentation."]}),"\n",(0,a.jsx)(n.h3,{id:"reference",children:"Reference"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"http://reference.avaloniaui.net/api/Avalonia.Controls/Image/",children:"Image"})}),"\n",(0,a.jsx)(n.h3,{id:"source-code",children:"Source code"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls/Image.cs",children:"Image.cs"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>o});var a=t(67294);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);